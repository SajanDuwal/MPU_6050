
MPU_6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08007408  08007408  00017408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b8  080078b8  00020270  2**0
                  CONTENTS
  4 .ARM          00000000  080078b8  080078b8  00020270  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078b8  080078b8  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  080078c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000270  08007b30  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08007b30  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8e1  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dda  00000000  00000000  0002db7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  00030340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001866c  00000000  00000000  00030c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceb7  00000000  00000000  000492f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bdc  00000000  00000000  000561ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dcd87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  000dcddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000270 	.word	0x20000270
 800012c:	00000000 	.word	0x00000000
 8000130:	080073ec 	.word	0x080073ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000274 	.word	0x20000274
 800014c:	080073ec 	.word	0x080073ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_I2C1_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_I2C1_Init+0x58>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f82:	f001 f9b9 	bl	80022f8 <HAL_I2C_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 f96a 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000490 	.word	0x20000490
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <bufferSize>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int bufferSize(const char *str) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]

	// Iterate through the string until a null character is encountered

	while (*str++ != '\0')
 8000fac:	e002      	b.n	8000fb4 <bufferSize+0x14>
		count++;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
	while (*str++ != '\0')
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f6      	bne.n	8000fae <bufferSize+0xe>

//	while (str[count] != '\0') {
//		count++;
//	}

	return count;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <myprintf>:

void myprintf(const char *fmt, ...) {
 8000fcc:	b40f      	push	{r0, r1, r2, r3}
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
	static char temp[500];
	va_list args;
	va_start(args, fmt);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <myprintf+0x44>)
 8000fe4:	f003 fc9e 	bl	8004924 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <myprintf+0x44>)
 8000fea:	f7ff ffd9 	bl	8000fa0 <bufferSize>
 8000fee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	4905      	ldr	r1, [pc, #20]	; (8001010 <myprintf+0x44>)
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <myprintf+0x48>)
 8000ffc:	f002 fe34 	bl	8003c68 <HAL_UART_Transmit>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100a:	b004      	add	sp, #16
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000290 	.word	0x20000290
 8001014:	20000540 	.word	0x20000540

08001018 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800101c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001020:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001022:	f000 fe7b 	bl	8001d1c <HAL_Init>
	/* USER CODE BEGIN Init */
	char tempBuffer[500];
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001026:	f000 f889 	bl	800113c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800102a:	f000 f8ed 	bl	8001208 <MX_GPIO_Init>
	MX_I2C1_Init();
 800102e:	f7ff ff89 	bl	8000f44 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001032:	f000 f8bf 	bl	80011b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	if (MPU6050_Init(&hi2c1) == 1) {
 8001036:	483b      	ldr	r0, [pc, #236]	; (8001124 <main+0x10c>)
 8001038:	f000 f919 	bl	800126e <MPU6050_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <main+0x30>
		mpuResponse = 1;
 8001042:	4b39      	ldr	r3, [pc, #228]	; (8001128 <main+0x110>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001048:	4938      	ldr	r1, [pc, #224]	; (800112c <main+0x114>)
 800104a:	4836      	ldr	r0, [pc, #216]	; (8001124 <main+0x10c>)
 800104c:	f000 f968 	bl	8001320 <MPU6050_Read_All>
		HAL_Delay(1000);
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	f000 fec4 	bl	8001de0 <HAL_Delay>
		mpuData[0] = i++;
 8001058:	4b35      	ldr	r3, [pc, #212]	; (8001130 <main+0x118>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	b2d1      	uxtb	r1, r2
 8001060:	4a33      	ldr	r2, [pc, #204]	; (8001130 <main+0x118>)
 8001062:	7011      	strb	r1, [r2, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f9bd 	bl	80003e4 <__aeabi_ui2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4931      	ldr	r1, [pc, #196]	; (8001134 <main+0x11c>)
 8001070:	e9c1 2300 	strd	r2, r3, [r1]
		mpuData[1] = MPU6050.Ax;
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <main+0x114>)
 8001076:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800107a:	492e      	ldr	r1, [pc, #184]	; (8001134 <main+0x11c>)
 800107c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		mpuData[2] = MPU6050.Ay;
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <main+0x114>)
 8001082:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001086:	492b      	ldr	r1, [pc, #172]	; (8001134 <main+0x11c>)
 8001088:	e9c1 2304 	strd	r2, r3, [r1, #16]
		mpuData[3] = MPU6050.Az;
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <main+0x114>)
 800108e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001092:	4928      	ldr	r1, [pc, #160]	; (8001134 <main+0x11c>)
 8001094:	e9c1 2306 	strd	r2, r3, [r1, #24]
		mpuData[4] = MPU6050.Gx;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <main+0x114>)
 800109a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800109e:	4925      	ldr	r1, [pc, #148]	; (8001134 <main+0x11c>)
 80010a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		mpuData[5] = MPU6050.Gy;
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <main+0x114>)
 80010a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010aa:	4922      	ldr	r1, [pc, #136]	; (8001134 <main+0x11c>)
 80010ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		mpuData[6] = MPU6050.Gz;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <main+0x114>)
 80010b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010b6:	491f      	ldr	r1, [pc, #124]	; (8001134 <main+0x11c>)
 80010b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

		sprintf(tempBuffer, "%.2f %.21f %.21f %.21f %.21f %.21f %.21f\r\n",
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <main+0x11c>)
 80010be:	cb18      	ldmia	r3, {r3, r4}
 80010c0:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <main+0x11c>)
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <main+0x11c>)
 80010cc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <main+0x11c>)
 80010d2:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <main+0x11c>)
 80010d8:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <main+0x11c>)
 80010de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010e2:	e9c7 2300 	strd	r2, r3, [r7]
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <main+0x11c>)
 80010e8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010ec:	f107 0614 	add.w	r6, r7, #20
 80010f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80010f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010fc:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001100:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001104:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001108:	e9cd 0100 	strd	r0, r1, [sp]
 800110c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001110:	4909      	ldr	r1, [pc, #36]	; (8001138 <main+0x120>)
 8001112:	4630      	mov	r0, r6
 8001114:	f003 fbba 	bl	800488c <siprintf>
				mpuData[0], mpuData[1], mpuData[2], mpuData[3], mpuData[4],
				mpuData[5], mpuData[6]);
		myprintf(tempBuffer);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff55 	bl	8000fcc <myprintf>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001122:	e791      	b.n	8001048 <main+0x30>
 8001124:	20000490 	.word	0x20000490
 8001128:	2000028d 	.word	0x2000028d
 800112c:	200004e8 	.word	0x200004e8
 8001130:	2000028c 	.word	0x2000028c
 8001134:	20000588 	.word	0x20000588
 8001138:	08007408 	.word	0x08007408

0800113c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b090      	sub	sp, #64	; 0x40
 8001140:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	2228      	movs	r2, #40	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 ff36 	bl	8003fbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	2310      	movs	r3, #16
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	4618      	mov	r0, r3
 8001174:	f002 f91a 	bl	80033ac <HAL_RCC_OscConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x46>
		Error_Handler();
 800117e:	f000 f871 	bl	8001264 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001182:	230f      	movs	r3, #15
 8001184:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fb86 	bl	80038ac <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x6e>
		Error_Handler();
 80011a6:	f000 f85d 	bl	8001264 <Error_Handler>
	}
}
 80011aa:	bf00      	nop
 80011ac:	3740      	adds	r7, #64	; 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART1_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ec:	f002 fcec 	bl	8003bc8 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80011f6:	f000 f835 	bl	8001264 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000540 	.word	0x20000540
 8001204:	40013800 	.word	0x40013800

08001208 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_GPIO_Init+0x58>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <MX_GPIO_Init+0x58>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_GPIO_Init+0x58>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_GPIO_Init+0x58>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <MX_GPIO_Init+0x58>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_GPIO_Init+0x58>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_GPIO_Init+0x58>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <MX_GPIO_Init+0x58>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <MX_GPIO_Init+0x58>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000

08001264 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>

0800126e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b088      	sub	sp, #32
 8001272:	af04      	add	r7, sp, #16
 8001274:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2301      	movs	r3, #1
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	f107 030f 	add.w	r3, r7, #15
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	2275      	movs	r2, #117	; 0x75
 8001288:	21d0      	movs	r1, #208	; 0xd0
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 fa72 	bl	8002774 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b68      	cmp	r3, #104	; 0x68
 8001294:	d13d      	bne.n	8001312 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	2301      	movs	r3, #1
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f107 030e 	add.w	r3, r7, #14
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	226b      	movs	r2, #107	; 0x6b
 80012ac:	21d0      	movs	r1, #208	; 0xd0
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f001 f966 	bl	8002580 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80012b4:	2307      	movs	r3, #7
 80012b6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2301      	movs	r3, #1
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f107 030e 	add.w	r3, r7, #14
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	2219      	movs	r2, #25
 80012ca:	21d0      	movs	r1, #208	; 0xd0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f001 f957 	bl	8002580 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f107 030e 	add.w	r3, r7, #14
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	221c      	movs	r2, #28
 80012e8:	21d0      	movs	r1, #208	; 0xd0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f001 f948 	bl	8002580 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030e 	add.w	r3, r7, #14
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	221b      	movs	r2, #27
 8001306:	21d0      	movs	r1, #208	; 0xd0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f001 f939 	bl	8002580 <HAL_I2C_Mem_Write>
        return 1;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <MPU6050_Init+0xa6>
    }
    return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0000      	movs	r0, r0
	...

08001320 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001324:	b094      	sub	sp, #80	; 0x50
 8001326:	af04      	add	r7, sp, #16
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	230e      	movs	r3, #14
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	223b      	movs	r2, #59	; 0x3b
 800133e:	21d0      	movs	r1, #208	; 0xd0
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f001 fa17 	bl	8002774 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001346:	7a3b      	ldrb	r3, [r7, #8]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	7a7b      	ldrb	r3, [r7, #9]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21a      	sxth	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001358:	7abb      	ldrb	r3, [r7, #10]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	7afb      	ldrb	r3, [r7, #11]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21a      	sxth	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800136a:	7b3b      	ldrb	r3, [r7, #12]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b21a      	sxth	r2, r3
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	b21b      	sxth	r3, r3
 8001386:	4313      	orrs	r3, r2
 8001388:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800138a:	7c3b      	ldrb	r3, [r7, #16]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	7c7b      	ldrb	r3, [r7, #17]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800139c:	7cbb      	ldrb	r3, [r7, #18]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	7cfb      	ldrb	r3, [r7, #19]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80013ae:	7d3b      	ldrb	r3, [r7, #20]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	7d7b      	ldrb	r3, [r7, #21]
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f81c 	bl	8000404 <__aeabi_i2d>
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4bb7      	ldr	r3, [pc, #732]	; (80016b0 <MPU6050_Read_All+0x390>)
 80013d2:	f7ff f9ab 	bl	800072c <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f80c 	bl	8000404 <__aeabi_i2d>
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4baf      	ldr	r3, [pc, #700]	; (80016b0 <MPU6050_Read_All+0x390>)
 80013f2:	f7ff f99b 	bl	800072c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fffc 	bl	8000404 <__aeabi_i2d>
 800140c:	a3a2      	add	r3, pc, #648	; (adr r3, 8001698 <MPU6050_Read_All+0x378>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f98b 	bl	800072c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001420:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fbe9 	bl	8000bfc <__aeabi_i2f>
 800142a:	4603      	mov	r3, r0
 800142c:	49a1      	ldr	r1, [pc, #644]	; (80016b4 <MPU6050_Read_All+0x394>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fcec 	bl	8000e0c <__aeabi_fdiv>
 8001434:	4603      	mov	r3, r0
 8001436:	49a0      	ldr	r1, [pc, #640]	; (80016b8 <MPU6050_Read_All+0x398>)
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fb2b 	bl	8000a94 <__addsf3>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe ffd9 	bl	8000404 <__aeabi_i2d>
 8001452:	a393      	add	r3, pc, #588	; (adr r3, 80016a0 <MPU6050_Read_All+0x380>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f968 	bl	800072c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe ffc9 	bl	8000404 <__aeabi_i2d>
 8001472:	a38b      	add	r3, pc, #556	; (adr r3, 80016a0 <MPU6050_Read_All+0x380>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f958 	bl	800072c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ffb9 	bl	8000404 <__aeabi_i2d>
 8001492:	a383      	add	r3, pc, #524	; (adr r3, 80016a0 <MPU6050_Read_All+0x380>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f948 	bl	800072c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80014a6:	f000 fc91 	bl	8001dcc <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b83      	ldr	r3, [pc, #524]	; (80016bc <MPU6050_Read_All+0x39c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ff96 	bl	80003e4 <__aeabi_ui2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b80      	ldr	r3, [pc, #512]	; (80016c0 <MPU6050_Read_All+0x3a0>)
 80014be:	f7ff f935 	bl	800072c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80014ca:	f000 fc7f 	bl	8001dcc <HAL_GetTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a7a      	ldr	r2, [pc, #488]	; (80016bc <MPU6050_Read_All+0x39c>)
 80014d2:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	461a      	mov	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	fb03 f202 	mul.w	r2, r3, r2
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014ec:	4619      	mov	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014f4:	fb03 f301 	mul.w	r3, r3, r1
 80014f8:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ff82 	bl	8000404 <__aeabi_i2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f005 fdc6 	bl	8007098 <sqrt>
 800150c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800151c:	f7ff fa44 	bl	80009a8 <__aeabi_dcmpeq>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d119      	bne.n	800155a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff69 	bl	8000404 <__aeabi_i2d>
 8001532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001536:	f7ff f8f9 	bl	800072c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f005 fc19 	bl	8006d78 <atan>
 8001546:	a358      	add	r3, pc, #352	; (adr r3, 80016a8 <MPU6050_Read_All+0x388>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe ffc4 	bl	80004d8 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001558:	e005      	b.n	8001566 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	425b      	negs	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff48 	bl	8000404 <__aeabi_i2d>
 8001574:	4682      	mov	sl, r0
 8001576:	468b      	mov	fp, r1
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff40 	bl	8000404 <__aeabi_i2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4650      	mov	r0, sl
 800158a:	4659      	mov	r1, fp
 800158c:	f005 fd81 	bl	8007092 <atan2>
 8001590:	a345      	add	r3, pc, #276	; (adr r3, 80016a8 <MPU6050_Read_All+0x388>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe ff9f 	bl	80004d8 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <MPU6050_Read_All+0x3a4>)
 80015a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015ac:	f7ff fa06 	bl	80009bc <__aeabi_dcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00a      	beq.n	80015cc <MPU6050_Read_All+0x2ac>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <MPU6050_Read_All+0x3a8>)
 80015c2:	f7ff fa19 	bl	80009f8 <__aeabi_dcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d114      	bne.n	80015f6 <MPU6050_Read_All+0x2d6>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <MPU6050_Read_All+0x3a8>)
 80015d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015d6:	f7ff fa0f 	bl	80009f8 <__aeabi_dcmpgt>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <MPU6050_Read_All+0x2ec>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <MPU6050_Read_All+0x3a4>)
 80015ec:	f7ff f9e6 	bl	80009bc <__aeabi_dcmplt>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00a      	beq.n	800160c <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80015f6:	4935      	ldr	r1, [pc, #212]	; (80016cc <MPU6050_Read_All+0x3ac>)
 80015f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001606:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800160a:	e012      	b.n	8001632 <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001612:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800161a:	e9cd 2300 	strd	r2, r3, [sp]
 800161e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001622:	482a      	ldr	r0, [pc, #168]	; (80016cc <MPU6050_Read_All+0x3ac>)
 8001624:	f000 f856 	bl	80016d4 <Kalman_getAngle>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001638:	4690      	mov	r8, r2
 800163a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MPU6050_Read_All+0x3a8>)
 8001644:	4640      	mov	r0, r8
 8001646:	4649      	mov	r1, r9
 8001648:	f7ff f9d6 	bl	80009f8 <__aeabi_dcmpgt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001658:	4614      	mov	r4, r2
 800165a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800166a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800166e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001672:	e9cd 2300 	strd	r2, r3, [sp]
 8001676:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <MPU6050_Read_All+0x3b0>)
 800167c:	f000 f82a 	bl	80016d4 <Kalman_getAngle>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	6839      	ldr	r1, [r7, #0]
 8001686:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800168a:	bf00      	nop
 800168c:	3740      	adds	r7, #64	; 0x40
 800168e:	46bd      	mov	sp, r7
 8001690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	00000000 	.word	0x00000000
 800169c:	40cc2900 	.word	0x40cc2900
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40606000 	.word	0x40606000
 80016a8:	1a63c1f8 	.word	0x1a63c1f8
 80016ac:	404ca5dc 	.word	0x404ca5dc
 80016b0:	40d00000 	.word	0x40d00000
 80016b4:	43aa0000 	.word	0x43aa0000
 80016b8:	42121eb8 	.word	0x42121eb8
 80016bc:	200005c0 	.word	0x200005c0
 80016c0:	408f4000 	.word	0x408f4000
 80016c4:	c0568000 	.word	0xc0568000
 80016c8:	40568000 	.word	0x40568000
 80016cc:	20000048 	.word	0x20000048
 80016d0:	20000000 	.word	0x20000000

080016d4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b092      	sub	sp, #72	; 0x48
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80016ea:	f7fe fd3d 	bl	8000168 <__aeabi_dsub>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80016fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001700:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001704:	f7fe fee8 	bl	80004d8 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fd2c 	bl	800016c <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800172a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800172e:	f7fe fed3 	bl	80004d8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001740:	f7fe fd12 	bl	8000168 <__aeabi_dsub>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001752:	f7fe fd09 	bl	8000168 <__aeabi_dsub>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe fd02 	bl	800016c <__adddf3>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001774:	f7fe feb0 	bl	80004d8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fcf4 	bl	800016c <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	68f9      	ldr	r1, [r7, #12]
 800178a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800179a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800179e:	f7fe fe9b 	bl	80004d8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe fcdd 	bl	8000168 <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	68f9      	ldr	r1, [r7, #12]
 80017b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80017c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017c8:	f7fe fe86 	bl	80004d8 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7fe fcc8 	bl	8000168 <__aeabi_dsub>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017f2:	f7fe fe71 	bl	80004d8 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fcb5 	bl	800016c <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001818:	f7fe fca8 	bl	800016c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800182a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800182e:	f7fe ff7d 	bl	800072c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001844:	f7fe ff72 	bl	800072c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185a:	f7fe fc85 	bl	8000168 <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800186c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001874:	f7fe fe30 	bl	80004d8 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fc74 	bl	800016c <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	68f9      	ldr	r1, [r7, #12]
 800188a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001894:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001898:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800189c:	f7fe fe1c 	bl	80004d8 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fc60 	bl	800016c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80018c6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80018d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018d8:	f7fe fdfe 	bl	80004d8 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4620      	mov	r0, r4
 80018e2:	4629      	mov	r1, r5
 80018e4:	f7fe fc40 	bl	8000168 <__aeabi_dsub>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80018f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001900:	f7fe fdea 	bl	80004d8 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fc2c 	bl	8000168 <__aeabi_dsub>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	68f9      	ldr	r1, [r7, #12]
 8001916:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001920:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001928:	f7fe fdd6 	bl	80004d8 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fc18 	bl	8000168 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001948:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800194c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001950:	f7fe fdc2 	bl	80004d8 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fc04 	bl	8000168 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	3748      	adds	r7, #72	; 0x48
 8001976:	46bd      	mov	sp, r7
 8001978:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_MspInit+0x5c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_MspInit+0x60>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_MspInit+0x60>)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000

080019e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_I2C_MspInit+0x70>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d123      	bne.n	8001a48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a18:	23c0      	movs	r3, #192	; 0xc0
 8001a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <HAL_I2C_MspInit+0x78>)
 8001a2c:	f000 fae0 	bl	8001ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3a:	61d3      	str	r3, [r2, #28]
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010c00 	.word	0x40010c00

08001a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <HAL_UART_MspInit+0x8c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d131      	bne.n	8001ae0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_UART_MspInit+0x90>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <HAL_UART_MspInit+0x90>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0x90>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0x90>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <HAL_UART_MspInit+0x90>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_UART_MspInit+0x90>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <HAL_UART_MspInit+0x94>)
 8001ac2:	f000 fa95 	bl	8001ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_UART_MspInit+0x94>)
 8001adc:	f000 fa88 	bl	8001ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010800 	.word	0x40010800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3a:	f000 f935 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
	return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <_kill>:

int _kill(int pid, int sig)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b5a:	f002 fa05 	bl	8003f68 <__errno>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2216      	movs	r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
	return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_exit>:

void _exit (int status)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffe7 	bl	8001b50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b82:	e7fe      	b.n	8001b82 <_exit+0x12>

08001b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00a      	b.n	8001bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b96:	f3af 8000 	nop.w
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf0      	blt.n	8001b96 <_read+0x12>
	}

return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e009      	b.n	8001be4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf1      	blt.n	8001bd0 <_write+0x12>
	}
	return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_close>:

int _close(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1c:	605a      	str	r2, [r3, #4]
	return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_isatty>:

int _isatty(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
	return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f002 f96e 	bl	8003f68 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20005000 	.word	0x20005000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000484 	.word	0x20000484
 8001cc0:	200005d8 	.word	0x200005d8

08001cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff fff8 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cd6:	490c      	ldr	r1, [pc, #48]	; (8001d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cec:	4c09      	ldr	r4, [pc, #36]	; (8001d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f002 f93b 	bl	8003f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7ff f98b 	bl	8001018 <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8001d0c:	080078c0 	.word	0x080078c0
  ldr r2, =_sbss
 8001d10:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001d14:	200005d8 	.word	0x200005d8

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f92b 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fe20 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f935 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d84:	f000 f90b 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000090 	.word	0x20000090
 8001da0:	20000098 	.word	0x20000098
 8001da4:	20000094 	.word	0x20000094

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000098 	.word	0x20000098
 8001dc8:	200005c4 	.word	0x200005c4

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	200005c4 	.word	0x200005c4

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffe0 	bl	8001dcc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000098 	.word	0x20000098

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	; (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f68:	f7ff ff90 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff49 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff5e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff90 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5f 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffb0 	bl	8001f44 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002002:	e169      	b.n	80022d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002004:	2201      	movs	r2, #1
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8158 	bne.w	80022d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a9a      	ldr	r2, [pc, #616]	; (8002290 <HAL_GPIO_Init+0x2a0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d05e      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 800202c:	4a98      	ldr	r2, [pc, #608]	; (8002290 <HAL_GPIO_Init+0x2a0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d875      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002032:	4a98      	ldr	r2, [pc, #608]	; (8002294 <HAL_GPIO_Init+0x2a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d058      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002038:	4a96      	ldr	r2, [pc, #600]	; (8002294 <HAL_GPIO_Init+0x2a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d86f      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800203e:	4a96      	ldr	r2, [pc, #600]	; (8002298 <HAL_GPIO_Init+0x2a8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d052      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002044:	4a94      	ldr	r2, [pc, #592]	; (8002298 <HAL_GPIO_Init+0x2a8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d869      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800204a:	4a94      	ldr	r2, [pc, #592]	; (800229c <HAL_GPIO_Init+0x2ac>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04c      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002050:	4a92      	ldr	r2, [pc, #584]	; (800229c <HAL_GPIO_Init+0x2ac>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d863      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002056:	4a92      	ldr	r2, [pc, #584]	; (80022a0 <HAL_GPIO_Init+0x2b0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d046      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 800205c:	4a90      	ldr	r2, [pc, #576]	; (80022a0 <HAL_GPIO_Init+0x2b0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d85d      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002062:	2b12      	cmp	r3, #18
 8002064:	d82a      	bhi.n	80020bc <HAL_GPIO_Init+0xcc>
 8002066:	2b12      	cmp	r3, #18
 8002068:	d859      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800206a:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <HAL_GPIO_Init+0x80>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	080020eb 	.word	0x080020eb
 8002074:	080020c5 	.word	0x080020c5
 8002078:	080020d7 	.word	0x080020d7
 800207c:	08002119 	.word	0x08002119
 8002080:	0800211f 	.word	0x0800211f
 8002084:	0800211f 	.word	0x0800211f
 8002088:	0800211f 	.word	0x0800211f
 800208c:	0800211f 	.word	0x0800211f
 8002090:	0800211f 	.word	0x0800211f
 8002094:	0800211f 	.word	0x0800211f
 8002098:	0800211f 	.word	0x0800211f
 800209c:	0800211f 	.word	0x0800211f
 80020a0:	0800211f 	.word	0x0800211f
 80020a4:	0800211f 	.word	0x0800211f
 80020a8:	0800211f 	.word	0x0800211f
 80020ac:	0800211f 	.word	0x0800211f
 80020b0:	0800211f 	.word	0x0800211f
 80020b4:	080020cd 	.word	0x080020cd
 80020b8:	080020e1 	.word	0x080020e1
 80020bc:	4a79      	ldr	r2, [pc, #484]	; (80022a4 <HAL_GPIO_Init+0x2b4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020c2:	e02c      	b.n	800211e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e029      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	3304      	adds	r3, #4
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e024      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	3308      	adds	r3, #8
 80020dc:	623b      	str	r3, [r7, #32]
          break;
 80020de:	e01f      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	330c      	adds	r3, #12
 80020e6:	623b      	str	r3, [r7, #32]
          break;
 80020e8:	e01a      	b.n	8002120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020f2:	2304      	movs	r3, #4
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e013      	b.n	8002120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	611a      	str	r2, [r3, #16]
          break;
 800210a:	e009      	b.n	8002120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800210c:	2308      	movs	r3, #8
 800210e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	615a      	str	r2, [r3, #20]
          break;
 8002116:	e003      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e000      	b.n	8002120 <HAL_GPIO_Init+0x130>
          break;
 800211e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2bff      	cmp	r3, #255	; 0xff
 8002124:	d801      	bhi.n	800212a <HAL_GPIO_Init+0x13a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	e001      	b.n	800212e <HAL_GPIO_Init+0x13e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2bff      	cmp	r3, #255	; 0xff
 8002134:	d802      	bhi.n	800213c <HAL_GPIO_Init+0x14c>
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x152>
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	3b08      	subs	r3, #8
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	210f      	movs	r1, #15
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80b1 	beq.w	80022d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002170:	4b4d      	ldr	r3, [pc, #308]	; (80022a8 <HAL_GPIO_Init+0x2b8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <HAL_GPIO_Init+0x2b8>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_GPIO_Init+0x2b8>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002188:	4a48      	ldr	r2, [pc, #288]	; (80022ac <HAL_GPIO_Init+0x2bc>)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_GPIO_Init+0x2c0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_GPIO_Init+0x1ec>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <HAL_GPIO_Init+0x2c4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00d      	beq.n	80021d8 <HAL_GPIO_Init+0x1e8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3e      	ldr	r2, [pc, #248]	; (80022b8 <HAL_GPIO_Init+0x2c8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3d      	ldr	r2, [pc, #244]	; (80022bc <HAL_GPIO_Init+0x2cc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_GPIO_Init+0x1e0>
 80021cc:	2303      	movs	r3, #3
 80021ce:	e006      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e004      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021dc:	2300      	movs	r3, #0
 80021de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ee:	492f      	ldr	r1, [pc, #188]	; (80022ac <HAL_GPIO_Init+0x2bc>)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	492c      	ldr	r1, [pc, #176]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	4928      	ldr	r1, [pc, #160]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002220:	4013      	ands	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4922      	ldr	r1, [pc, #136]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	491e      	ldr	r1, [pc, #120]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002248:	4013      	ands	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4918      	ldr	r1, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	4914      	ldr	r1, [pc, #80]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002270:	4013      	ands	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d021      	beq.n	80022c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e021      	b.n	80022d2 <HAL_GPIO_Init+0x2e2>
 800228e:	bf00      	nop
 8002290:	10320000 	.word	0x10320000
 8002294:	10310000 	.word	0x10310000
 8002298:	10220000 	.word	0x10220000
 800229c:	10210000 	.word	0x10210000
 80022a0:	10120000 	.word	0x10120000
 80022a4:	10110000 	.word	0x10110000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40011400 	.word	0x40011400
 80022c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_GPIO_Init+0x304>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4909      	ldr	r1, [pc, #36]	; (80022f4 <HAL_GPIO_Init+0x304>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f47f ae8e 	bne.w	8002004 <HAL_GPIO_Init+0x14>
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	372c      	adds	r7, #44	; 0x2c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e12b      	b.n	8002562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fb5e 	bl	80019e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800234a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800235a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800235c:	f001 fbee 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a81      	ldr	r2, [pc, #516]	; (800256c <HAL_I2C_Init+0x274>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d807      	bhi.n	800237c <HAL_I2C_Init+0x84>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_I2C_Init+0x278>)
 8002370:	4293      	cmp	r3, r2
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e006      	b.n	800238a <HAL_I2C_Init+0x92>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a7d      	ldr	r2, [pc, #500]	; (8002574 <HAL_I2C_Init+0x27c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0e7      	b.n	8002562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a78      	ldr	r2, [pc, #480]	; (8002578 <HAL_I2C_Init+0x280>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0c9b      	lsrs	r3, r3, #18
 800239c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_I2C_Init+0x274>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d802      	bhi.n	80023cc <HAL_I2C_Init+0xd4>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	e009      	b.n	80023e0 <HAL_I2C_Init+0xe8>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_I2C_Init+0x284>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	3301      	adds	r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	495c      	ldr	r1, [pc, #368]	; (800256c <HAL_I2C_Init+0x274>)
 80023fc:	428b      	cmp	r3, r1
 80023fe:	d819      	bhi.n	8002434 <HAL_I2C_Init+0x13c>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e59      	subs	r1, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fbb1 f3f3 	udiv	r3, r1, r3
 800240e:	1c59      	adds	r1, r3, #1
 8002410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002414:	400b      	ands	r3, r1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_I2C_Init+0x138>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e59      	subs	r1, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fbb1 f3f3 	udiv	r3, r1, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242e:	e051      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 8002430:	2304      	movs	r3, #4
 8002432:	e04f      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d111      	bne.n	8002460 <HAL_I2C_Init+0x168>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1e58      	subs	r0, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e012      	b.n	8002486 <HAL_I2C_Init+0x18e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	0099      	lsls	r1, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	fbb0 f3f3 	udiv	r3, r0, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Init+0x196>
 800248a:	2301      	movs	r3, #1
 800248c:	e022      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <HAL_I2C_Init+0x1bc>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e58      	subs	r0, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	440b      	add	r3, r1
 80024a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b2:	e00f      	b.n	80024d4 <HAL_I2C_Init+0x1dc>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	0099      	lsls	r1, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	6809      	ldr	r1, [r1, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6911      	ldr	r1, [r2, #16]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	000186a0 	.word	0x000186a0
 8002570:	001e847f 	.word	0x001e847f
 8002574:	003d08ff 	.word	0x003d08ff
 8002578:	431bde83 	.word	0x431bde83
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	460b      	mov	r3, r1
 8002594:	813b      	strh	r3, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7ff fc17 	bl	8001dcc <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	f040 80d9 	bne.w	8002760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2319      	movs	r3, #25
 80025b4:	2201      	movs	r2, #1
 80025b6:	496d      	ldr	r1, [pc, #436]	; (800276c <HAL_I2C_Mem_Write+0x1ec>)
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fcc1 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0cc      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Mem_Write+0x56>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0c5      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d007      	beq.n	80025fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2221      	movs	r2, #33	; 0x21
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2240      	movs	r2, #64	; 0x40
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a3a      	ldr	r2, [r7, #32]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <HAL_I2C_Mem_Write+0x1f0>)
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800263e:	88f8      	ldrh	r0, [r7, #6]
 8002640:	893a      	ldrh	r2, [r7, #8]
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 faf8 	bl	8002c44 <I2C_RequestMemoryWrite>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d052      	beq.n	8002700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e081      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fd86 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b04      	cmp	r3, #4
 8002674:	d107      	bne.n	8002686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d11b      	bne.n	8002700 <HAL_I2C_Mem_Write+0x180>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d017      	beq.n	8002700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1aa      	bne.n	800265e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fd79 	bl	8003204 <I2C_WaitOnBTFFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b04      	cmp	r3, #4
 800271e:	d107      	bne.n	8002730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e016      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	00100002 	.word	0x00100002
 8002770:	ffff0000 	.word	0xffff0000

08002774 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	; 0x30
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	817b      	strh	r3, [r7, #10]
 8002786:	460b      	mov	r3, r1
 8002788:	813b      	strh	r3, [r7, #8]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7ff fb1b 	bl	8001dcc <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	f040 8244 	bne.w	8002c2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2319      	movs	r3, #25
 80027ac:	2201      	movs	r2, #1
 80027ae:	4982      	ldr	r1, [pc, #520]	; (80029b8 <HAL_I2C_Mem_Read+0x244>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fbc5 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	e237      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Mem_Read+0x5a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e230      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d007      	beq.n	80027f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2222      	movs	r2, #34	; 0x22
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a62      	ldr	r2, [pc, #392]	; (80029bc <HAL_I2C_Mem_Read+0x248>)
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4603      	mov	r3, r0
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa92 	bl	8002d70 <I2C_RequestMemoryRead>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1ec      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d113      	bne.n	8002886 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e1c0      	b.n	8002c08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b01      	cmp	r3, #1
 800288c:	d11e      	bne.n	80028cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800289e:	b672      	cpsid	i
}
 80028a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028c8:	b662      	cpsie	i
}
 80028ca:	e035      	b.n	8002938 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d11e      	bne.n	8002912 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028e4:	b672      	cpsid	i
}
 80028e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800290e:	b662      	cpsie	i
}
 8002910:	e012      	b.n	8002938 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002920:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002938:	e166      	b.n	8002c08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	2b03      	cmp	r3, #3
 8002940:	f200 811f 	bhi.w	8002b82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b01      	cmp	r3, #1
 800294a:	d123      	bne.n	8002994 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fc9f 	bl	8003294 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e167      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002992:	e139      	b.n	8002c08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	2b02      	cmp	r3, #2
 800299a:	d152      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	2200      	movs	r2, #0
 80029a4:	4906      	ldr	r1, [pc, #24]	; (80029c0 <HAL_I2C_Mem_Read+0x24c>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 faca 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e13c      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
 80029b6:	bf00      	nop
 80029b8:	00100002 	.word	0x00100002
 80029bc:	ffff0000 	.word	0xffff0000
 80029c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029c4:	b672      	cpsid	i
}
 80029c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a0a:	b662      	cpsie	i
}
 8002a0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a40:	e0e2      	b.n	8002c08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	2200      	movs	r2, #0
 8002a4a:	497b      	ldr	r1, [pc, #492]	; (8002c38 <HAL_I2C_Mem_Read+0x4c4>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fa77 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0e9      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aa2:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_I2C_Mem_Read+0x4c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <HAL_I2C_Mem_Read+0x4cc>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0a1a      	lsrs	r2, r3, #8
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00da      	lsls	r2, r3, #3
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d118      	bne.n	8002afa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002aea:	b662      	cpsie	i
}
 8002aec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e09a      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d1d9      	bne.n	8002abc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b4a:	b662      	cpsie	i
}
 8002b4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b80:	e042      	b.n	8002c08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fb84 	bl	8003294 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e04c      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d118      	bne.n	8002c08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f ae94 	bne.w	800293a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e000      	b.n	8002c30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	00010004 	.word	0x00010004
 8002c3c:	20000090 	.word	0x20000090
 8002c40:	14f8b589 	.word	0x14f8b589

08002c44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	460b      	mov	r3, r1
 8002c58:	813b      	strh	r3, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f960 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	d103      	bne.n	8002c9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e05f      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	492d      	ldr	r1, [pc, #180]	; (8002d6c <I2C_RequestMemoryWrite+0x128>)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f9bb 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04c      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa46 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d107      	bne.n	8002d06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02b      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e021      	b.n	8002d60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa20 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e005      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d56:	893b      	ldrh	r3, [r7, #8]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	00010002 	.word	0x00010002

08002d70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8c2 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd0:	d103      	bne.n	8002dda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0aa      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	4952      	ldr	r1, [pc, #328]	; (8002f3c <I2C_RequestMemoryRead+0x1cc>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f91d 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e097      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f9a8 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e076      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	e021      	b.n	8002e9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f982 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e050      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e92:	893b      	ldrh	r3, [r7, #8]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9e:	6a39      	ldr	r1, [r7, #32]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f967 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d107      	bne.n	8002ec4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e035      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f82b 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efe:	d103      	bne.n	8002f08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e013      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	4906      	ldr	r1, [pc, #24]	; (8002f3c <I2C_RequestMemoryRead+0x1cc>)
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f886 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	00010002 	.word	0x00010002

08002f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f50:	e048      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f58:	d044      	beq.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe ff37 	bl	8001dcc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d139      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	e00c      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d116      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e023      	b.n	800302c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	e00c      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d093      	beq.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003042:	e071      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d123      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800306c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e067      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a2:	d041      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fe fe92 	bl	8001dcc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d136      	bne.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e021      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10c      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e00b      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af6d 	bne.w	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	e034      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8e3 	bl	800334e <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e034      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003198:	d028      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fe17 	bl	8001dcc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d1c3      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003210:	e034      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f89b 	bl	800334e <I2C_IsAcknowledgeFailed>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e034      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003228:	d028      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe fdcf 	bl	8001dcc <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11d      	bne.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d016      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e007      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d1c3      	bne.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a0:	e049      	b.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d119      	bne.n	80032e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0210 	mvn.w	r2, #16
 80032b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e030      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fd72 	bl	8001dcc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11d      	bne.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d016      	beq.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e007      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d1ae      	bne.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003364:	d11b      	bne.n	800339e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800336e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e26c      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8087 	beq.w	80034da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033cc:	4b92      	ldr	r3, [pc, #584]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d00c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d8:	4b8f      	ldr	r3, [pc, #572]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d112      	bne.n	800340a <HAL_RCC_OscConfig+0x5e>
 80033e4:	4b8c      	ldr	r3, [pc, #560]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d10b      	bne.n	800340a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	4b89      	ldr	r3, [pc, #548]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d06c      	beq.n	80034d8 <HAL_RCC_OscConfig+0x12c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d168      	bne.n	80034d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e246      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x76>
 8003414:	4b80      	ldr	r3, [pc, #512]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a7f      	ldr	r2, [pc, #508]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e02e      	b.n	8003480 <HAL_RCC_OscConfig+0xd4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x98>
 800342a:	4b7b      	ldr	r3, [pc, #492]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7a      	ldr	r2, [pc, #488]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b78      	ldr	r3, [pc, #480]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a77      	ldr	r2, [pc, #476]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800343c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xd4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0xbc>
 800344e:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a71      	ldr	r2, [pc, #452]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6e      	ldr	r2, [pc, #440]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xd4>
 8003468:	4b6b      	ldr	r3, [pc, #428]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6a      	ldr	r2, [pc, #424]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a67      	ldr	r2, [pc, #412]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fca0 	bl	8001dcc <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fc9c 	bl	8001dcc <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1fa      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5d      	ldr	r3, [pc, #372]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xe4>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fc8c 	bl	8001dcc <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe fc88 	bl	8001dcc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1e6      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x10c>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e6:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034f2:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x18c>
 80034fe:	4b46      	ldr	r3, [pc, #280]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x176>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1ba      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4939      	ldr	r1, [pc, #228]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_RCC_OscConfig+0x270>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fc41 	bl	8001dcc <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354e:	f7fe fc3d 	bl	8001dcc <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e19b      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4927      	ldr	r1, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_RCC_OscConfig+0x270>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe fc20 	bl	8001dcc <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003590:	f7fe fc1c 	bl	8001dcc <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e17a      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03a      	beq.n	8003630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d019      	beq.n	80035f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b17      	ldr	r3, [pc, #92]	; (8003620 <HAL_RCC_OscConfig+0x274>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c8:	f7fe fc00 	bl	8001dcc <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fe fbfc 	bl	8001dcc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e15a      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ee:	2001      	movs	r0, #1
 80035f0:	f000 facc 	bl	8003b8c <RCC_Delay>
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_RCC_OscConfig+0x274>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7fe fbe6 	bl	8001dcc <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003602:	e00f      	b.n	8003624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003604:	f7fe fbe2 	bl	8001dcc <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d908      	bls.n	8003624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e140      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	42420000 	.word	0x42420000
 8003620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	4b9e      	ldr	r3, [pc, #632]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e9      	bne.n	8003604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a6 	beq.w	800378a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b97      	ldr	r3, [pc, #604]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	4b94      	ldr	r3, [pc, #592]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a93      	ldr	r2, [pc, #588]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	61d3      	str	r3, [r2, #28]
 800365a:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b8e      	ldr	r3, [pc, #568]	; (80038a4 <HAL_RCC_OscConfig+0x4f8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003676:	4b8b      	ldr	r3, [pc, #556]	; (80038a4 <HAL_RCC_OscConfig+0x4f8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a8a      	ldr	r2, [pc, #552]	; (80038a4 <HAL_RCC_OscConfig+0x4f8>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe fba3 	bl	8001dcc <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fe fb9f 	bl	8001dcc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0fd      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4b81      	ldr	r3, [pc, #516]	; (80038a4 <HAL_RCC_OscConfig+0x4f8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x312>
 80036b0:	4b7b      	ldr	r3, [pc, #492]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4a7a      	ldr	r2, [pc, #488]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6213      	str	r3, [r2, #32]
 80036bc:	e02d      	b.n	800371a <HAL_RCC_OscConfig+0x36e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x334>
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a75      	ldr	r2, [pc, #468]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6213      	str	r3, [r2, #32]
 80036d2:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a72      	ldr	r2, [pc, #456]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036d8:	f023 0304 	bic.w	r3, r3, #4
 80036dc:	6213      	str	r3, [r2, #32]
 80036de:	e01c      	b.n	800371a <HAL_RCC_OscConfig+0x36e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d10c      	bne.n	8003702 <HAL_RCC_OscConfig+0x356>
 80036e8:	4b6d      	ldr	r3, [pc, #436]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4a6c      	ldr	r2, [pc, #432]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	e00b      	b.n	800371a <HAL_RCC_OscConfig+0x36e>
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4a66      	ldr	r2, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6213      	str	r3, [r2, #32]
 800370e:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4a63      	ldr	r2, [pc, #396]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d015      	beq.n	800374e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003722:	f7fe fb53 	bl	8001dcc <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fe fb4f 	bl	8001dcc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0ab      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ee      	beq.n	800372a <HAL_RCC_OscConfig+0x37e>
 800374c:	e014      	b.n	8003778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe fb3d 	bl	8001dcc <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fe fb39 	bl	8001dcc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e095      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ee      	bne.n	8003756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b48      	ldr	r3, [pc, #288]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4a47      	ldr	r2, [pc, #284]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8081 	beq.w	8003896 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003794:	4b42      	ldr	r3, [pc, #264]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b08      	cmp	r3, #8
 800379e:	d061      	beq.n	8003864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d146      	bne.n	8003836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_OscConfig+0x4fc>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe fb0d 	bl	8001dcc <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fe fb09 	bl	8001dcc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e067      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c8:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f0      	bne.n	80037b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d108      	bne.n	80037f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037de:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	492d      	ldr	r1, [pc, #180]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f0:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a19      	ldr	r1, [r3, #32]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	430b      	orrs	r3, r1
 8003802:	4927      	ldr	r1, [pc, #156]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <HAL_RCC_OscConfig+0x4fc>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe fadd 	bl	8001dcc <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe fad9 	bl	8001dcc <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e037      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x46a>
 8003834:	e02f      	b.n	8003896 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_RCC_OscConfig+0x4fc>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe fac6 	bl	8001dcc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fac2 	bl	8001dcc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e020      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x498>
 8003862:	e018      	b.n	8003896 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e013      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x4f4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	429a      	cmp	r2, r3
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42420060 	.word	0x42420060

080038ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0d0      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d910      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b67      	ldr	r3, [pc, #412]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4965      	ldr	r1, [pc, #404]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b8      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800390e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003920:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800392a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	494d      	ldr	r1, [pc, #308]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d040      	beq.n	80039cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d115      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e073      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	4b3d      	ldr	r3, [pc, #244]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06b      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4936      	ldr	r1, [pc, #216]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800399c:	f7fe fa16 	bl	8001dcc <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fe fa12 	bl	8001dcc <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e053      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d210      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4922      	ldr	r1, [pc, #136]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e032      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4916      	ldr	r1, [pc, #88]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	490e      	ldr	r1, [pc, #56]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a3a:	f000 f821 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	490a      	ldr	r1, [pc, #40]	; (8003a74 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1cc>)
 8003a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_ClockConfig+0x1d0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe f974 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40022000 	.word	0x40022000
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08007434 	.word	0x08007434
 8003a78:	20000090 	.word	0x20000090
 8003a7c:	20000094 	.word	0x20000094

08003a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d002      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8003aae:	e027      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ab2:	613b      	str	r3, [r7, #16]
      break;
 8003ab4:	e027      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	0c9b      	lsrs	r3, r3, #18
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ac0:	5cd3      	ldrb	r3, [r2, r3]
 8003ac2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d010      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	0c5b      	lsrs	r3, r3, #17
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ae2:	fb02 f203 	mul.w	r2, r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e004      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	613b      	str	r3, [r7, #16]
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b02:	613b      	str	r3, [r7, #16]
      break;
 8003b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b06:	693b      	ldr	r3, [r7, #16]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	007a1200 	.word	0x007a1200
 8003b1c:	0800744c 	.word	0x0800744c
 8003b20:	0800745c 	.word	0x0800745c
 8003b24:	003d0900 	.word	0x003d0900

08003b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b2c:	4b02      	ldr	r3, [pc, #8]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	20000090 	.word	0x20000090

08003b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b40:	f7ff fff2 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4903      	ldr	r1, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08007444 	.word	0x08007444

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b68:	f7ff ffde 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0adb      	lsrs	r3, r3, #11
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08007444 	.word	0x08007444

08003b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <RCC_Delay+0x34>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <RCC_Delay+0x38>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0a5b      	lsrs	r3, r3, #9
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba8:	bf00      	nop
  }
  while (Delay --);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <RCC_Delay+0x1c>
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	20000090 	.word	0x20000090
 8003bc4:	10624dd3 	.word	0x10624dd3

08003bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e042      	b.n	8003c60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fd ff34 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2224      	movs	r2, #36	; 0x24
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f91d 	bl	8003e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d16d      	bne.n	8003d64 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_UART_Transmit+0x2c>
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e066      	b.n	8003d66 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2221      	movs	r2, #33	; 0x21
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ca6:	f7fe f891 	bl	8001dcc <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	88fa      	ldrh	r2, [r7, #6]
 8003cb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d108      	bne.n	8003cd4 <HAL_UART_Transmit+0x6c>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	e003      	b.n	8003cdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cdc:	e02a      	b.n	8003d34 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f840 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e036      	b.n	8003d66 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3302      	adds	r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e007      	b.n	8003d26 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cf      	bne.n	8003cde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f810 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e006      	b.n	8003d66 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b090      	sub	sp, #64	; 0x40
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7e:	e050      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d86:	d04c      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d8e:	f7fe f81d 	bl	8001dcc <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d241      	bcs.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dbe:	637a      	str	r2, [r7, #52]	; 0x34
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	613b      	str	r3, [r7, #16]
   return(result);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df2:	623a      	str	r2, [r7, #32]
 8003df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	69f9      	ldr	r1, [r7, #28]
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e5      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00f      	b.n	8003e42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d09f      	beq.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3740      	adds	r7, #64	; 0x40
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e86:	f023 030c 	bic.w	r3, r3, #12
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <UART_SetConfig+0x114>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d103      	bne.n	8003ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eb4:	f7ff fe56 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	e002      	b.n	8003ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7ff fe3e 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8003ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009a      	lsls	r2, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed8:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <UART_SetConfig+0x118>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	0119      	lsls	r1, r3, #4
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009a      	lsls	r2, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef8:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <UART_SetConfig+0x118>)
 8003efa:	fba3 0302 	umull	r0, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2064      	movs	r0, #100	; 0x64
 8003f02:	fb00 f303 	mul.w	r3, r0, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <UART_SetConfig+0x118>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f18:	4419      	add	r1, r3
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009a      	lsls	r2, r3, #2
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <UART_SetConfig+0x118>)
 8003f32:	fba3 0302 	umull	r0, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2064      	movs	r0, #100	; 0x64
 8003f3a:	fb00 f303 	mul.w	r3, r0, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	3332      	adds	r3, #50	; 0x32
 8003f44:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <UART_SetConfig+0x118>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	f003 020f 	and.w	r2, r3, #15
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	440a      	add	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40013800 	.word	0x40013800
 8003f64:	51eb851f 	.word	0x51eb851f

08003f68 <__errno>:
 8003f68:	4b01      	ldr	r3, [pc, #4]	; (8003f70 <__errno+0x8>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	2000009c 	.word	0x2000009c

08003f74 <__libc_init_array>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	2600      	movs	r6, #0
 8003f78:	4d0c      	ldr	r5, [pc, #48]	; (8003fac <__libc_init_array+0x38>)
 8003f7a:	4c0d      	ldr	r4, [pc, #52]	; (8003fb0 <__libc_init_array+0x3c>)
 8003f7c:	1b64      	subs	r4, r4, r5
 8003f7e:	10a4      	asrs	r4, r4, #2
 8003f80:	42a6      	cmp	r6, r4
 8003f82:	d109      	bne.n	8003f98 <__libc_init_array+0x24>
 8003f84:	f003 fa32 	bl	80073ec <_init>
 8003f88:	2600      	movs	r6, #0
 8003f8a:	4d0a      	ldr	r5, [pc, #40]	; (8003fb4 <__libc_init_array+0x40>)
 8003f8c:	4c0a      	ldr	r4, [pc, #40]	; (8003fb8 <__libc_init_array+0x44>)
 8003f8e:	1b64      	subs	r4, r4, r5
 8003f90:	10a4      	asrs	r4, r4, #2
 8003f92:	42a6      	cmp	r6, r4
 8003f94:	d105      	bne.n	8003fa2 <__libc_init_array+0x2e>
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9c:	4798      	blx	r3
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7ee      	b.n	8003f80 <__libc_init_array+0xc>
 8003fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa6:	4798      	blx	r3
 8003fa8:	3601      	adds	r6, #1
 8003faa:	e7f2      	b.n	8003f92 <__libc_init_array+0x1e>
 8003fac:	080078b8 	.word	0x080078b8
 8003fb0:	080078b8 	.word	0x080078b8
 8003fb4:	080078b8 	.word	0x080078b8
 8003fb8:	080078bc 	.word	0x080078bc

08003fbc <memset>:
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4402      	add	r2, r0
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d100      	bne.n	8003fc6 <memset+0xa>
 8003fc4:	4770      	bx	lr
 8003fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fca:	e7f9      	b.n	8003fc0 <memset+0x4>

08003fcc <__cvt>:
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd2:	461f      	mov	r7, r3
 8003fd4:	bfbb      	ittet	lt
 8003fd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003fda:	461f      	movlt	r7, r3
 8003fdc:	2300      	movge	r3, #0
 8003fde:	232d      	movlt	r3, #45	; 0x2d
 8003fe0:	b088      	sub	sp, #32
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fe6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003fe8:	7013      	strb	r3, [r2, #0]
 8003fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003fec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003ff0:	f023 0820 	bic.w	r8, r3, #32
 8003ff4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ff8:	d005      	beq.n	8004006 <__cvt+0x3a>
 8003ffa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ffe:	d100      	bne.n	8004002 <__cvt+0x36>
 8004000:	3501      	adds	r5, #1
 8004002:	2302      	movs	r3, #2
 8004004:	e000      	b.n	8004008 <__cvt+0x3c>
 8004006:	2303      	movs	r3, #3
 8004008:	aa07      	add	r2, sp, #28
 800400a:	9204      	str	r2, [sp, #16]
 800400c:	aa06      	add	r2, sp, #24
 800400e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004012:	e9cd 3500 	strd	r3, r5, [sp]
 8004016:	4622      	mov	r2, r4
 8004018:	463b      	mov	r3, r7
 800401a:	f000 fd21 	bl	8004a60 <_dtoa_r>
 800401e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004022:	4606      	mov	r6, r0
 8004024:	d102      	bne.n	800402c <__cvt+0x60>
 8004026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004028:	07db      	lsls	r3, r3, #31
 800402a:	d522      	bpl.n	8004072 <__cvt+0xa6>
 800402c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004030:	eb06 0905 	add.w	r9, r6, r5
 8004034:	d110      	bne.n	8004058 <__cvt+0x8c>
 8004036:	7833      	ldrb	r3, [r6, #0]
 8004038:	2b30      	cmp	r3, #48	; 0x30
 800403a:	d10a      	bne.n	8004052 <__cvt+0x86>
 800403c:	2200      	movs	r2, #0
 800403e:	2300      	movs	r3, #0
 8004040:	4620      	mov	r0, r4
 8004042:	4639      	mov	r1, r7
 8004044:	f7fc fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 8004048:	b918      	cbnz	r0, 8004052 <__cvt+0x86>
 800404a:	f1c5 0501 	rsb	r5, r5, #1
 800404e:	f8ca 5000 	str.w	r5, [sl]
 8004052:	f8da 3000 	ldr.w	r3, [sl]
 8004056:	4499      	add	r9, r3
 8004058:	2200      	movs	r2, #0
 800405a:	2300      	movs	r3, #0
 800405c:	4620      	mov	r0, r4
 800405e:	4639      	mov	r1, r7
 8004060:	f7fc fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8004064:	b108      	cbz	r0, 800406a <__cvt+0x9e>
 8004066:	f8cd 901c 	str.w	r9, [sp, #28]
 800406a:	2230      	movs	r2, #48	; 0x30
 800406c:	9b07      	ldr	r3, [sp, #28]
 800406e:	454b      	cmp	r3, r9
 8004070:	d307      	bcc.n	8004082 <__cvt+0xb6>
 8004072:	4630      	mov	r0, r6
 8004074:	9b07      	ldr	r3, [sp, #28]
 8004076:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004078:	1b9b      	subs	r3, r3, r6
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	b008      	add	sp, #32
 800407e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004082:	1c59      	adds	r1, r3, #1
 8004084:	9107      	str	r1, [sp, #28]
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e7f0      	b.n	800406c <__cvt+0xa0>

0800408a <__exponent>:
 800408a:	4603      	mov	r3, r0
 800408c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800408e:	2900      	cmp	r1, #0
 8004090:	f803 2b02 	strb.w	r2, [r3], #2
 8004094:	bfb6      	itet	lt
 8004096:	222d      	movlt	r2, #45	; 0x2d
 8004098:	222b      	movge	r2, #43	; 0x2b
 800409a:	4249      	neglt	r1, r1
 800409c:	2909      	cmp	r1, #9
 800409e:	7042      	strb	r2, [r0, #1]
 80040a0:	dd2b      	ble.n	80040fa <__exponent+0x70>
 80040a2:	f10d 0407 	add.w	r4, sp, #7
 80040a6:	46a4      	mov	ip, r4
 80040a8:	270a      	movs	r7, #10
 80040aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80040ae:	460a      	mov	r2, r1
 80040b0:	46a6      	mov	lr, r4
 80040b2:	fb07 1516 	mls	r5, r7, r6, r1
 80040b6:	2a63      	cmp	r2, #99	; 0x63
 80040b8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80040bc:	4631      	mov	r1, r6
 80040be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80040c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040c6:	dcf0      	bgt.n	80040aa <__exponent+0x20>
 80040c8:	3130      	adds	r1, #48	; 0x30
 80040ca:	f1ae 0502 	sub.w	r5, lr, #2
 80040ce:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040d2:	4629      	mov	r1, r5
 80040d4:	1c44      	adds	r4, r0, #1
 80040d6:	4561      	cmp	r1, ip
 80040d8:	d30a      	bcc.n	80040f0 <__exponent+0x66>
 80040da:	f10d 0209 	add.w	r2, sp, #9
 80040de:	eba2 020e 	sub.w	r2, r2, lr
 80040e2:	4565      	cmp	r5, ip
 80040e4:	bf88      	it	hi
 80040e6:	2200      	movhi	r2, #0
 80040e8:	4413      	add	r3, r2
 80040ea:	1a18      	subs	r0, r3, r0
 80040ec:	b003      	add	sp, #12
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040f4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040f8:	e7ed      	b.n	80040d6 <__exponent+0x4c>
 80040fa:	2330      	movs	r3, #48	; 0x30
 80040fc:	3130      	adds	r1, #48	; 0x30
 80040fe:	7083      	strb	r3, [r0, #2]
 8004100:	70c1      	strb	r1, [r0, #3]
 8004102:	1d03      	adds	r3, r0, #4
 8004104:	e7f1      	b.n	80040ea <__exponent+0x60>
	...

08004108 <_printf_float>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	b091      	sub	sp, #68	; 0x44
 800410e:	460c      	mov	r4, r1
 8004110:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004114:	4616      	mov	r6, r2
 8004116:	461f      	mov	r7, r3
 8004118:	4605      	mov	r5, r0
 800411a:	f001 fa8f 	bl	800563c <_localeconv_r>
 800411e:	6803      	ldr	r3, [r0, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	9309      	str	r3, [sp, #36]	; 0x24
 8004124:	f7fc f814 	bl	8000150 <strlen>
 8004128:	2300      	movs	r3, #0
 800412a:	930e      	str	r3, [sp, #56]	; 0x38
 800412c:	f8d8 3000 	ldr.w	r3, [r8]
 8004130:	900a      	str	r0, [sp, #40]	; 0x28
 8004132:	3307      	adds	r3, #7
 8004134:	f023 0307 	bic.w	r3, r3, #7
 8004138:	f103 0208 	add.w	r2, r3, #8
 800413c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004140:	f8d4 b000 	ldr.w	fp, [r4]
 8004144:	f8c8 2000 	str.w	r2, [r8]
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004150:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004154:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004158:	930b      	str	r3, [sp, #44]	; 0x2c
 800415a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800415e:	4640      	mov	r0, r8
 8004160:	4b9c      	ldr	r3, [pc, #624]	; (80043d4 <_printf_float+0x2cc>)
 8004162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004164:	f7fc fc52 	bl	8000a0c <__aeabi_dcmpun>
 8004168:	bb70      	cbnz	r0, 80041c8 <_printf_float+0xc0>
 800416a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800416e:	4640      	mov	r0, r8
 8004170:	4b98      	ldr	r3, [pc, #608]	; (80043d4 <_printf_float+0x2cc>)
 8004172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004174:	f7fc fc2c 	bl	80009d0 <__aeabi_dcmple>
 8004178:	bb30      	cbnz	r0, 80041c8 <_printf_float+0xc0>
 800417a:	2200      	movs	r2, #0
 800417c:	2300      	movs	r3, #0
 800417e:	4640      	mov	r0, r8
 8004180:	4651      	mov	r1, sl
 8004182:	f7fc fc1b 	bl	80009bc <__aeabi_dcmplt>
 8004186:	b110      	cbz	r0, 800418e <_printf_float+0x86>
 8004188:	232d      	movs	r3, #45	; 0x2d
 800418a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800418e:	4b92      	ldr	r3, [pc, #584]	; (80043d8 <_printf_float+0x2d0>)
 8004190:	4892      	ldr	r0, [pc, #584]	; (80043dc <_printf_float+0x2d4>)
 8004192:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004196:	bf94      	ite	ls
 8004198:	4698      	movls	r8, r3
 800419a:	4680      	movhi	r8, r0
 800419c:	2303      	movs	r3, #3
 800419e:	f04f 0a00 	mov.w	sl, #0
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	f02b 0304 	bic.w	r3, fp, #4
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	4633      	mov	r3, r6
 80041ac:	4621      	mov	r1, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	9700      	str	r7, [sp, #0]
 80041b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80041b4:	f000 f9d4 	bl	8004560 <_printf_common>
 80041b8:	3001      	adds	r0, #1
 80041ba:	f040 8090 	bne.w	80042de <_printf_float+0x1d6>
 80041be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c2:	b011      	add	sp, #68	; 0x44
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	4642      	mov	r2, r8
 80041ca:	4653      	mov	r3, sl
 80041cc:	4640      	mov	r0, r8
 80041ce:	4651      	mov	r1, sl
 80041d0:	f7fc fc1c 	bl	8000a0c <__aeabi_dcmpun>
 80041d4:	b148      	cbz	r0, 80041ea <_printf_float+0xe2>
 80041d6:	f1ba 0f00 	cmp.w	sl, #0
 80041da:	bfb8      	it	lt
 80041dc:	232d      	movlt	r3, #45	; 0x2d
 80041de:	4880      	ldr	r0, [pc, #512]	; (80043e0 <_printf_float+0x2d8>)
 80041e0:	bfb8      	it	lt
 80041e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041e6:	4b7f      	ldr	r3, [pc, #508]	; (80043e4 <_printf_float+0x2dc>)
 80041e8:	e7d3      	b.n	8004192 <_printf_float+0x8a>
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	d142      	bne.n	800427a <_printf_float+0x172>
 80041f4:	2306      	movs	r3, #6
 80041f6:	6063      	str	r3, [r4, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	9206      	str	r2, [sp, #24]
 80041fc:	aa0e      	add	r2, sp, #56	; 0x38
 80041fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004202:	aa0d      	add	r2, sp, #52	; 0x34
 8004204:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004208:	9203      	str	r2, [sp, #12]
 800420a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800420e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	6863      	ldr	r3, [r4, #4]
 8004216:	4642      	mov	r2, r8
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4628      	mov	r0, r5
 800421c:	4653      	mov	r3, sl
 800421e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004220:	f7ff fed4 	bl	8003fcc <__cvt>
 8004224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004226:	4680      	mov	r8, r0
 8004228:	2947      	cmp	r1, #71	; 0x47
 800422a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800422c:	d108      	bne.n	8004240 <_printf_float+0x138>
 800422e:	1cc8      	adds	r0, r1, #3
 8004230:	db02      	blt.n	8004238 <_printf_float+0x130>
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	4299      	cmp	r1, r3
 8004236:	dd40      	ble.n	80042ba <_printf_float+0x1b2>
 8004238:	f1a9 0902 	sub.w	r9, r9, #2
 800423c:	fa5f f989 	uxtb.w	r9, r9
 8004240:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004244:	d81f      	bhi.n	8004286 <_printf_float+0x17e>
 8004246:	464a      	mov	r2, r9
 8004248:	3901      	subs	r1, #1
 800424a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800424e:	910d      	str	r1, [sp, #52]	; 0x34
 8004250:	f7ff ff1b 	bl	800408a <__exponent>
 8004254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004256:	4682      	mov	sl, r0
 8004258:	1813      	adds	r3, r2, r0
 800425a:	2a01      	cmp	r2, #1
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	dc02      	bgt.n	8004266 <_printf_float+0x15e>
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	07d2      	lsls	r2, r2, #31
 8004264:	d501      	bpl.n	800426a <_printf_float+0x162>
 8004266:	3301      	adds	r3, #1
 8004268:	6123      	str	r3, [r4, #16]
 800426a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800426e:	2b00      	cmp	r3, #0
 8004270:	d09b      	beq.n	80041aa <_printf_float+0xa2>
 8004272:	232d      	movs	r3, #45	; 0x2d
 8004274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004278:	e797      	b.n	80041aa <_printf_float+0xa2>
 800427a:	2947      	cmp	r1, #71	; 0x47
 800427c:	d1bc      	bne.n	80041f8 <_printf_float+0xf0>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ba      	bne.n	80041f8 <_printf_float+0xf0>
 8004282:	2301      	movs	r3, #1
 8004284:	e7b7      	b.n	80041f6 <_printf_float+0xee>
 8004286:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800428a:	d118      	bne.n	80042be <_printf_float+0x1b6>
 800428c:	2900      	cmp	r1, #0
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	dd0b      	ble.n	80042aa <_printf_float+0x1a2>
 8004292:	6121      	str	r1, [r4, #16]
 8004294:	b913      	cbnz	r3, 800429c <_printf_float+0x194>
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	07d0      	lsls	r0, r2, #31
 800429a:	d502      	bpl.n	80042a2 <_printf_float+0x19a>
 800429c:	3301      	adds	r3, #1
 800429e:	440b      	add	r3, r1
 80042a0:	6123      	str	r3, [r4, #16]
 80042a2:	f04f 0a00 	mov.w	sl, #0
 80042a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80042a8:	e7df      	b.n	800426a <_printf_float+0x162>
 80042aa:	b913      	cbnz	r3, 80042b2 <_printf_float+0x1aa>
 80042ac:	6822      	ldr	r2, [r4, #0]
 80042ae:	07d2      	lsls	r2, r2, #31
 80042b0:	d501      	bpl.n	80042b6 <_printf_float+0x1ae>
 80042b2:	3302      	adds	r3, #2
 80042b4:	e7f4      	b.n	80042a0 <_printf_float+0x198>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e7f2      	b.n	80042a0 <_printf_float+0x198>
 80042ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042c0:	4299      	cmp	r1, r3
 80042c2:	db05      	blt.n	80042d0 <_printf_float+0x1c8>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	6121      	str	r1, [r4, #16]
 80042c8:	07d8      	lsls	r0, r3, #31
 80042ca:	d5ea      	bpl.n	80042a2 <_printf_float+0x19a>
 80042cc:	1c4b      	adds	r3, r1, #1
 80042ce:	e7e7      	b.n	80042a0 <_printf_float+0x198>
 80042d0:	2900      	cmp	r1, #0
 80042d2:	bfcc      	ite	gt
 80042d4:	2201      	movgt	r2, #1
 80042d6:	f1c1 0202 	rsble	r2, r1, #2
 80042da:	4413      	add	r3, r2
 80042dc:	e7e0      	b.n	80042a0 <_printf_float+0x198>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	055a      	lsls	r2, r3, #21
 80042e2:	d407      	bmi.n	80042f4 <_printf_float+0x1ec>
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	4642      	mov	r2, r8
 80042e8:	4631      	mov	r1, r6
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	d12b      	bne.n	800434a <_printf_float+0x242>
 80042f2:	e764      	b.n	80041be <_printf_float+0xb6>
 80042f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042f8:	f240 80dd 	bls.w	80044b6 <_printf_float+0x3ae>
 80042fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004300:	2200      	movs	r2, #0
 8004302:	2300      	movs	r3, #0
 8004304:	f7fc fb50 	bl	80009a8 <__aeabi_dcmpeq>
 8004308:	2800      	cmp	r0, #0
 800430a:	d033      	beq.n	8004374 <_printf_float+0x26c>
 800430c:	2301      	movs	r3, #1
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	4a35      	ldr	r2, [pc, #212]	; (80043e8 <_printf_float+0x2e0>)
 8004314:	47b8      	blx	r7
 8004316:	3001      	adds	r0, #1
 8004318:	f43f af51 	beq.w	80041be <_printf_float+0xb6>
 800431c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004320:	429a      	cmp	r2, r3
 8004322:	db02      	blt.n	800432a <_printf_float+0x222>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	07d8      	lsls	r0, r3, #31
 8004328:	d50f      	bpl.n	800434a <_printf_float+0x242>
 800432a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	47b8      	blx	r7
 8004334:	3001      	adds	r0, #1
 8004336:	f43f af42 	beq.w	80041be <_printf_float+0xb6>
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	f104 091a 	add.w	r9, r4, #26
 8004342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004344:	3b01      	subs	r3, #1
 8004346:	4543      	cmp	r3, r8
 8004348:	dc09      	bgt.n	800435e <_printf_float+0x256>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	079b      	lsls	r3, r3, #30
 800434e:	f100 8102 	bmi.w	8004556 <_printf_float+0x44e>
 8004352:	68e0      	ldr	r0, [r4, #12]
 8004354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004356:	4298      	cmp	r0, r3
 8004358:	bfb8      	it	lt
 800435a:	4618      	movlt	r0, r3
 800435c:	e731      	b.n	80041c2 <_printf_float+0xba>
 800435e:	2301      	movs	r3, #1
 8004360:	464a      	mov	r2, r9
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	f43f af28 	beq.w	80041be <_printf_float+0xb6>
 800436e:	f108 0801 	add.w	r8, r8, #1
 8004372:	e7e6      	b.n	8004342 <_printf_float+0x23a>
 8004374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	dc38      	bgt.n	80043ec <_printf_float+0x2e4>
 800437a:	2301      	movs	r3, #1
 800437c:	4631      	mov	r1, r6
 800437e:	4628      	mov	r0, r5
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <_printf_float+0x2e0>)
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	f43f af1a 	beq.w	80041be <_printf_float+0xb6>
 800438a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800438e:	4313      	orrs	r3, r2
 8004390:	d102      	bne.n	8004398 <_printf_float+0x290>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	07d9      	lsls	r1, r3, #31
 8004396:	d5d8      	bpl.n	800434a <_printf_float+0x242>
 8004398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800439c:	4631      	mov	r1, r6
 800439e:	4628      	mov	r0, r5
 80043a0:	47b8      	blx	r7
 80043a2:	3001      	adds	r0, #1
 80043a4:	f43f af0b 	beq.w	80041be <_printf_float+0xb6>
 80043a8:	f04f 0900 	mov.w	r9, #0
 80043ac:	f104 0a1a 	add.w	sl, r4, #26
 80043b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b2:	425b      	negs	r3, r3
 80043b4:	454b      	cmp	r3, r9
 80043b6:	dc01      	bgt.n	80043bc <_printf_float+0x2b4>
 80043b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043ba:	e794      	b.n	80042e6 <_printf_float+0x1de>
 80043bc:	2301      	movs	r3, #1
 80043be:	4652      	mov	r2, sl
 80043c0:	4631      	mov	r1, r6
 80043c2:	4628      	mov	r0, r5
 80043c4:	47b8      	blx	r7
 80043c6:	3001      	adds	r0, #1
 80043c8:	f43f aef9 	beq.w	80041be <_printf_float+0xb6>
 80043cc:	f109 0901 	add.w	r9, r9, #1
 80043d0:	e7ee      	b.n	80043b0 <_printf_float+0x2a8>
 80043d2:	bf00      	nop
 80043d4:	7fefffff 	.word	0x7fefffff
 80043d8:	08007464 	.word	0x08007464
 80043dc:	08007468 	.word	0x08007468
 80043e0:	08007470 	.word	0x08007470
 80043e4:	0800746c 	.word	0x0800746c
 80043e8:	08007474 	.word	0x08007474
 80043ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043f0:	429a      	cmp	r2, r3
 80043f2:	bfa8      	it	ge
 80043f4:	461a      	movge	r2, r3
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	4691      	mov	r9, r2
 80043fa:	dc37      	bgt.n	800446c <_printf_float+0x364>
 80043fc:	f04f 0b00 	mov.w	fp, #0
 8004400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004404:	f104 021a 	add.w	r2, r4, #26
 8004408:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800440c:	ebaa 0309 	sub.w	r3, sl, r9
 8004410:	455b      	cmp	r3, fp
 8004412:	dc33      	bgt.n	800447c <_printf_float+0x374>
 8004414:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004418:	429a      	cmp	r2, r3
 800441a:	db3b      	blt.n	8004494 <_printf_float+0x38c>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	07da      	lsls	r2, r3, #31
 8004420:	d438      	bmi.n	8004494 <_printf_float+0x38c>
 8004422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004424:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004426:	eba2 030a 	sub.w	r3, r2, sl
 800442a:	eba2 0901 	sub.w	r9, r2, r1
 800442e:	4599      	cmp	r9, r3
 8004430:	bfa8      	it	ge
 8004432:	4699      	movge	r9, r3
 8004434:	f1b9 0f00 	cmp.w	r9, #0
 8004438:	dc34      	bgt.n	80044a4 <_printf_float+0x39c>
 800443a:	f04f 0800 	mov.w	r8, #0
 800443e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004442:	f104 0a1a 	add.w	sl, r4, #26
 8004446:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	eba3 0309 	sub.w	r3, r3, r9
 8004450:	4543      	cmp	r3, r8
 8004452:	f77f af7a 	ble.w	800434a <_printf_float+0x242>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	f43f aeac 	beq.w	80041be <_printf_float+0xb6>
 8004466:	f108 0801 	add.w	r8, r8, #1
 800446a:	e7ec      	b.n	8004446 <_printf_float+0x33e>
 800446c:	4613      	mov	r3, r2
 800446e:	4631      	mov	r1, r6
 8004470:	4642      	mov	r2, r8
 8004472:	4628      	mov	r0, r5
 8004474:	47b8      	blx	r7
 8004476:	3001      	adds	r0, #1
 8004478:	d1c0      	bne.n	80043fc <_printf_float+0x2f4>
 800447a:	e6a0      	b.n	80041be <_printf_float+0xb6>
 800447c:	2301      	movs	r3, #1
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	920b      	str	r2, [sp, #44]	; 0x2c
 8004484:	47b8      	blx	r7
 8004486:	3001      	adds	r0, #1
 8004488:	f43f ae99 	beq.w	80041be <_printf_float+0xb6>
 800448c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800448e:	f10b 0b01 	add.w	fp, fp, #1
 8004492:	e7b9      	b.n	8004408 <_printf_float+0x300>
 8004494:	4631      	mov	r1, r6
 8004496:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800449a:	4628      	mov	r0, r5
 800449c:	47b8      	blx	r7
 800449e:	3001      	adds	r0, #1
 80044a0:	d1bf      	bne.n	8004422 <_printf_float+0x31a>
 80044a2:	e68c      	b.n	80041be <_printf_float+0xb6>
 80044a4:	464b      	mov	r3, r9
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	eb08 020a 	add.w	r2, r8, sl
 80044ae:	47b8      	blx	r7
 80044b0:	3001      	adds	r0, #1
 80044b2:	d1c2      	bne.n	800443a <_printf_float+0x332>
 80044b4:	e683      	b.n	80041be <_printf_float+0xb6>
 80044b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044b8:	2a01      	cmp	r2, #1
 80044ba:	dc01      	bgt.n	80044c0 <_printf_float+0x3b8>
 80044bc:	07db      	lsls	r3, r3, #31
 80044be:	d537      	bpl.n	8004530 <_printf_float+0x428>
 80044c0:	2301      	movs	r3, #1
 80044c2:	4642      	mov	r2, r8
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f ae77 	beq.w	80041be <_printf_float+0xb6>
 80044d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f ae6f 	beq.w	80041be <_printf_float+0xb6>
 80044e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	f7fc fa5e 	bl	80009a8 <__aeabi_dcmpeq>
 80044ec:	b9d8      	cbnz	r0, 8004526 <_printf_float+0x41e>
 80044ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044f0:	f108 0201 	add.w	r2, r8, #1
 80044f4:	3b01      	subs	r3, #1
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	d10e      	bne.n	800451e <_printf_float+0x416>
 8004500:	e65d      	b.n	80041be <_printf_float+0xb6>
 8004502:	2301      	movs	r3, #1
 8004504:	464a      	mov	r2, r9
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f ae56 	beq.w	80041be <_printf_float+0xb6>
 8004512:	f108 0801 	add.w	r8, r8, #1
 8004516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004518:	3b01      	subs	r3, #1
 800451a:	4543      	cmp	r3, r8
 800451c:	dcf1      	bgt.n	8004502 <_printf_float+0x3fa>
 800451e:	4653      	mov	r3, sl
 8004520:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004524:	e6e0      	b.n	80042e8 <_printf_float+0x1e0>
 8004526:	f04f 0800 	mov.w	r8, #0
 800452a:	f104 091a 	add.w	r9, r4, #26
 800452e:	e7f2      	b.n	8004516 <_printf_float+0x40e>
 8004530:	2301      	movs	r3, #1
 8004532:	4642      	mov	r2, r8
 8004534:	e7df      	b.n	80044f6 <_printf_float+0x3ee>
 8004536:	2301      	movs	r3, #1
 8004538:	464a      	mov	r2, r9
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	f43f ae3c 	beq.w	80041be <_printf_float+0xb6>
 8004546:	f108 0801 	add.w	r8, r8, #1
 800454a:	68e3      	ldr	r3, [r4, #12]
 800454c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800454e:	1a5b      	subs	r3, r3, r1
 8004550:	4543      	cmp	r3, r8
 8004552:	dcf0      	bgt.n	8004536 <_printf_float+0x42e>
 8004554:	e6fd      	b.n	8004352 <_printf_float+0x24a>
 8004556:	f04f 0800 	mov.w	r8, #0
 800455a:	f104 0919 	add.w	r9, r4, #25
 800455e:	e7f4      	b.n	800454a <_printf_float+0x442>

08004560 <_printf_common>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	4616      	mov	r6, r2
 8004566:	4699      	mov	r9, r3
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	690b      	ldr	r3, [r1, #16]
 800456c:	4607      	mov	r7, r0
 800456e:	4293      	cmp	r3, r2
 8004570:	bfb8      	it	lt
 8004572:	4613      	movlt	r3, r2
 8004574:	6033      	str	r3, [r6, #0]
 8004576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800457a:	460c      	mov	r4, r1
 800457c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004580:	b10a      	cbz	r2, 8004586 <_printf_common+0x26>
 8004582:	3301      	adds	r3, #1
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	0699      	lsls	r1, r3, #26
 800458a:	bf42      	ittt	mi
 800458c:	6833      	ldrmi	r3, [r6, #0]
 800458e:	3302      	addmi	r3, #2
 8004590:	6033      	strmi	r3, [r6, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	f015 0506 	ands.w	r5, r5, #6
 8004598:	d106      	bne.n	80045a8 <_printf_common+0x48>
 800459a:	f104 0a19 	add.w	sl, r4, #25
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	6832      	ldr	r2, [r6, #0]
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dc28      	bgt.n	80045fa <_printf_common+0x9a>
 80045a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045ac:	1e13      	subs	r3, r2, #0
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	bf18      	it	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	0692      	lsls	r2, r2, #26
 80045b6:	d42d      	bmi.n	8004614 <_printf_common+0xb4>
 80045b8:	4649      	mov	r1, r9
 80045ba:	4638      	mov	r0, r7
 80045bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c0:	47c0      	blx	r8
 80045c2:	3001      	adds	r0, #1
 80045c4:	d020      	beq.n	8004608 <_printf_common+0xa8>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	68e5      	ldr	r5, [r4, #12]
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	bf18      	it	ne
 80045d2:	2500      	movne	r5, #0
 80045d4:	6832      	ldr	r2, [r6, #0]
 80045d6:	f04f 0600 	mov.w	r6, #0
 80045da:	68a3      	ldr	r3, [r4, #8]
 80045dc:	bf08      	it	eq
 80045de:	1aad      	subeq	r5, r5, r2
 80045e0:	6922      	ldr	r2, [r4, #16]
 80045e2:	bf08      	it	eq
 80045e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bfc4      	itt	gt
 80045ec:	1a9b      	subgt	r3, r3, r2
 80045ee:	18ed      	addgt	r5, r5, r3
 80045f0:	341a      	adds	r4, #26
 80045f2:	42b5      	cmp	r5, r6
 80045f4:	d11a      	bne.n	800462c <_printf_common+0xcc>
 80045f6:	2000      	movs	r0, #0
 80045f8:	e008      	b.n	800460c <_printf_common+0xac>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4652      	mov	r2, sl
 80045fe:	4649      	mov	r1, r9
 8004600:	4638      	mov	r0, r7
 8004602:	47c0      	blx	r8
 8004604:	3001      	adds	r0, #1
 8004606:	d103      	bne.n	8004610 <_printf_common+0xb0>
 8004608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	3501      	adds	r5, #1
 8004612:	e7c4      	b.n	800459e <_printf_common+0x3e>
 8004614:	2030      	movs	r0, #48	; 0x30
 8004616:	18e1      	adds	r1, r4, r3
 8004618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004622:	4422      	add	r2, r4
 8004624:	3302      	adds	r3, #2
 8004626:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800462a:	e7c5      	b.n	80045b8 <_printf_common+0x58>
 800462c:	2301      	movs	r3, #1
 800462e:	4622      	mov	r2, r4
 8004630:	4649      	mov	r1, r9
 8004632:	4638      	mov	r0, r7
 8004634:	47c0      	blx	r8
 8004636:	3001      	adds	r0, #1
 8004638:	d0e6      	beq.n	8004608 <_printf_common+0xa8>
 800463a:	3601      	adds	r6, #1
 800463c:	e7d9      	b.n	80045f2 <_printf_common+0x92>
	...

08004640 <_printf_i>:
 8004640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	460c      	mov	r4, r1
 8004646:	7e27      	ldrb	r7, [r4, #24]
 8004648:	4691      	mov	r9, r2
 800464a:	2f78      	cmp	r7, #120	; 0x78
 800464c:	4680      	mov	r8, r0
 800464e:	469a      	mov	sl, r3
 8004650:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004652:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004656:	d807      	bhi.n	8004668 <_printf_i+0x28>
 8004658:	2f62      	cmp	r7, #98	; 0x62
 800465a:	d80a      	bhi.n	8004672 <_printf_i+0x32>
 800465c:	2f00      	cmp	r7, #0
 800465e:	f000 80d9 	beq.w	8004814 <_printf_i+0x1d4>
 8004662:	2f58      	cmp	r7, #88	; 0x58
 8004664:	f000 80a4 	beq.w	80047b0 <_printf_i+0x170>
 8004668:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800466c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004670:	e03a      	b.n	80046e8 <_printf_i+0xa8>
 8004672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004676:	2b15      	cmp	r3, #21
 8004678:	d8f6      	bhi.n	8004668 <_printf_i+0x28>
 800467a:	a001      	add	r0, pc, #4	; (adr r0, 8004680 <_printf_i+0x40>)
 800467c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004680:	080046d9 	.word	0x080046d9
 8004684:	080046ed 	.word	0x080046ed
 8004688:	08004669 	.word	0x08004669
 800468c:	08004669 	.word	0x08004669
 8004690:	08004669 	.word	0x08004669
 8004694:	08004669 	.word	0x08004669
 8004698:	080046ed 	.word	0x080046ed
 800469c:	08004669 	.word	0x08004669
 80046a0:	08004669 	.word	0x08004669
 80046a4:	08004669 	.word	0x08004669
 80046a8:	08004669 	.word	0x08004669
 80046ac:	080047fb 	.word	0x080047fb
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	080047dd 	.word	0x080047dd
 80046b8:	08004669 	.word	0x08004669
 80046bc:	08004669 	.word	0x08004669
 80046c0:	0800481d 	.word	0x0800481d
 80046c4:	08004669 	.word	0x08004669
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	08004669 	.word	0x08004669
 80046d0:	08004669 	.word	0x08004669
 80046d4:	080047e5 	.word	0x080047e5
 80046d8:	680b      	ldr	r3, [r1, #0]
 80046da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	600a      	str	r2, [r1, #0]
 80046e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0a4      	b.n	8004836 <_printf_i+0x1f6>
 80046ec:	6825      	ldr	r5, [r4, #0]
 80046ee:	6808      	ldr	r0, [r1, #0]
 80046f0:	062e      	lsls	r6, r5, #24
 80046f2:	f100 0304 	add.w	r3, r0, #4
 80046f6:	d50a      	bpl.n	800470e <_printf_i+0xce>
 80046f8:	6805      	ldr	r5, [r0, #0]
 80046fa:	600b      	str	r3, [r1, #0]
 80046fc:	2d00      	cmp	r5, #0
 80046fe:	da03      	bge.n	8004708 <_printf_i+0xc8>
 8004700:	232d      	movs	r3, #45	; 0x2d
 8004702:	426d      	negs	r5, r5
 8004704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004708:	230a      	movs	r3, #10
 800470a:	485e      	ldr	r0, [pc, #376]	; (8004884 <_printf_i+0x244>)
 800470c:	e019      	b.n	8004742 <_printf_i+0x102>
 800470e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004712:	6805      	ldr	r5, [r0, #0]
 8004714:	600b      	str	r3, [r1, #0]
 8004716:	bf18      	it	ne
 8004718:	b22d      	sxthne	r5, r5
 800471a:	e7ef      	b.n	80046fc <_printf_i+0xbc>
 800471c:	680b      	ldr	r3, [r1, #0]
 800471e:	6825      	ldr	r5, [r4, #0]
 8004720:	1d18      	adds	r0, r3, #4
 8004722:	6008      	str	r0, [r1, #0]
 8004724:	0628      	lsls	r0, r5, #24
 8004726:	d501      	bpl.n	800472c <_printf_i+0xec>
 8004728:	681d      	ldr	r5, [r3, #0]
 800472a:	e002      	b.n	8004732 <_printf_i+0xf2>
 800472c:	0669      	lsls	r1, r5, #25
 800472e:	d5fb      	bpl.n	8004728 <_printf_i+0xe8>
 8004730:	881d      	ldrh	r5, [r3, #0]
 8004732:	2f6f      	cmp	r7, #111	; 0x6f
 8004734:	bf0c      	ite	eq
 8004736:	2308      	moveq	r3, #8
 8004738:	230a      	movne	r3, #10
 800473a:	4852      	ldr	r0, [pc, #328]	; (8004884 <_printf_i+0x244>)
 800473c:	2100      	movs	r1, #0
 800473e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004742:	6866      	ldr	r6, [r4, #4]
 8004744:	2e00      	cmp	r6, #0
 8004746:	bfa8      	it	ge
 8004748:	6821      	ldrge	r1, [r4, #0]
 800474a:	60a6      	str	r6, [r4, #8]
 800474c:	bfa4      	itt	ge
 800474e:	f021 0104 	bicge.w	r1, r1, #4
 8004752:	6021      	strge	r1, [r4, #0]
 8004754:	b90d      	cbnz	r5, 800475a <_printf_i+0x11a>
 8004756:	2e00      	cmp	r6, #0
 8004758:	d04d      	beq.n	80047f6 <_printf_i+0x1b6>
 800475a:	4616      	mov	r6, r2
 800475c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004760:	fb03 5711 	mls	r7, r3, r1, r5
 8004764:	5dc7      	ldrb	r7, [r0, r7]
 8004766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800476a:	462f      	mov	r7, r5
 800476c:	42bb      	cmp	r3, r7
 800476e:	460d      	mov	r5, r1
 8004770:	d9f4      	bls.n	800475c <_printf_i+0x11c>
 8004772:	2b08      	cmp	r3, #8
 8004774:	d10b      	bne.n	800478e <_printf_i+0x14e>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	07df      	lsls	r7, r3, #31
 800477a:	d508      	bpl.n	800478e <_printf_i+0x14e>
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	6861      	ldr	r1, [r4, #4]
 8004780:	4299      	cmp	r1, r3
 8004782:	bfde      	ittt	le
 8004784:	2330      	movle	r3, #48	; 0x30
 8004786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800478a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800478e:	1b92      	subs	r2, r2, r6
 8004790:	6122      	str	r2, [r4, #16]
 8004792:	464b      	mov	r3, r9
 8004794:	4621      	mov	r1, r4
 8004796:	4640      	mov	r0, r8
 8004798:	f8cd a000 	str.w	sl, [sp]
 800479c:	aa03      	add	r2, sp, #12
 800479e:	f7ff fedf 	bl	8004560 <_printf_common>
 80047a2:	3001      	adds	r0, #1
 80047a4:	d14c      	bne.n	8004840 <_printf_i+0x200>
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047aa:	b004      	add	sp, #16
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	4834      	ldr	r0, [pc, #208]	; (8004884 <_printf_i+0x244>)
 80047b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047b6:	680e      	ldr	r6, [r1, #0]
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80047be:	061f      	lsls	r7, r3, #24
 80047c0:	600e      	str	r6, [r1, #0]
 80047c2:	d514      	bpl.n	80047ee <_printf_i+0x1ae>
 80047c4:	07d9      	lsls	r1, r3, #31
 80047c6:	bf44      	itt	mi
 80047c8:	f043 0320 	orrmi.w	r3, r3, #32
 80047cc:	6023      	strmi	r3, [r4, #0]
 80047ce:	b91d      	cbnz	r5, 80047d8 <_printf_i+0x198>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	f023 0320 	bic.w	r3, r3, #32
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	2310      	movs	r3, #16
 80047da:	e7af      	b.n	800473c <_printf_i+0xfc>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	f043 0320 	orr.w	r3, r3, #32
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	2378      	movs	r3, #120	; 0x78
 80047e6:	4828      	ldr	r0, [pc, #160]	; (8004888 <_printf_i+0x248>)
 80047e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047ec:	e7e3      	b.n	80047b6 <_printf_i+0x176>
 80047ee:	065e      	lsls	r6, r3, #25
 80047f0:	bf48      	it	mi
 80047f2:	b2ad      	uxthmi	r5, r5
 80047f4:	e7e6      	b.n	80047c4 <_printf_i+0x184>
 80047f6:	4616      	mov	r6, r2
 80047f8:	e7bb      	b.n	8004772 <_printf_i+0x132>
 80047fa:	680b      	ldr	r3, [r1, #0]
 80047fc:	6826      	ldr	r6, [r4, #0]
 80047fe:	1d1d      	adds	r5, r3, #4
 8004800:	6960      	ldr	r0, [r4, #20]
 8004802:	600d      	str	r5, [r1, #0]
 8004804:	0635      	lsls	r5, r6, #24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	d501      	bpl.n	800480e <_printf_i+0x1ce>
 800480a:	6018      	str	r0, [r3, #0]
 800480c:	e002      	b.n	8004814 <_printf_i+0x1d4>
 800480e:	0671      	lsls	r1, r6, #25
 8004810:	d5fb      	bpl.n	800480a <_printf_i+0x1ca>
 8004812:	8018      	strh	r0, [r3, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	4616      	mov	r6, r2
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	e7ba      	b.n	8004792 <_printf_i+0x152>
 800481c:	680b      	ldr	r3, [r1, #0]
 800481e:	1d1a      	adds	r2, r3, #4
 8004820:	600a      	str	r2, [r1, #0]
 8004822:	681e      	ldr	r6, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	4630      	mov	r0, r6
 8004828:	6862      	ldr	r2, [r4, #4]
 800482a:	f000 ff13 	bl	8005654 <memchr>
 800482e:	b108      	cbz	r0, 8004834 <_printf_i+0x1f4>
 8004830:	1b80      	subs	r0, r0, r6
 8004832:	6060      	str	r0, [r4, #4]
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	6123      	str	r3, [r4, #16]
 8004838:	2300      	movs	r3, #0
 800483a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800483e:	e7a8      	b.n	8004792 <_printf_i+0x152>
 8004840:	4632      	mov	r2, r6
 8004842:	4649      	mov	r1, r9
 8004844:	4640      	mov	r0, r8
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	47d0      	blx	sl
 800484a:	3001      	adds	r0, #1
 800484c:	d0ab      	beq.n	80047a6 <_printf_i+0x166>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	079b      	lsls	r3, r3, #30
 8004852:	d413      	bmi.n	800487c <_printf_i+0x23c>
 8004854:	68e0      	ldr	r0, [r4, #12]
 8004856:	9b03      	ldr	r3, [sp, #12]
 8004858:	4298      	cmp	r0, r3
 800485a:	bfb8      	it	lt
 800485c:	4618      	movlt	r0, r3
 800485e:	e7a4      	b.n	80047aa <_printf_i+0x16a>
 8004860:	2301      	movs	r3, #1
 8004862:	4632      	mov	r2, r6
 8004864:	4649      	mov	r1, r9
 8004866:	4640      	mov	r0, r8
 8004868:	47d0      	blx	sl
 800486a:	3001      	adds	r0, #1
 800486c:	d09b      	beq.n	80047a6 <_printf_i+0x166>
 800486e:	3501      	adds	r5, #1
 8004870:	68e3      	ldr	r3, [r4, #12]
 8004872:	9903      	ldr	r1, [sp, #12]
 8004874:	1a5b      	subs	r3, r3, r1
 8004876:	42ab      	cmp	r3, r5
 8004878:	dcf2      	bgt.n	8004860 <_printf_i+0x220>
 800487a:	e7eb      	b.n	8004854 <_printf_i+0x214>
 800487c:	2500      	movs	r5, #0
 800487e:	f104 0619 	add.w	r6, r4, #25
 8004882:	e7f5      	b.n	8004870 <_printf_i+0x230>
 8004884:	08007476 	.word	0x08007476
 8004888:	08007487 	.word	0x08007487

0800488c <siprintf>:
 800488c:	b40e      	push	{r1, r2, r3}
 800488e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004892:	b500      	push	{lr}
 8004894:	b09c      	sub	sp, #112	; 0x70
 8004896:	ab1d      	add	r3, sp, #116	; 0x74
 8004898:	9002      	str	r0, [sp, #8]
 800489a:	9006      	str	r0, [sp, #24]
 800489c:	9107      	str	r1, [sp, #28]
 800489e:	9104      	str	r1, [sp, #16]
 80048a0:	4808      	ldr	r0, [pc, #32]	; (80048c4 <siprintf+0x38>)
 80048a2:	4909      	ldr	r1, [pc, #36]	; (80048c8 <siprintf+0x3c>)
 80048a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a8:	9105      	str	r1, [sp, #20]
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	a902      	add	r1, sp, #8
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	f001 fb7e 	bl	8005fb0 <_svfiprintf_r>
 80048b4:	2200      	movs	r2, #0
 80048b6:	9b02      	ldr	r3, [sp, #8]
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	b01c      	add	sp, #112	; 0x70
 80048bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c0:	b003      	add	sp, #12
 80048c2:	4770      	bx	lr
 80048c4:	2000009c 	.word	0x2000009c
 80048c8:	ffff0208 	.word	0xffff0208

080048cc <_vsniprintf_r>:
 80048cc:	b530      	push	{r4, r5, lr}
 80048ce:	1e14      	subs	r4, r2, #0
 80048d0:	4605      	mov	r5, r0
 80048d2:	b09b      	sub	sp, #108	; 0x6c
 80048d4:	4618      	mov	r0, r3
 80048d6:	da05      	bge.n	80048e4 <_vsniprintf_r+0x18>
 80048d8:	238b      	movs	r3, #139	; 0x8b
 80048da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	b01b      	add	sp, #108	; 0x6c
 80048e2:	bd30      	pop	{r4, r5, pc}
 80048e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80048e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80048ec:	bf0c      	ite	eq
 80048ee:	4623      	moveq	r3, r4
 80048f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	9305      	str	r3, [sp, #20]
 80048f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048fc:	4602      	mov	r2, r0
 80048fe:	9100      	str	r1, [sp, #0]
 8004900:	9104      	str	r1, [sp, #16]
 8004902:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004906:	4669      	mov	r1, sp
 8004908:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800490a:	4628      	mov	r0, r5
 800490c:	f001 fb50 	bl	8005fb0 <_svfiprintf_r>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	bfbc      	itt	lt
 8004914:	238b      	movlt	r3, #139	; 0x8b
 8004916:	602b      	strlt	r3, [r5, #0]
 8004918:	2c00      	cmp	r4, #0
 800491a:	d0e1      	beq.n	80048e0 <_vsniprintf_r+0x14>
 800491c:	2200      	movs	r2, #0
 800491e:	9b00      	ldr	r3, [sp, #0]
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	e7dd      	b.n	80048e0 <_vsniprintf_r+0x14>

08004924 <vsniprintf>:
 8004924:	b507      	push	{r0, r1, r2, lr}
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	460a      	mov	r2, r1
 800492c:	4601      	mov	r1, r0
 800492e:	4803      	ldr	r0, [pc, #12]	; (800493c <vsniprintf+0x18>)
 8004930:	6800      	ldr	r0, [r0, #0]
 8004932:	f7ff ffcb 	bl	80048cc <_vsniprintf_r>
 8004936:	b003      	add	sp, #12
 8004938:	f85d fb04 	ldr.w	pc, [sp], #4
 800493c:	2000009c 	.word	0x2000009c

08004940 <quorem>:
 8004940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	6903      	ldr	r3, [r0, #16]
 8004946:	690c      	ldr	r4, [r1, #16]
 8004948:	4607      	mov	r7, r0
 800494a:	42a3      	cmp	r3, r4
 800494c:	f2c0 8083 	blt.w	8004a56 <quorem+0x116>
 8004950:	3c01      	subs	r4, #1
 8004952:	f100 0514 	add.w	r5, r0, #20
 8004956:	f101 0814 	add.w	r8, r1, #20
 800495a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004968:	3301      	adds	r3, #1
 800496a:	429a      	cmp	r2, r3
 800496c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004970:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004978:	d332      	bcc.n	80049e0 <quorem+0xa0>
 800497a:	f04f 0e00 	mov.w	lr, #0
 800497e:	4640      	mov	r0, r8
 8004980:	46ac      	mov	ip, r5
 8004982:	46f2      	mov	sl, lr
 8004984:	f850 2b04 	ldr.w	r2, [r0], #4
 8004988:	b293      	uxth	r3, r2
 800498a:	fb06 e303 	mla	r3, r6, r3, lr
 800498e:	0c12      	lsrs	r2, r2, #16
 8004990:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004994:	fb06 e202 	mla	r2, r6, r2, lr
 8004998:	b29b      	uxth	r3, r3
 800499a:	ebaa 0303 	sub.w	r3, sl, r3
 800499e:	f8dc a000 	ldr.w	sl, [ip]
 80049a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049a6:	fa1f fa8a 	uxth.w	sl, sl
 80049aa:	4453      	add	r3, sl
 80049ac:	fa1f fa82 	uxth.w	sl, r2
 80049b0:	f8dc 2000 	ldr.w	r2, [ip]
 80049b4:	4581      	cmp	r9, r0
 80049b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80049ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049be:	b29b      	uxth	r3, r3
 80049c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049c8:	f84c 3b04 	str.w	r3, [ip], #4
 80049cc:	d2da      	bcs.n	8004984 <quorem+0x44>
 80049ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80049d2:	b92b      	cbnz	r3, 80049e0 <quorem+0xa0>
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	3b04      	subs	r3, #4
 80049d8:	429d      	cmp	r5, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	d32f      	bcc.n	8004a3e <quorem+0xfe>
 80049de:	613c      	str	r4, [r7, #16]
 80049e0:	4638      	mov	r0, r7
 80049e2:	f001 f8cd 	bl	8005b80 <__mcmp>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	db25      	blt.n	8004a36 <quorem+0xf6>
 80049ea:	4628      	mov	r0, r5
 80049ec:	f04f 0c00 	mov.w	ip, #0
 80049f0:	3601      	adds	r6, #1
 80049f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80049f6:	f8d0 e000 	ldr.w	lr, [r0]
 80049fa:	b28b      	uxth	r3, r1
 80049fc:	ebac 0303 	sub.w	r3, ip, r3
 8004a00:	fa1f f28e 	uxth.w	r2, lr
 8004a04:	4413      	add	r3, r2
 8004a06:	0c0a      	lsrs	r2, r1, #16
 8004a08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a16:	45c1      	cmp	r9, r8
 8004a18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a1c:	f840 3b04 	str.w	r3, [r0], #4
 8004a20:	d2e7      	bcs.n	80049f2 <quorem+0xb2>
 8004a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a2a:	b922      	cbnz	r2, 8004a36 <quorem+0xf6>
 8004a2c:	3b04      	subs	r3, #4
 8004a2e:	429d      	cmp	r5, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	d30a      	bcc.n	8004a4a <quorem+0x10a>
 8004a34:	613c      	str	r4, [r7, #16]
 8004a36:	4630      	mov	r0, r6
 8004a38:	b003      	add	sp, #12
 8004a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d1cb      	bne.n	80049de <quorem+0x9e>
 8004a46:	3c01      	subs	r4, #1
 8004a48:	e7c6      	b.n	80049d8 <quorem+0x98>
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	3b04      	subs	r3, #4
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	d1f0      	bne.n	8004a34 <quorem+0xf4>
 8004a52:	3c01      	subs	r4, #1
 8004a54:	e7eb      	b.n	8004a2e <quorem+0xee>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e7ee      	b.n	8004a38 <quorem+0xf8>
 8004a5a:	0000      	movs	r0, r0
 8004a5c:	0000      	movs	r0, r0
	...

08004a60 <_dtoa_r>:
 8004a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	4616      	mov	r6, r2
 8004a66:	461f      	mov	r7, r3
 8004a68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004a6a:	b099      	sub	sp, #100	; 0x64
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004a76:	b974      	cbnz	r4, 8004a96 <_dtoa_r+0x36>
 8004a78:	2010      	movs	r0, #16
 8004a7a:	f000 fde3 	bl	8005644 <malloc>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6268      	str	r0, [r5, #36]	; 0x24
 8004a82:	b920      	cbnz	r0, 8004a8e <_dtoa_r+0x2e>
 8004a84:	21ea      	movs	r1, #234	; 0xea
 8004a86:	4bae      	ldr	r3, [pc, #696]	; (8004d40 <_dtoa_r+0x2e0>)
 8004a88:	48ae      	ldr	r0, [pc, #696]	; (8004d44 <_dtoa_r+0x2e4>)
 8004a8a:	f001 fba1 	bl	80061d0 <__assert_func>
 8004a8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a92:	6004      	str	r4, [r0, #0]
 8004a94:	60c4      	str	r4, [r0, #12]
 8004a96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	b151      	cbz	r1, 8004ab2 <_dtoa_r+0x52>
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4093      	lsls	r3, r2
 8004aa2:	604a      	str	r2, [r1, #4]
 8004aa4:	608b      	str	r3, [r1, #8]
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f000 fe30 	bl	800570c <_Bfree>
 8004aac:	2200      	movs	r2, #0
 8004aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	1e3b      	subs	r3, r7, #0
 8004ab4:	bfaf      	iteee	ge
 8004ab6:	2300      	movge	r3, #0
 8004ab8:	2201      	movlt	r2, #1
 8004aba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004abe:	9305      	strlt	r3, [sp, #20]
 8004ac0:	bfa8      	it	ge
 8004ac2:	f8c8 3000 	strge.w	r3, [r8]
 8004ac6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004aca:	4b9f      	ldr	r3, [pc, #636]	; (8004d48 <_dtoa_r+0x2e8>)
 8004acc:	bfb8      	it	lt
 8004ace:	f8c8 2000 	strlt.w	r2, [r8]
 8004ad2:	ea33 0309 	bics.w	r3, r3, r9
 8004ad6:	d119      	bne.n	8004b0c <_dtoa_r+0xac>
 8004ad8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004adc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ae4:	4333      	orrs	r3, r6
 8004ae6:	f000 8580 	beq.w	80055ea <_dtoa_r+0xb8a>
 8004aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004aec:	b953      	cbnz	r3, 8004b04 <_dtoa_r+0xa4>
 8004aee:	4b97      	ldr	r3, [pc, #604]	; (8004d4c <_dtoa_r+0x2ec>)
 8004af0:	e022      	b.n	8004b38 <_dtoa_r+0xd8>
 8004af2:	4b97      	ldr	r3, [pc, #604]	; (8004d50 <_dtoa_r+0x2f0>)
 8004af4:	9308      	str	r3, [sp, #32]
 8004af6:	3308      	adds	r3, #8
 8004af8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	9808      	ldr	r0, [sp, #32]
 8004afe:	b019      	add	sp, #100	; 0x64
 8004b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b04:	4b91      	ldr	r3, [pc, #580]	; (8004d4c <_dtoa_r+0x2ec>)
 8004b06:	9308      	str	r3, [sp, #32]
 8004b08:	3303      	adds	r3, #3
 8004b0a:	e7f5      	b.n	8004af8 <_dtoa_r+0x98>
 8004b0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f7fb ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8004b20:	4680      	mov	r8, r0
 8004b22:	b158      	cbz	r0, 8004b3c <_dtoa_r+0xdc>
 8004b24:	2301      	movs	r3, #1
 8004b26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8559 	beq.w	80055e4 <_dtoa_r+0xb84>
 8004b32:	4888      	ldr	r0, [pc, #544]	; (8004d54 <_dtoa_r+0x2f4>)
 8004b34:	6018      	str	r0, [r3, #0]
 8004b36:	1e43      	subs	r3, r0, #1
 8004b38:	9308      	str	r3, [sp, #32]
 8004b3a:	e7df      	b.n	8004afc <_dtoa_r+0x9c>
 8004b3c:	ab16      	add	r3, sp, #88	; 0x58
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	ab17      	add	r3, sp, #92	; 0x5c
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	4628      	mov	r0, r5
 8004b46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b4a:	f001 f8c5 	bl	8005cd8 <__d2b>
 8004b4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b52:	4682      	mov	sl, r0
 8004b54:	2c00      	cmp	r4, #0
 8004b56:	d07e      	beq.n	8004c56 <_dtoa_r+0x1f6>
 8004b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004b72:	2200      	movs	r2, #0
 8004b74:	4b78      	ldr	r3, [pc, #480]	; (8004d58 <_dtoa_r+0x2f8>)
 8004b76:	f7fb faf7 	bl	8000168 <__aeabi_dsub>
 8004b7a:	a36b      	add	r3, pc, #428	; (adr r3, 8004d28 <_dtoa_r+0x2c8>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fcaa 	bl	80004d8 <__aeabi_dmul>
 8004b84:	a36a      	add	r3, pc, #424	; (adr r3, 8004d30 <_dtoa_r+0x2d0>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb faef 	bl	800016c <__adddf3>
 8004b8e:	4606      	mov	r6, r0
 8004b90:	4620      	mov	r0, r4
 8004b92:	460f      	mov	r7, r1
 8004b94:	f7fb fc36 	bl	8000404 <__aeabi_i2d>
 8004b98:	a367      	add	r3, pc, #412	; (adr r3, 8004d38 <_dtoa_r+0x2d8>)
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f7fb fc9b 	bl	80004d8 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	4639      	mov	r1, r7
 8004baa:	f7fb fadf 	bl	800016c <__adddf3>
 8004bae:	4606      	mov	r6, r0
 8004bb0:	460f      	mov	r7, r1
 8004bb2:	f7fb ff41 	bl	8000a38 <__aeabi_d2iz>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4681      	mov	r9, r0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb fefc 	bl	80009bc <__aeabi_dcmplt>
 8004bc4:	b148      	cbz	r0, 8004bda <_dtoa_r+0x17a>
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f7fb fc1c 	bl	8000404 <__aeabi_i2d>
 8004bcc:	4632      	mov	r2, r6
 8004bce:	463b      	mov	r3, r7
 8004bd0:	f7fb feea 	bl	80009a8 <__aeabi_dcmpeq>
 8004bd4:	b908      	cbnz	r0, 8004bda <_dtoa_r+0x17a>
 8004bd6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004bda:	f1b9 0f16 	cmp.w	r9, #22
 8004bde:	d857      	bhi.n	8004c90 <_dtoa_r+0x230>
 8004be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004be4:	4b5d      	ldr	r3, [pc, #372]	; (8004d5c <_dtoa_r+0x2fc>)
 8004be6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fee5 	bl	80009bc <__aeabi_dcmplt>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d04e      	beq.n	8004c94 <_dtoa_r+0x234>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c00:	1b1c      	subs	r4, r3, r4
 8004c02:	1e63      	subs	r3, r4, #1
 8004c04:	9309      	str	r3, [sp, #36]	; 0x24
 8004c06:	bf49      	itett	mi
 8004c08:	f1c4 0301 	rsbmi	r3, r4, #1
 8004c0c:	2300      	movpl	r3, #0
 8004c0e:	9306      	strmi	r3, [sp, #24]
 8004c10:	2300      	movmi	r3, #0
 8004c12:	bf54      	ite	pl
 8004c14:	9306      	strpl	r3, [sp, #24]
 8004c16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c18:	f1b9 0f00 	cmp.w	r9, #0
 8004c1c:	db3c      	blt.n	8004c98 <_dtoa_r+0x238>
 8004c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c20:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004c24:	444b      	add	r3, r9
 8004c26:	9309      	str	r3, [sp, #36]	; 0x24
 8004c28:	2300      	movs	r3, #0
 8004c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d86c      	bhi.n	8004d0c <_dtoa_r+0x2ac>
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	bfc4      	itt	gt
 8004c36:	3b04      	subgt	r3, #4
 8004c38:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c3c:	bfc8      	it	gt
 8004c3e:	2400      	movgt	r4, #0
 8004c40:	f1a3 0302 	sub.w	r3, r3, #2
 8004c44:	bfd8      	it	le
 8004c46:	2401      	movle	r4, #1
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	f200 808b 	bhi.w	8004d64 <_dtoa_r+0x304>
 8004c4e:	e8df f003 	tbb	[pc, r3]
 8004c52:	4f2d      	.short	0x4f2d
 8004c54:	5b4d      	.short	0x5b4d
 8004c56:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c5a:	441c      	add	r4, r3
 8004c5c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	bfc3      	ittte	gt
 8004c64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c68:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004c6c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c70:	f1c3 0320 	rsble	r3, r3, #32
 8004c74:	bfc6      	itte	gt
 8004c76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c7a:	4318      	orrgt	r0, r3
 8004c7c:	fa06 f003 	lslle.w	r0, r6, r3
 8004c80:	f7fb fbb0 	bl	80003e4 <__aeabi_ui2d>
 8004c84:	2301      	movs	r3, #1
 8004c86:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004c8a:	3c01      	subs	r4, #1
 8004c8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c8e:	e770      	b.n	8004b72 <_dtoa_r+0x112>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e7b3      	b.n	8004bfc <_dtoa_r+0x19c>
 8004c94:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c96:	e7b2      	b.n	8004bfe <_dtoa_r+0x19e>
 8004c98:	9b06      	ldr	r3, [sp, #24]
 8004c9a:	eba3 0309 	sub.w	r3, r3, r9
 8004c9e:	9306      	str	r3, [sp, #24]
 8004ca0:	f1c9 0300 	rsb	r3, r9, #0
 8004ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8004caa:	e7bf      	b.n	8004c2c <_dtoa_r+0x1cc>
 8004cac:	2300      	movs	r3, #0
 8004cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dc59      	bgt.n	8004d6a <_dtoa_r+0x30a>
 8004cb6:	f04f 0b01 	mov.w	fp, #1
 8004cba:	465b      	mov	r3, fp
 8004cbc:	f8cd b008 	str.w	fp, [sp, #8]
 8004cc0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004cc8:	6042      	str	r2, [r0, #4]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	f102 0614 	add.w	r6, r2, #20
 8004cd0:	429e      	cmp	r6, r3
 8004cd2:	6841      	ldr	r1, [r0, #4]
 8004cd4:	d94f      	bls.n	8004d76 <_dtoa_r+0x316>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 fcd8 	bl	800568c <_Balloc>
 8004cdc:	9008      	str	r0, [sp, #32]
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d14d      	bne.n	8004d7e <_dtoa_r+0x31e>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <_dtoa_r+0x300>)
 8004cea:	e6cd      	b.n	8004a88 <_dtoa_r+0x28>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e7de      	b.n	8004cae <_dtoa_r+0x24e>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cf6:	eb09 0b03 	add.w	fp, r9, r3
 8004cfa:	f10b 0301 	add.w	r3, fp, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	bfb8      	it	lt
 8004d04:	2301      	movlt	r3, #1
 8004d06:	e7dd      	b.n	8004cc4 <_dtoa_r+0x264>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e7f2      	b.n	8004cf2 <_dtoa_r+0x292>
 8004d0c:	2401      	movs	r4, #1
 8004d0e:	2300      	movs	r3, #0
 8004d10:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d12:	9322      	str	r3, [sp, #136]	; 0x88
 8004d14:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2312      	movs	r3, #18
 8004d1c:	f8cd b008 	str.w	fp, [sp, #8]
 8004d20:	9223      	str	r2, [sp, #140]	; 0x8c
 8004d22:	e7cf      	b.n	8004cc4 <_dtoa_r+0x264>
 8004d24:	f3af 8000 	nop.w
 8004d28:	636f4361 	.word	0x636f4361
 8004d2c:	3fd287a7 	.word	0x3fd287a7
 8004d30:	8b60c8b3 	.word	0x8b60c8b3
 8004d34:	3fc68a28 	.word	0x3fc68a28
 8004d38:	509f79fb 	.word	0x509f79fb
 8004d3c:	3fd34413 	.word	0x3fd34413
 8004d40:	080074a5 	.word	0x080074a5
 8004d44:	080074bc 	.word	0x080074bc
 8004d48:	7ff00000 	.word	0x7ff00000
 8004d4c:	080074a1 	.word	0x080074a1
 8004d50:	08007498 	.word	0x08007498
 8004d54:	08007475 	.word	0x08007475
 8004d58:	3ff80000 	.word	0x3ff80000
 8004d5c:	080075b8 	.word	0x080075b8
 8004d60:	0800751b 	.word	0x0800751b
 8004d64:	2301      	movs	r3, #1
 8004d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d68:	e7d4      	b.n	8004d14 <_dtoa_r+0x2b4>
 8004d6a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004d6e:	465b      	mov	r3, fp
 8004d70:	f8cd b008 	str.w	fp, [sp, #8]
 8004d74:	e7a6      	b.n	8004cc4 <_dtoa_r+0x264>
 8004d76:	3101      	adds	r1, #1
 8004d78:	6041      	str	r1, [r0, #4]
 8004d7a:	0052      	lsls	r2, r2, #1
 8004d7c:	e7a6      	b.n	8004ccc <_dtoa_r+0x26c>
 8004d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d80:	9a08      	ldr	r2, [sp, #32]
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	9b02      	ldr	r3, [sp, #8]
 8004d86:	2b0e      	cmp	r3, #14
 8004d88:	f200 80a8 	bhi.w	8004edc <_dtoa_r+0x47c>
 8004d8c:	2c00      	cmp	r4, #0
 8004d8e:	f000 80a5 	beq.w	8004edc <_dtoa_r+0x47c>
 8004d92:	f1b9 0f00 	cmp.w	r9, #0
 8004d96:	dd34      	ble.n	8004e02 <_dtoa_r+0x3a2>
 8004d98:	4a9a      	ldr	r2, [pc, #616]	; (8005004 <_dtoa_r+0x5a4>)
 8004d9a:	f009 030f 	and.w	r3, r9, #15
 8004d9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004da2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004da6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004daa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004dae:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004db2:	d016      	beq.n	8004de2 <_dtoa_r+0x382>
 8004db4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004db8:	4b93      	ldr	r3, [pc, #588]	; (8005008 <_dtoa_r+0x5a8>)
 8004dba:	2703      	movs	r7, #3
 8004dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dc0:	f7fb fcb4 	bl	800072c <__aeabi_ddiv>
 8004dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dc8:	f004 040f 	and.w	r4, r4, #15
 8004dcc:	4e8e      	ldr	r6, [pc, #568]	; (8005008 <_dtoa_r+0x5a8>)
 8004dce:	b954      	cbnz	r4, 8004de6 <_dtoa_r+0x386>
 8004dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd8:	f7fb fca8 	bl	800072c <__aeabi_ddiv>
 8004ddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004de0:	e029      	b.n	8004e36 <_dtoa_r+0x3d6>
 8004de2:	2702      	movs	r7, #2
 8004de4:	e7f2      	b.n	8004dcc <_dtoa_r+0x36c>
 8004de6:	07e1      	lsls	r1, r4, #31
 8004de8:	d508      	bpl.n	8004dfc <_dtoa_r+0x39c>
 8004dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004df2:	f7fb fb71 	bl	80004d8 <__aeabi_dmul>
 8004df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dfa:	3701      	adds	r7, #1
 8004dfc:	1064      	asrs	r4, r4, #1
 8004dfe:	3608      	adds	r6, #8
 8004e00:	e7e5      	b.n	8004dce <_dtoa_r+0x36e>
 8004e02:	f000 80a5 	beq.w	8004f50 <_dtoa_r+0x4f0>
 8004e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e0a:	f1c9 0400 	rsb	r4, r9, #0
 8004e0e:	4b7d      	ldr	r3, [pc, #500]	; (8005004 <_dtoa_r+0x5a4>)
 8004e10:	f004 020f 	and.w	r2, r4, #15
 8004e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb fb5c 	bl	80004d8 <__aeabi_dmul>
 8004e20:	2702      	movs	r7, #2
 8004e22:	2300      	movs	r3, #0
 8004e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e28:	4e77      	ldr	r6, [pc, #476]	; (8005008 <_dtoa_r+0x5a8>)
 8004e2a:	1124      	asrs	r4, r4, #4
 8004e2c:	2c00      	cmp	r4, #0
 8004e2e:	f040 8084 	bne.w	8004f3a <_dtoa_r+0x4da>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1d2      	bne.n	8004ddc <_dtoa_r+0x37c>
 8004e36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 808b 	beq.w	8004f54 <_dtoa_r+0x4f4>
 8004e3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4b6f      	ldr	r3, [pc, #444]	; (800500c <_dtoa_r+0x5ac>)
 8004e4e:	f7fb fdb5 	bl	80009bc <__aeabi_dcmplt>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d07e      	beq.n	8004f54 <_dtoa_r+0x4f4>
 8004e56:	9b02      	ldr	r3, [sp, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d07b      	beq.n	8004f54 <_dtoa_r+0x4f4>
 8004e5c:	f1bb 0f00 	cmp.w	fp, #0
 8004e60:	dd38      	ble.n	8004ed4 <_dtoa_r+0x474>
 8004e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e66:	2200      	movs	r2, #0
 8004e68:	4b69      	ldr	r3, [pc, #420]	; (8005010 <_dtoa_r+0x5b0>)
 8004e6a:	f7fb fb35 	bl	80004d8 <__aeabi_dmul>
 8004e6e:	465c      	mov	r4, fp
 8004e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e74:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8004e78:	3701      	adds	r7, #1
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f7fb fac2 	bl	8000404 <__aeabi_i2d>
 8004e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e84:	f7fb fb28 	bl	80004d8 <__aeabi_dmul>
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4b62      	ldr	r3, [pc, #392]	; (8005014 <_dtoa_r+0x5b4>)
 8004e8c:	f7fb f96e 	bl	800016c <__adddf3>
 8004e90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e98:	9611      	str	r6, [sp, #68]	; 0x44
 8004e9a:	2c00      	cmp	r4, #0
 8004e9c:	d15d      	bne.n	8004f5a <_dtoa_r+0x4fa>
 8004e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4b5c      	ldr	r3, [pc, #368]	; (8005018 <_dtoa_r+0x5b8>)
 8004ea6:	f7fb f95f 	bl	8000168 <__aeabi_dsub>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004eb2:	4633      	mov	r3, r6
 8004eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eb6:	f7fb fd9f 	bl	80009f8 <__aeabi_dcmpgt>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	f040 829e 	bne.w	80053fc <_dtoa_r+0x99c>
 8004ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ec6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004eca:	f7fb fd77 	bl	80009bc <__aeabi_dcmplt>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	f040 8292 	bne.w	80053f8 <_dtoa_r+0x998>
 8004ed4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ed8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f2c0 8153 	blt.w	800518a <_dtoa_r+0x72a>
 8004ee4:	f1b9 0f0e 	cmp.w	r9, #14
 8004ee8:	f300 814f 	bgt.w	800518a <_dtoa_r+0x72a>
 8004eec:	4b45      	ldr	r3, [pc, #276]	; (8005004 <_dtoa_r+0x5a4>)
 8004eee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ef2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ef6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004efa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f280 80db 	bge.w	80050b8 <_dtoa_r+0x658>
 8004f02:	9b02      	ldr	r3, [sp, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f300 80d7 	bgt.w	80050b8 <_dtoa_r+0x658>
 8004f0a:	f040 8274 	bne.w	80053f6 <_dtoa_r+0x996>
 8004f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f12:	2200      	movs	r2, #0
 8004f14:	4b40      	ldr	r3, [pc, #256]	; (8005018 <_dtoa_r+0x5b8>)
 8004f16:	f7fb fadf 	bl	80004d8 <__aeabi_dmul>
 8004f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f1e:	f7fb fd61 	bl	80009e4 <__aeabi_dcmpge>
 8004f22:	9c02      	ldr	r4, [sp, #8]
 8004f24:	4626      	mov	r6, r4
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f040 824a 	bne.w	80053c0 <_dtoa_r+0x960>
 8004f2c:	2331      	movs	r3, #49	; 0x31
 8004f2e:	9f08      	ldr	r7, [sp, #32]
 8004f30:	f109 0901 	add.w	r9, r9, #1
 8004f34:	f807 3b01 	strb.w	r3, [r7], #1
 8004f38:	e246      	b.n	80053c8 <_dtoa_r+0x968>
 8004f3a:	07e2      	lsls	r2, r4, #31
 8004f3c:	d505      	bpl.n	8004f4a <_dtoa_r+0x4ea>
 8004f3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f42:	f7fb fac9 	bl	80004d8 <__aeabi_dmul>
 8004f46:	2301      	movs	r3, #1
 8004f48:	3701      	adds	r7, #1
 8004f4a:	1064      	asrs	r4, r4, #1
 8004f4c:	3608      	adds	r6, #8
 8004f4e:	e76d      	b.n	8004e2c <_dtoa_r+0x3cc>
 8004f50:	2702      	movs	r7, #2
 8004f52:	e770      	b.n	8004e36 <_dtoa_r+0x3d6>
 8004f54:	46c8      	mov	r8, r9
 8004f56:	9c02      	ldr	r4, [sp, #8]
 8004f58:	e78f      	b.n	8004e7a <_dtoa_r+0x41a>
 8004f5a:	9908      	ldr	r1, [sp, #32]
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <_dtoa_r+0x5a4>)
 8004f5e:	4421      	add	r1, r4
 8004f60:	9112      	str	r1, [sp, #72]	; 0x48
 8004f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f70:	2900      	cmp	r1, #0
 8004f72:	d055      	beq.n	8005020 <_dtoa_r+0x5c0>
 8004f74:	2000      	movs	r0, #0
 8004f76:	4929      	ldr	r1, [pc, #164]	; (800501c <_dtoa_r+0x5bc>)
 8004f78:	f7fb fbd8 	bl	800072c <__aeabi_ddiv>
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	4632      	mov	r2, r6
 8004f80:	f7fb f8f2 	bl	8000168 <__aeabi_dsub>
 8004f84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f88:	9f08      	ldr	r7, [sp, #32]
 8004f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f8e:	f7fb fd53 	bl	8000a38 <__aeabi_d2iz>
 8004f92:	4604      	mov	r4, r0
 8004f94:	f7fb fa36 	bl	8000404 <__aeabi_i2d>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fa0:	f7fb f8e2 	bl	8000168 <__aeabi_dsub>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	3430      	adds	r4, #48	; 0x30
 8004faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fb2:	f807 4b01 	strb.w	r4, [r7], #1
 8004fb6:	f7fb fd01 	bl	80009bc <__aeabi_dcmplt>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d174      	bne.n	80050a8 <_dtoa_r+0x648>
 8004fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	4911      	ldr	r1, [pc, #68]	; (800500c <_dtoa_r+0x5ac>)
 8004fc6:	f7fb f8cf 	bl	8000168 <__aeabi_dsub>
 8004fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fce:	f7fb fcf5 	bl	80009bc <__aeabi_dcmplt>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	f040 80b6 	bne.w	8005144 <_dtoa_r+0x6e4>
 8004fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fda:	429f      	cmp	r7, r3
 8004fdc:	f43f af7a 	beq.w	8004ed4 <_dtoa_r+0x474>
 8004fe0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <_dtoa_r+0x5b0>)
 8004fe8:	f7fb fa76 	bl	80004d8 <__aeabi_dmul>
 8004fec:	2200      	movs	r2, #0
 8004fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <_dtoa_r+0x5b0>)
 8004ff8:	f7fb fa6e 	bl	80004d8 <__aeabi_dmul>
 8004ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005000:	e7c3      	b.n	8004f8a <_dtoa_r+0x52a>
 8005002:	bf00      	nop
 8005004:	080075b8 	.word	0x080075b8
 8005008:	08007590 	.word	0x08007590
 800500c:	3ff00000 	.word	0x3ff00000
 8005010:	40240000 	.word	0x40240000
 8005014:	401c0000 	.word	0x401c0000
 8005018:	40140000 	.word	0x40140000
 800501c:	3fe00000 	.word	0x3fe00000
 8005020:	4630      	mov	r0, r6
 8005022:	4639      	mov	r1, r7
 8005024:	f7fb fa58 	bl	80004d8 <__aeabi_dmul>
 8005028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800502a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800502e:	9c08      	ldr	r4, [sp, #32]
 8005030:	9314      	str	r3, [sp, #80]	; 0x50
 8005032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005036:	f7fb fcff 	bl	8000a38 <__aeabi_d2iz>
 800503a:	9015      	str	r0, [sp, #84]	; 0x54
 800503c:	f7fb f9e2 	bl	8000404 <__aeabi_i2d>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005048:	f7fb f88e 	bl	8000168 <__aeabi_dsub>
 800504c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800504e:	4606      	mov	r6, r0
 8005050:	3330      	adds	r3, #48	; 0x30
 8005052:	f804 3b01 	strb.w	r3, [r4], #1
 8005056:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005058:	460f      	mov	r7, r1
 800505a:	429c      	cmp	r4, r3
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	d124      	bne.n	80050ac <_dtoa_r+0x64c>
 8005062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005066:	4bb3      	ldr	r3, [pc, #716]	; (8005334 <_dtoa_r+0x8d4>)
 8005068:	f7fb f880 	bl	800016c <__adddf3>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 8005078:	2800      	cmp	r0, #0
 800507a:	d162      	bne.n	8005142 <_dtoa_r+0x6e2>
 800507c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005080:	2000      	movs	r0, #0
 8005082:	49ac      	ldr	r1, [pc, #688]	; (8005334 <_dtoa_r+0x8d4>)
 8005084:	f7fb f870 	bl	8000168 <__aeabi_dsub>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4630      	mov	r0, r6
 800508e:	4639      	mov	r1, r7
 8005090:	f7fb fc94 	bl	80009bc <__aeabi_dcmplt>
 8005094:	2800      	cmp	r0, #0
 8005096:	f43f af1d 	beq.w	8004ed4 <_dtoa_r+0x474>
 800509a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800509c:	1e7b      	subs	r3, r7, #1
 800509e:	9314      	str	r3, [sp, #80]	; 0x50
 80050a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d0f8      	beq.n	800509a <_dtoa_r+0x63a>
 80050a8:	46c1      	mov	r9, r8
 80050aa:	e03a      	b.n	8005122 <_dtoa_r+0x6c2>
 80050ac:	4ba2      	ldr	r3, [pc, #648]	; (8005338 <_dtoa_r+0x8d8>)
 80050ae:	f7fb fa13 	bl	80004d8 <__aeabi_dmul>
 80050b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050b6:	e7bc      	b.n	8005032 <_dtoa_r+0x5d2>
 80050b8:	9f08      	ldr	r7, [sp, #32]
 80050ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c2:	f7fb fb33 	bl	800072c <__aeabi_ddiv>
 80050c6:	f7fb fcb7 	bl	8000a38 <__aeabi_d2iz>
 80050ca:	4604      	mov	r4, r0
 80050cc:	f7fb f99a 	bl	8000404 <__aeabi_i2d>
 80050d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050d4:	f7fb fa00 	bl	80004d8 <__aeabi_dmul>
 80050d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80050dc:	460b      	mov	r3, r1
 80050de:	4602      	mov	r2, r0
 80050e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050e4:	f7fb f840 	bl	8000168 <__aeabi_dsub>
 80050e8:	f807 6b01 	strb.w	r6, [r7], #1
 80050ec:	9e08      	ldr	r6, [sp, #32]
 80050ee:	9b02      	ldr	r3, [sp, #8]
 80050f0:	1bbe      	subs	r6, r7, r6
 80050f2:	42b3      	cmp	r3, r6
 80050f4:	d13a      	bne.n	800516c <_dtoa_r+0x70c>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	f7fb f837 	bl	800016c <__adddf3>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800510a:	f7fb fc75 	bl	80009f8 <__aeabi_dcmpgt>
 800510e:	bb58      	cbnz	r0, 8005168 <_dtoa_r+0x708>
 8005110:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005118:	f7fb fc46 	bl	80009a8 <__aeabi_dcmpeq>
 800511c:	b108      	cbz	r0, 8005122 <_dtoa_r+0x6c2>
 800511e:	07e1      	lsls	r1, r4, #31
 8005120:	d422      	bmi.n	8005168 <_dtoa_r+0x708>
 8005122:	4628      	mov	r0, r5
 8005124:	4651      	mov	r1, sl
 8005126:	f000 faf1 	bl	800570c <_Bfree>
 800512a:	2300      	movs	r3, #0
 800512c:	703b      	strb	r3, [r7, #0]
 800512e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005130:	f109 0001 	add.w	r0, r9, #1
 8005134:	6018      	str	r0, [r3, #0]
 8005136:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005138:	2b00      	cmp	r3, #0
 800513a:	f43f acdf 	beq.w	8004afc <_dtoa_r+0x9c>
 800513e:	601f      	str	r7, [r3, #0]
 8005140:	e4dc      	b.n	8004afc <_dtoa_r+0x9c>
 8005142:	4627      	mov	r7, r4
 8005144:	463b      	mov	r3, r7
 8005146:	461f      	mov	r7, r3
 8005148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800514c:	2a39      	cmp	r2, #57	; 0x39
 800514e:	d107      	bne.n	8005160 <_dtoa_r+0x700>
 8005150:	9a08      	ldr	r2, [sp, #32]
 8005152:	429a      	cmp	r2, r3
 8005154:	d1f7      	bne.n	8005146 <_dtoa_r+0x6e6>
 8005156:	2230      	movs	r2, #48	; 0x30
 8005158:	9908      	ldr	r1, [sp, #32]
 800515a:	f108 0801 	add.w	r8, r8, #1
 800515e:	700a      	strb	r2, [r1, #0]
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	3201      	adds	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e79f      	b.n	80050a8 <_dtoa_r+0x648>
 8005168:	46c8      	mov	r8, r9
 800516a:	e7eb      	b.n	8005144 <_dtoa_r+0x6e4>
 800516c:	2200      	movs	r2, #0
 800516e:	4b72      	ldr	r3, [pc, #456]	; (8005338 <_dtoa_r+0x8d8>)
 8005170:	f7fb f9b2 	bl	80004d8 <__aeabi_dmul>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800517c:	2200      	movs	r2, #0
 800517e:	2300      	movs	r3, #0
 8005180:	f7fb fc12 	bl	80009a8 <__aeabi_dcmpeq>
 8005184:	2800      	cmp	r0, #0
 8005186:	d098      	beq.n	80050ba <_dtoa_r+0x65a>
 8005188:	e7cb      	b.n	8005122 <_dtoa_r+0x6c2>
 800518a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800518c:	2a00      	cmp	r2, #0
 800518e:	f000 80cd 	beq.w	800532c <_dtoa_r+0x8cc>
 8005192:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005194:	2a01      	cmp	r2, #1
 8005196:	f300 80af 	bgt.w	80052f8 <_dtoa_r+0x898>
 800519a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800519c:	2a00      	cmp	r2, #0
 800519e:	f000 80a7 	beq.w	80052f0 <_dtoa_r+0x890>
 80051a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051a8:	9f06      	ldr	r7, [sp, #24]
 80051aa:	9a06      	ldr	r2, [sp, #24]
 80051ac:	2101      	movs	r1, #1
 80051ae:	441a      	add	r2, r3
 80051b0:	9206      	str	r2, [sp, #24]
 80051b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b4:	4628      	mov	r0, r5
 80051b6:	441a      	add	r2, r3
 80051b8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ba:	f000 fb61 	bl	8005880 <__i2b>
 80051be:	4606      	mov	r6, r0
 80051c0:	2f00      	cmp	r7, #0
 80051c2:	dd0c      	ble.n	80051de <_dtoa_r+0x77e>
 80051c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	dd09      	ble.n	80051de <_dtoa_r+0x77e>
 80051ca:	42bb      	cmp	r3, r7
 80051cc:	bfa8      	it	ge
 80051ce:	463b      	movge	r3, r7
 80051d0:	9a06      	ldr	r2, [sp, #24]
 80051d2:	1aff      	subs	r7, r7, r3
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	9206      	str	r2, [sp, #24]
 80051d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	9309      	str	r3, [sp, #36]	; 0x24
 80051de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e0:	b1f3      	cbz	r3, 8005220 <_dtoa_r+0x7c0>
 80051e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a9 	beq.w	800533c <_dtoa_r+0x8dc>
 80051ea:	2c00      	cmp	r4, #0
 80051ec:	dd10      	ble.n	8005210 <_dtoa_r+0x7b0>
 80051ee:	4631      	mov	r1, r6
 80051f0:	4622      	mov	r2, r4
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 fbfe 	bl	80059f4 <__pow5mult>
 80051f8:	4652      	mov	r2, sl
 80051fa:	4601      	mov	r1, r0
 80051fc:	4606      	mov	r6, r0
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 fb54 	bl	80058ac <__multiply>
 8005204:	4680      	mov	r8, r0
 8005206:	4651      	mov	r1, sl
 8005208:	4628      	mov	r0, r5
 800520a:	f000 fa7f 	bl	800570c <_Bfree>
 800520e:	46c2      	mov	sl, r8
 8005210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005212:	1b1a      	subs	r2, r3, r4
 8005214:	d004      	beq.n	8005220 <_dtoa_r+0x7c0>
 8005216:	4651      	mov	r1, sl
 8005218:	4628      	mov	r0, r5
 800521a:	f000 fbeb 	bl	80059f4 <__pow5mult>
 800521e:	4682      	mov	sl, r0
 8005220:	2101      	movs	r1, #1
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fb2c 	bl	8005880 <__i2b>
 8005228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800522a:	4604      	mov	r4, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	f340 8087 	ble.w	8005340 <_dtoa_r+0x8e0>
 8005232:	461a      	mov	r2, r3
 8005234:	4601      	mov	r1, r0
 8005236:	4628      	mov	r0, r5
 8005238:	f000 fbdc 	bl	80059f4 <__pow5mult>
 800523c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800523e:	4604      	mov	r4, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	f340 8080 	ble.w	8005346 <_dtoa_r+0x8e6>
 8005246:	f04f 0800 	mov.w	r8, #0
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005250:	6918      	ldr	r0, [r3, #16]
 8005252:	f000 fac7 	bl	80057e4 <__hi0bits>
 8005256:	f1c0 0020 	rsb	r0, r0, #32
 800525a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525c:	4418      	add	r0, r3
 800525e:	f010 001f 	ands.w	r0, r0, #31
 8005262:	f000 8092 	beq.w	800538a <_dtoa_r+0x92a>
 8005266:	f1c0 0320 	rsb	r3, r0, #32
 800526a:	2b04      	cmp	r3, #4
 800526c:	f340 808a 	ble.w	8005384 <_dtoa_r+0x924>
 8005270:	f1c0 001c 	rsb	r0, r0, #28
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	4407      	add	r7, r0
 8005278:	4403      	add	r3, r0
 800527a:	9306      	str	r3, [sp, #24]
 800527c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800527e:	4403      	add	r3, r0
 8005280:	9309      	str	r3, [sp, #36]	; 0x24
 8005282:	9b06      	ldr	r3, [sp, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	dd05      	ble.n	8005294 <_dtoa_r+0x834>
 8005288:	4651      	mov	r1, sl
 800528a:	461a      	mov	r2, r3
 800528c:	4628      	mov	r0, r5
 800528e:	f000 fc0b 	bl	8005aa8 <__lshift>
 8005292:	4682      	mov	sl, r0
 8005294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	dd05      	ble.n	80052a6 <_dtoa_r+0x846>
 800529a:	4621      	mov	r1, r4
 800529c:	461a      	mov	r2, r3
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 fc02 	bl	8005aa8 <__lshift>
 80052a4:	4604      	mov	r4, r0
 80052a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d070      	beq.n	800538e <_dtoa_r+0x92e>
 80052ac:	4621      	mov	r1, r4
 80052ae:	4650      	mov	r0, sl
 80052b0:	f000 fc66 	bl	8005b80 <__mcmp>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	da6a      	bge.n	800538e <_dtoa_r+0x92e>
 80052b8:	2300      	movs	r3, #0
 80052ba:	4651      	mov	r1, sl
 80052bc:	220a      	movs	r2, #10
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 fa46 	bl	8005750 <__multadd>
 80052c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c6:	4682      	mov	sl, r0
 80052c8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8193 	beq.w	80055f8 <_dtoa_r+0xb98>
 80052d2:	4631      	mov	r1, r6
 80052d4:	2300      	movs	r3, #0
 80052d6:	220a      	movs	r2, #10
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 fa39 	bl	8005750 <__multadd>
 80052de:	f1bb 0f00 	cmp.w	fp, #0
 80052e2:	4606      	mov	r6, r0
 80052e4:	f300 8093 	bgt.w	800540e <_dtoa_r+0x9ae>
 80052e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	dc57      	bgt.n	800539e <_dtoa_r+0x93e>
 80052ee:	e08e      	b.n	800540e <_dtoa_r+0x9ae>
 80052f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052f6:	e756      	b.n	80051a6 <_dtoa_r+0x746>
 80052f8:	9b02      	ldr	r3, [sp, #8]
 80052fa:	1e5c      	subs	r4, r3, #1
 80052fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fe:	42a3      	cmp	r3, r4
 8005300:	bfb7      	itett	lt
 8005302:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005304:	1b1c      	subge	r4, r3, r4
 8005306:	1ae2      	sublt	r2, r4, r3
 8005308:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800530a:	bfbe      	ittt	lt
 800530c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800530e:	189b      	addlt	r3, r3, r2
 8005310:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005312:	9b02      	ldr	r3, [sp, #8]
 8005314:	bfb8      	it	lt
 8005316:	2400      	movlt	r4, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	bfbb      	ittet	lt
 800531c:	9b06      	ldrlt	r3, [sp, #24]
 800531e:	9a02      	ldrlt	r2, [sp, #8]
 8005320:	9f06      	ldrge	r7, [sp, #24]
 8005322:	1a9f      	sublt	r7, r3, r2
 8005324:	bfac      	ite	ge
 8005326:	9b02      	ldrge	r3, [sp, #8]
 8005328:	2300      	movlt	r3, #0
 800532a:	e73e      	b.n	80051aa <_dtoa_r+0x74a>
 800532c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800532e:	9f06      	ldr	r7, [sp, #24]
 8005330:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005332:	e745      	b.n	80051c0 <_dtoa_r+0x760>
 8005334:	3fe00000 	.word	0x3fe00000
 8005338:	40240000 	.word	0x40240000
 800533c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800533e:	e76a      	b.n	8005216 <_dtoa_r+0x7b6>
 8005340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005342:	2b01      	cmp	r3, #1
 8005344:	dc19      	bgt.n	800537a <_dtoa_r+0x91a>
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	b9bb      	cbnz	r3, 800537a <_dtoa_r+0x91a>
 800534a:	9b05      	ldr	r3, [sp, #20]
 800534c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005350:	b99b      	cbnz	r3, 800537a <_dtoa_r+0x91a>
 8005352:	9b05      	ldr	r3, [sp, #20]
 8005354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005358:	0d1b      	lsrs	r3, r3, #20
 800535a:	051b      	lsls	r3, r3, #20
 800535c:	b183      	cbz	r3, 8005380 <_dtoa_r+0x920>
 800535e:	f04f 0801 	mov.w	r8, #1
 8005362:	9b06      	ldr	r3, [sp, #24]
 8005364:	3301      	adds	r3, #1
 8005366:	9306      	str	r3, [sp, #24]
 8005368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536a:	3301      	adds	r3, #1
 800536c:	9309      	str	r3, [sp, #36]	; 0x24
 800536e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005370:	2b00      	cmp	r3, #0
 8005372:	f47f af6a 	bne.w	800524a <_dtoa_r+0x7ea>
 8005376:	2001      	movs	r0, #1
 8005378:	e76f      	b.n	800525a <_dtoa_r+0x7fa>
 800537a:	f04f 0800 	mov.w	r8, #0
 800537e:	e7f6      	b.n	800536e <_dtoa_r+0x90e>
 8005380:	4698      	mov	r8, r3
 8005382:	e7f4      	b.n	800536e <_dtoa_r+0x90e>
 8005384:	f43f af7d 	beq.w	8005282 <_dtoa_r+0x822>
 8005388:	4618      	mov	r0, r3
 800538a:	301c      	adds	r0, #28
 800538c:	e772      	b.n	8005274 <_dtoa_r+0x814>
 800538e:	9b02      	ldr	r3, [sp, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	dc36      	bgt.n	8005402 <_dtoa_r+0x9a2>
 8005394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005396:	2b02      	cmp	r3, #2
 8005398:	dd33      	ble.n	8005402 <_dtoa_r+0x9a2>
 800539a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800539e:	f1bb 0f00 	cmp.w	fp, #0
 80053a2:	d10d      	bne.n	80053c0 <_dtoa_r+0x960>
 80053a4:	4621      	mov	r1, r4
 80053a6:	465b      	mov	r3, fp
 80053a8:	2205      	movs	r2, #5
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f9d0 	bl	8005750 <__multadd>
 80053b0:	4601      	mov	r1, r0
 80053b2:	4604      	mov	r4, r0
 80053b4:	4650      	mov	r0, sl
 80053b6:	f000 fbe3 	bl	8005b80 <__mcmp>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f73f adb6 	bgt.w	8004f2c <_dtoa_r+0x4cc>
 80053c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053c2:	9f08      	ldr	r7, [sp, #32]
 80053c4:	ea6f 0903 	mvn.w	r9, r3
 80053c8:	f04f 0800 	mov.w	r8, #0
 80053cc:	4621      	mov	r1, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f99c 	bl	800570c <_Bfree>
 80053d4:	2e00      	cmp	r6, #0
 80053d6:	f43f aea4 	beq.w	8005122 <_dtoa_r+0x6c2>
 80053da:	f1b8 0f00 	cmp.w	r8, #0
 80053de:	d005      	beq.n	80053ec <_dtoa_r+0x98c>
 80053e0:	45b0      	cmp	r8, r6
 80053e2:	d003      	beq.n	80053ec <_dtoa_r+0x98c>
 80053e4:	4641      	mov	r1, r8
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f990 	bl	800570c <_Bfree>
 80053ec:	4631      	mov	r1, r6
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 f98c 	bl	800570c <_Bfree>
 80053f4:	e695      	b.n	8005122 <_dtoa_r+0x6c2>
 80053f6:	2400      	movs	r4, #0
 80053f8:	4626      	mov	r6, r4
 80053fa:	e7e1      	b.n	80053c0 <_dtoa_r+0x960>
 80053fc:	46c1      	mov	r9, r8
 80053fe:	4626      	mov	r6, r4
 8005400:	e594      	b.n	8004f2c <_dtoa_r+0x4cc>
 8005402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005404:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80fc 	beq.w	8005606 <_dtoa_r+0xba6>
 800540e:	2f00      	cmp	r7, #0
 8005410:	dd05      	ble.n	800541e <_dtoa_r+0x9be>
 8005412:	4631      	mov	r1, r6
 8005414:	463a      	mov	r2, r7
 8005416:	4628      	mov	r0, r5
 8005418:	f000 fb46 	bl	8005aa8 <__lshift>
 800541c:	4606      	mov	r6, r0
 800541e:	f1b8 0f00 	cmp.w	r8, #0
 8005422:	d05c      	beq.n	80054de <_dtoa_r+0xa7e>
 8005424:	4628      	mov	r0, r5
 8005426:	6871      	ldr	r1, [r6, #4]
 8005428:	f000 f930 	bl	800568c <_Balloc>
 800542c:	4607      	mov	r7, r0
 800542e:	b928      	cbnz	r0, 800543c <_dtoa_r+0x9dc>
 8005430:	4602      	mov	r2, r0
 8005432:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005436:	4b7e      	ldr	r3, [pc, #504]	; (8005630 <_dtoa_r+0xbd0>)
 8005438:	f7ff bb26 	b.w	8004a88 <_dtoa_r+0x28>
 800543c:	6932      	ldr	r2, [r6, #16]
 800543e:	f106 010c 	add.w	r1, r6, #12
 8005442:	3202      	adds	r2, #2
 8005444:	0092      	lsls	r2, r2, #2
 8005446:	300c      	adds	r0, #12
 8005448:	f000 f912 	bl	8005670 <memcpy>
 800544c:	2201      	movs	r2, #1
 800544e:	4639      	mov	r1, r7
 8005450:	4628      	mov	r0, r5
 8005452:	f000 fb29 	bl	8005aa8 <__lshift>
 8005456:	46b0      	mov	r8, r6
 8005458:	4606      	mov	r6, r0
 800545a:	9b08      	ldr	r3, [sp, #32]
 800545c:	3301      	adds	r3, #1
 800545e:	9302      	str	r3, [sp, #8]
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	445b      	add	r3, fp
 8005464:	930a      	str	r3, [sp, #40]	; 0x28
 8005466:	9b04      	ldr	r3, [sp, #16]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	9309      	str	r3, [sp, #36]	; 0x24
 800546e:	9b02      	ldr	r3, [sp, #8]
 8005470:	4621      	mov	r1, r4
 8005472:	4650      	mov	r0, sl
 8005474:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005478:	f7ff fa62 	bl	8004940 <quorem>
 800547c:	4603      	mov	r3, r0
 800547e:	4641      	mov	r1, r8
 8005480:	3330      	adds	r3, #48	; 0x30
 8005482:	9004      	str	r0, [sp, #16]
 8005484:	4650      	mov	r0, sl
 8005486:	930b      	str	r3, [sp, #44]	; 0x2c
 8005488:	f000 fb7a 	bl	8005b80 <__mcmp>
 800548c:	4632      	mov	r2, r6
 800548e:	9006      	str	r0, [sp, #24]
 8005490:	4621      	mov	r1, r4
 8005492:	4628      	mov	r0, r5
 8005494:	f000 fb90 	bl	8005bb8 <__mdiff>
 8005498:	68c2      	ldr	r2, [r0, #12]
 800549a:	4607      	mov	r7, r0
 800549c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800549e:	bb02      	cbnz	r2, 80054e2 <_dtoa_r+0xa82>
 80054a0:	4601      	mov	r1, r0
 80054a2:	4650      	mov	r0, sl
 80054a4:	f000 fb6c 	bl	8005b80 <__mcmp>
 80054a8:	4602      	mov	r2, r0
 80054aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ac:	4639      	mov	r1, r7
 80054ae:	4628      	mov	r0, r5
 80054b0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80054b4:	f000 f92a 	bl	800570c <_Bfree>
 80054b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054bc:	9f02      	ldr	r7, [sp, #8]
 80054be:	ea43 0102 	orr.w	r1, r3, r2
 80054c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c4:	430b      	orrs	r3, r1
 80054c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054c8:	d10d      	bne.n	80054e6 <_dtoa_r+0xa86>
 80054ca:	2b39      	cmp	r3, #57	; 0x39
 80054cc:	d027      	beq.n	800551e <_dtoa_r+0xabe>
 80054ce:	9a06      	ldr	r2, [sp, #24]
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	dd01      	ble.n	80054d8 <_dtoa_r+0xa78>
 80054d4:	9b04      	ldr	r3, [sp, #16]
 80054d6:	3331      	adds	r3, #49	; 0x31
 80054d8:	f88b 3000 	strb.w	r3, [fp]
 80054dc:	e776      	b.n	80053cc <_dtoa_r+0x96c>
 80054de:	4630      	mov	r0, r6
 80054e0:	e7b9      	b.n	8005456 <_dtoa_r+0x9f6>
 80054e2:	2201      	movs	r2, #1
 80054e4:	e7e2      	b.n	80054ac <_dtoa_r+0xa4c>
 80054e6:	9906      	ldr	r1, [sp, #24]
 80054e8:	2900      	cmp	r1, #0
 80054ea:	db04      	blt.n	80054f6 <_dtoa_r+0xa96>
 80054ec:	9822      	ldr	r0, [sp, #136]	; 0x88
 80054ee:	4301      	orrs	r1, r0
 80054f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054f2:	4301      	orrs	r1, r0
 80054f4:	d120      	bne.n	8005538 <_dtoa_r+0xad8>
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	ddee      	ble.n	80054d8 <_dtoa_r+0xa78>
 80054fa:	4651      	mov	r1, sl
 80054fc:	2201      	movs	r2, #1
 80054fe:	4628      	mov	r0, r5
 8005500:	9302      	str	r3, [sp, #8]
 8005502:	f000 fad1 	bl	8005aa8 <__lshift>
 8005506:	4621      	mov	r1, r4
 8005508:	4682      	mov	sl, r0
 800550a:	f000 fb39 	bl	8005b80 <__mcmp>
 800550e:	2800      	cmp	r0, #0
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	dc02      	bgt.n	800551a <_dtoa_r+0xaba>
 8005514:	d1e0      	bne.n	80054d8 <_dtoa_r+0xa78>
 8005516:	07da      	lsls	r2, r3, #31
 8005518:	d5de      	bpl.n	80054d8 <_dtoa_r+0xa78>
 800551a:	2b39      	cmp	r3, #57	; 0x39
 800551c:	d1da      	bne.n	80054d4 <_dtoa_r+0xa74>
 800551e:	2339      	movs	r3, #57	; 0x39
 8005520:	f88b 3000 	strb.w	r3, [fp]
 8005524:	463b      	mov	r3, r7
 8005526:	461f      	mov	r7, r3
 8005528:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800552c:	3b01      	subs	r3, #1
 800552e:	2a39      	cmp	r2, #57	; 0x39
 8005530:	d050      	beq.n	80055d4 <_dtoa_r+0xb74>
 8005532:	3201      	adds	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e749      	b.n	80053cc <_dtoa_r+0x96c>
 8005538:	2a00      	cmp	r2, #0
 800553a:	dd03      	ble.n	8005544 <_dtoa_r+0xae4>
 800553c:	2b39      	cmp	r3, #57	; 0x39
 800553e:	d0ee      	beq.n	800551e <_dtoa_r+0xabe>
 8005540:	3301      	adds	r3, #1
 8005542:	e7c9      	b.n	80054d8 <_dtoa_r+0xa78>
 8005544:	9a02      	ldr	r2, [sp, #8]
 8005546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005548:	f802 3c01 	strb.w	r3, [r2, #-1]
 800554c:	428a      	cmp	r2, r1
 800554e:	d02a      	beq.n	80055a6 <_dtoa_r+0xb46>
 8005550:	4651      	mov	r1, sl
 8005552:	2300      	movs	r3, #0
 8005554:	220a      	movs	r2, #10
 8005556:	4628      	mov	r0, r5
 8005558:	f000 f8fa 	bl	8005750 <__multadd>
 800555c:	45b0      	cmp	r8, r6
 800555e:	4682      	mov	sl, r0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	f04f 020a 	mov.w	r2, #10
 8005568:	4641      	mov	r1, r8
 800556a:	4628      	mov	r0, r5
 800556c:	d107      	bne.n	800557e <_dtoa_r+0xb1e>
 800556e:	f000 f8ef 	bl	8005750 <__multadd>
 8005572:	4680      	mov	r8, r0
 8005574:	4606      	mov	r6, r0
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	3301      	adds	r3, #1
 800557a:	9302      	str	r3, [sp, #8]
 800557c:	e777      	b.n	800546e <_dtoa_r+0xa0e>
 800557e:	f000 f8e7 	bl	8005750 <__multadd>
 8005582:	4631      	mov	r1, r6
 8005584:	4680      	mov	r8, r0
 8005586:	2300      	movs	r3, #0
 8005588:	220a      	movs	r2, #10
 800558a:	4628      	mov	r0, r5
 800558c:	f000 f8e0 	bl	8005750 <__multadd>
 8005590:	4606      	mov	r6, r0
 8005592:	e7f0      	b.n	8005576 <_dtoa_r+0xb16>
 8005594:	f1bb 0f00 	cmp.w	fp, #0
 8005598:	bfcc      	ite	gt
 800559a:	465f      	movgt	r7, fp
 800559c:	2701      	movle	r7, #1
 800559e:	f04f 0800 	mov.w	r8, #0
 80055a2:	9a08      	ldr	r2, [sp, #32]
 80055a4:	4417      	add	r7, r2
 80055a6:	4651      	mov	r1, sl
 80055a8:	2201      	movs	r2, #1
 80055aa:	4628      	mov	r0, r5
 80055ac:	9302      	str	r3, [sp, #8]
 80055ae:	f000 fa7b 	bl	8005aa8 <__lshift>
 80055b2:	4621      	mov	r1, r4
 80055b4:	4682      	mov	sl, r0
 80055b6:	f000 fae3 	bl	8005b80 <__mcmp>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	dcb2      	bgt.n	8005524 <_dtoa_r+0xac4>
 80055be:	d102      	bne.n	80055c6 <_dtoa_r+0xb66>
 80055c0:	9b02      	ldr	r3, [sp, #8]
 80055c2:	07db      	lsls	r3, r3, #31
 80055c4:	d4ae      	bmi.n	8005524 <_dtoa_r+0xac4>
 80055c6:	463b      	mov	r3, r7
 80055c8:	461f      	mov	r7, r3
 80055ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055ce:	2a30      	cmp	r2, #48	; 0x30
 80055d0:	d0fa      	beq.n	80055c8 <_dtoa_r+0xb68>
 80055d2:	e6fb      	b.n	80053cc <_dtoa_r+0x96c>
 80055d4:	9a08      	ldr	r2, [sp, #32]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d1a5      	bne.n	8005526 <_dtoa_r+0xac6>
 80055da:	2331      	movs	r3, #49	; 0x31
 80055dc:	f109 0901 	add.w	r9, r9, #1
 80055e0:	7013      	strb	r3, [r2, #0]
 80055e2:	e6f3      	b.n	80053cc <_dtoa_r+0x96c>
 80055e4:	4b13      	ldr	r3, [pc, #76]	; (8005634 <_dtoa_r+0xbd4>)
 80055e6:	f7ff baa7 	b.w	8004b38 <_dtoa_r+0xd8>
 80055ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f47f aa80 	bne.w	8004af2 <_dtoa_r+0x92>
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <_dtoa_r+0xbd8>)
 80055f4:	f7ff baa0 	b.w	8004b38 <_dtoa_r+0xd8>
 80055f8:	f1bb 0f00 	cmp.w	fp, #0
 80055fc:	dc03      	bgt.n	8005606 <_dtoa_r+0xba6>
 80055fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005600:	2b02      	cmp	r3, #2
 8005602:	f73f aecc 	bgt.w	800539e <_dtoa_r+0x93e>
 8005606:	9f08      	ldr	r7, [sp, #32]
 8005608:	4621      	mov	r1, r4
 800560a:	4650      	mov	r0, sl
 800560c:	f7ff f998 	bl	8004940 <quorem>
 8005610:	9a08      	ldr	r2, [sp, #32]
 8005612:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005616:	f807 3b01 	strb.w	r3, [r7], #1
 800561a:	1aba      	subs	r2, r7, r2
 800561c:	4593      	cmp	fp, r2
 800561e:	ddb9      	ble.n	8005594 <_dtoa_r+0xb34>
 8005620:	4651      	mov	r1, sl
 8005622:	2300      	movs	r3, #0
 8005624:	220a      	movs	r2, #10
 8005626:	4628      	mov	r0, r5
 8005628:	f000 f892 	bl	8005750 <__multadd>
 800562c:	4682      	mov	sl, r0
 800562e:	e7eb      	b.n	8005608 <_dtoa_r+0xba8>
 8005630:	0800751b 	.word	0x0800751b
 8005634:	08007474 	.word	0x08007474
 8005638:	08007498 	.word	0x08007498

0800563c <_localeconv_r>:
 800563c:	4800      	ldr	r0, [pc, #0]	; (8005640 <_localeconv_r+0x4>)
 800563e:	4770      	bx	lr
 8005640:	200001f0 	.word	0x200001f0

08005644 <malloc>:
 8005644:	4b02      	ldr	r3, [pc, #8]	; (8005650 <malloc+0xc>)
 8005646:	4601      	mov	r1, r0
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	f000 bbfb 	b.w	8005e44 <_malloc_r>
 800564e:	bf00      	nop
 8005650:	2000009c 	.word	0x2000009c

08005654 <memchr>:
 8005654:	4603      	mov	r3, r0
 8005656:	b510      	push	{r4, lr}
 8005658:	b2c9      	uxtb	r1, r1
 800565a:	4402      	add	r2, r0
 800565c:	4293      	cmp	r3, r2
 800565e:	4618      	mov	r0, r3
 8005660:	d101      	bne.n	8005666 <memchr+0x12>
 8005662:	2000      	movs	r0, #0
 8005664:	e003      	b.n	800566e <memchr+0x1a>
 8005666:	7804      	ldrb	r4, [r0, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	428c      	cmp	r4, r1
 800566c:	d1f6      	bne.n	800565c <memchr+0x8>
 800566e:	bd10      	pop	{r4, pc}

08005670 <memcpy>:
 8005670:	440a      	add	r2, r1
 8005672:	4291      	cmp	r1, r2
 8005674:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005678:	d100      	bne.n	800567c <memcpy+0xc>
 800567a:	4770      	bx	lr
 800567c:	b510      	push	{r4, lr}
 800567e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005682:	4291      	cmp	r1, r2
 8005684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005688:	d1f9      	bne.n	800567e <memcpy+0xe>
 800568a:	bd10      	pop	{r4, pc}

0800568c <_Balloc>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005690:	4604      	mov	r4, r0
 8005692:	460d      	mov	r5, r1
 8005694:	b976      	cbnz	r6, 80056b4 <_Balloc+0x28>
 8005696:	2010      	movs	r0, #16
 8005698:	f7ff ffd4 	bl	8005644 <malloc>
 800569c:	4602      	mov	r2, r0
 800569e:	6260      	str	r0, [r4, #36]	; 0x24
 80056a0:	b920      	cbnz	r0, 80056ac <_Balloc+0x20>
 80056a2:	2166      	movs	r1, #102	; 0x66
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <_Balloc+0x78>)
 80056a6:	4818      	ldr	r0, [pc, #96]	; (8005708 <_Balloc+0x7c>)
 80056a8:	f000 fd92 	bl	80061d0 <__assert_func>
 80056ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056b0:	6006      	str	r6, [r0, #0]
 80056b2:	60c6      	str	r6, [r0, #12]
 80056b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056b6:	68f3      	ldr	r3, [r6, #12]
 80056b8:	b183      	cbz	r3, 80056dc <_Balloc+0x50>
 80056ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056c2:	b9b8      	cbnz	r0, 80056f4 <_Balloc+0x68>
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f605 	lsl.w	r6, r1, r5
 80056ca:	1d72      	adds	r2, r6, #5
 80056cc:	4620      	mov	r0, r4
 80056ce:	0092      	lsls	r2, r2, #2
 80056d0:	f000 fb5e 	bl	8005d90 <_calloc_r>
 80056d4:	b160      	cbz	r0, 80056f0 <_Balloc+0x64>
 80056d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056da:	e00e      	b.n	80056fa <_Balloc+0x6e>
 80056dc:	2221      	movs	r2, #33	; 0x21
 80056de:	2104      	movs	r1, #4
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 fb55 	bl	8005d90 <_calloc_r>
 80056e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e8:	60f0      	str	r0, [r6, #12]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e4      	bne.n	80056ba <_Balloc+0x2e>
 80056f0:	2000      	movs	r0, #0
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	6802      	ldr	r2, [r0, #0]
 80056f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056fa:	2300      	movs	r3, #0
 80056fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005700:	e7f7      	b.n	80056f2 <_Balloc+0x66>
 8005702:	bf00      	nop
 8005704:	080074a5 	.word	0x080074a5
 8005708:	0800752c 	.word	0x0800752c

0800570c <_Bfree>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005710:	4605      	mov	r5, r0
 8005712:	460c      	mov	r4, r1
 8005714:	b976      	cbnz	r6, 8005734 <_Bfree+0x28>
 8005716:	2010      	movs	r0, #16
 8005718:	f7ff ff94 	bl	8005644 <malloc>
 800571c:	4602      	mov	r2, r0
 800571e:	6268      	str	r0, [r5, #36]	; 0x24
 8005720:	b920      	cbnz	r0, 800572c <_Bfree+0x20>
 8005722:	218a      	movs	r1, #138	; 0x8a
 8005724:	4b08      	ldr	r3, [pc, #32]	; (8005748 <_Bfree+0x3c>)
 8005726:	4809      	ldr	r0, [pc, #36]	; (800574c <_Bfree+0x40>)
 8005728:	f000 fd52 	bl	80061d0 <__assert_func>
 800572c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005730:	6006      	str	r6, [r0, #0]
 8005732:	60c6      	str	r6, [r0, #12]
 8005734:	b13c      	cbz	r4, 8005746 <_Bfree+0x3a>
 8005736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005738:	6862      	ldr	r2, [r4, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005740:	6021      	str	r1, [r4, #0]
 8005742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	080074a5 	.word	0x080074a5
 800574c:	0800752c 	.word	0x0800752c

08005750 <__multadd>:
 8005750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005754:	4698      	mov	r8, r3
 8005756:	460c      	mov	r4, r1
 8005758:	2300      	movs	r3, #0
 800575a:	690e      	ldr	r6, [r1, #16]
 800575c:	4607      	mov	r7, r0
 800575e:	f101 0014 	add.w	r0, r1, #20
 8005762:	6805      	ldr	r5, [r0, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	b2a9      	uxth	r1, r5
 8005768:	fb02 8101 	mla	r1, r2, r1, r8
 800576c:	0c2d      	lsrs	r5, r5, #16
 800576e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005772:	fb02 c505 	mla	r5, r2, r5, ip
 8005776:	b289      	uxth	r1, r1
 8005778:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800577c:	429e      	cmp	r6, r3
 800577e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005782:	f840 1b04 	str.w	r1, [r0], #4
 8005786:	dcec      	bgt.n	8005762 <__multadd+0x12>
 8005788:	f1b8 0f00 	cmp.w	r8, #0
 800578c:	d022      	beq.n	80057d4 <__multadd+0x84>
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	42b3      	cmp	r3, r6
 8005792:	dc19      	bgt.n	80057c8 <__multadd+0x78>
 8005794:	6861      	ldr	r1, [r4, #4]
 8005796:	4638      	mov	r0, r7
 8005798:	3101      	adds	r1, #1
 800579a:	f7ff ff77 	bl	800568c <_Balloc>
 800579e:	4605      	mov	r5, r0
 80057a0:	b928      	cbnz	r0, 80057ae <__multadd+0x5e>
 80057a2:	4602      	mov	r2, r0
 80057a4:	21b5      	movs	r1, #181	; 0xb5
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <__multadd+0x8c>)
 80057a8:	480d      	ldr	r0, [pc, #52]	; (80057e0 <__multadd+0x90>)
 80057aa:	f000 fd11 	bl	80061d0 <__assert_func>
 80057ae:	6922      	ldr	r2, [r4, #16]
 80057b0:	f104 010c 	add.w	r1, r4, #12
 80057b4:	3202      	adds	r2, #2
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	300c      	adds	r0, #12
 80057ba:	f7ff ff59 	bl	8005670 <memcpy>
 80057be:	4621      	mov	r1, r4
 80057c0:	4638      	mov	r0, r7
 80057c2:	f7ff ffa3 	bl	800570c <_Bfree>
 80057c6:	462c      	mov	r4, r5
 80057c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80057cc:	3601      	adds	r6, #1
 80057ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80057d2:	6126      	str	r6, [r4, #16]
 80057d4:	4620      	mov	r0, r4
 80057d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057da:	bf00      	nop
 80057dc:	0800751b 	.word	0x0800751b
 80057e0:	0800752c 	.word	0x0800752c

080057e4 <__hi0bits>:
 80057e4:	0c02      	lsrs	r2, r0, #16
 80057e6:	0412      	lsls	r2, r2, #16
 80057e8:	4603      	mov	r3, r0
 80057ea:	b9ca      	cbnz	r2, 8005820 <__hi0bits+0x3c>
 80057ec:	0403      	lsls	r3, r0, #16
 80057ee:	2010      	movs	r0, #16
 80057f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057f4:	bf04      	itt	eq
 80057f6:	021b      	lsleq	r3, r3, #8
 80057f8:	3008      	addeq	r0, #8
 80057fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057fe:	bf04      	itt	eq
 8005800:	011b      	lsleq	r3, r3, #4
 8005802:	3004      	addeq	r0, #4
 8005804:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005808:	bf04      	itt	eq
 800580a:	009b      	lsleq	r3, r3, #2
 800580c:	3002      	addeq	r0, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	db05      	blt.n	800581e <__hi0bits+0x3a>
 8005812:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005816:	f100 0001 	add.w	r0, r0, #1
 800581a:	bf08      	it	eq
 800581c:	2020      	moveq	r0, #32
 800581e:	4770      	bx	lr
 8005820:	2000      	movs	r0, #0
 8005822:	e7e5      	b.n	80057f0 <__hi0bits+0xc>

08005824 <__lo0bits>:
 8005824:	6803      	ldr	r3, [r0, #0]
 8005826:	4602      	mov	r2, r0
 8005828:	f013 0007 	ands.w	r0, r3, #7
 800582c:	d00b      	beq.n	8005846 <__lo0bits+0x22>
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d422      	bmi.n	8005878 <__lo0bits+0x54>
 8005832:	0798      	lsls	r0, r3, #30
 8005834:	bf49      	itett	mi
 8005836:	085b      	lsrmi	r3, r3, #1
 8005838:	089b      	lsrpl	r3, r3, #2
 800583a:	2001      	movmi	r0, #1
 800583c:	6013      	strmi	r3, [r2, #0]
 800583e:	bf5c      	itt	pl
 8005840:	2002      	movpl	r0, #2
 8005842:	6013      	strpl	r3, [r2, #0]
 8005844:	4770      	bx	lr
 8005846:	b299      	uxth	r1, r3
 8005848:	b909      	cbnz	r1, 800584e <__lo0bits+0x2a>
 800584a:	2010      	movs	r0, #16
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005852:	bf04      	itt	eq
 8005854:	0a1b      	lsreq	r3, r3, #8
 8005856:	3008      	addeq	r0, #8
 8005858:	0719      	lsls	r1, r3, #28
 800585a:	bf04      	itt	eq
 800585c:	091b      	lsreq	r3, r3, #4
 800585e:	3004      	addeq	r0, #4
 8005860:	0799      	lsls	r1, r3, #30
 8005862:	bf04      	itt	eq
 8005864:	089b      	lsreq	r3, r3, #2
 8005866:	3002      	addeq	r0, #2
 8005868:	07d9      	lsls	r1, r3, #31
 800586a:	d403      	bmi.n	8005874 <__lo0bits+0x50>
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	f100 0001 	add.w	r0, r0, #1
 8005872:	d003      	beq.n	800587c <__lo0bits+0x58>
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4770      	bx	lr
 8005878:	2000      	movs	r0, #0
 800587a:	4770      	bx	lr
 800587c:	2020      	movs	r0, #32
 800587e:	4770      	bx	lr

08005880 <__i2b>:
 8005880:	b510      	push	{r4, lr}
 8005882:	460c      	mov	r4, r1
 8005884:	2101      	movs	r1, #1
 8005886:	f7ff ff01 	bl	800568c <_Balloc>
 800588a:	4602      	mov	r2, r0
 800588c:	b928      	cbnz	r0, 800589a <__i2b+0x1a>
 800588e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__i2b+0x24>)
 8005894:	4804      	ldr	r0, [pc, #16]	; (80058a8 <__i2b+0x28>)
 8005896:	f000 fc9b 	bl	80061d0 <__assert_func>
 800589a:	2301      	movs	r3, #1
 800589c:	6144      	str	r4, [r0, #20]
 800589e:	6103      	str	r3, [r0, #16]
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	0800751b 	.word	0x0800751b
 80058a8:	0800752c 	.word	0x0800752c

080058ac <__multiply>:
 80058ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	4614      	mov	r4, r2
 80058b2:	690a      	ldr	r2, [r1, #16]
 80058b4:	6923      	ldr	r3, [r4, #16]
 80058b6:	460d      	mov	r5, r1
 80058b8:	429a      	cmp	r2, r3
 80058ba:	bfbe      	ittt	lt
 80058bc:	460b      	movlt	r3, r1
 80058be:	4625      	movlt	r5, r4
 80058c0:	461c      	movlt	r4, r3
 80058c2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80058c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058ca:	68ab      	ldr	r3, [r5, #8]
 80058cc:	6869      	ldr	r1, [r5, #4]
 80058ce:	eb0a 0709 	add.w	r7, sl, r9
 80058d2:	42bb      	cmp	r3, r7
 80058d4:	b085      	sub	sp, #20
 80058d6:	bfb8      	it	lt
 80058d8:	3101      	addlt	r1, #1
 80058da:	f7ff fed7 	bl	800568c <_Balloc>
 80058de:	b930      	cbnz	r0, 80058ee <__multiply+0x42>
 80058e0:	4602      	mov	r2, r0
 80058e2:	f240 115d 	movw	r1, #349	; 0x15d
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <__multiply+0x140>)
 80058e8:	4841      	ldr	r0, [pc, #260]	; (80059f0 <__multiply+0x144>)
 80058ea:	f000 fc71 	bl	80061d0 <__assert_func>
 80058ee:	f100 0614 	add.w	r6, r0, #20
 80058f2:	4633      	mov	r3, r6
 80058f4:	2200      	movs	r2, #0
 80058f6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80058fa:	4543      	cmp	r3, r8
 80058fc:	d31e      	bcc.n	800593c <__multiply+0x90>
 80058fe:	f105 0c14 	add.w	ip, r5, #20
 8005902:	f104 0314 	add.w	r3, r4, #20
 8005906:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800590a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800590e:	9202      	str	r2, [sp, #8]
 8005910:	ebac 0205 	sub.w	r2, ip, r5
 8005914:	3a15      	subs	r2, #21
 8005916:	f022 0203 	bic.w	r2, r2, #3
 800591a:	3204      	adds	r2, #4
 800591c:	f105 0115 	add.w	r1, r5, #21
 8005920:	458c      	cmp	ip, r1
 8005922:	bf38      	it	cc
 8005924:	2204      	movcc	r2, #4
 8005926:	9201      	str	r2, [sp, #4]
 8005928:	9a02      	ldr	r2, [sp, #8]
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	d808      	bhi.n	8005942 <__multiply+0x96>
 8005930:	2f00      	cmp	r7, #0
 8005932:	dc55      	bgt.n	80059e0 <__multiply+0x134>
 8005934:	6107      	str	r7, [r0, #16]
 8005936:	b005      	add	sp, #20
 8005938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593c:	f843 2b04 	str.w	r2, [r3], #4
 8005940:	e7db      	b.n	80058fa <__multiply+0x4e>
 8005942:	f8b3 a000 	ldrh.w	sl, [r3]
 8005946:	f1ba 0f00 	cmp.w	sl, #0
 800594a:	d020      	beq.n	800598e <__multiply+0xe2>
 800594c:	46b1      	mov	r9, r6
 800594e:	2200      	movs	r2, #0
 8005950:	f105 0e14 	add.w	lr, r5, #20
 8005954:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005958:	f8d9 b000 	ldr.w	fp, [r9]
 800595c:	b2a1      	uxth	r1, r4
 800595e:	fa1f fb8b 	uxth.w	fp, fp
 8005962:	fb0a b101 	mla	r1, sl, r1, fp
 8005966:	4411      	add	r1, r2
 8005968:	f8d9 2000 	ldr.w	r2, [r9]
 800596c:	0c24      	lsrs	r4, r4, #16
 800596e:	0c12      	lsrs	r2, r2, #16
 8005970:	fb0a 2404 	mla	r4, sl, r4, r2
 8005974:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005978:	b289      	uxth	r1, r1
 800597a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800597e:	45f4      	cmp	ip, lr
 8005980:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005984:	f849 1b04 	str.w	r1, [r9], #4
 8005988:	d8e4      	bhi.n	8005954 <__multiply+0xa8>
 800598a:	9901      	ldr	r1, [sp, #4]
 800598c:	5072      	str	r2, [r6, r1]
 800598e:	9a03      	ldr	r2, [sp, #12]
 8005990:	3304      	adds	r3, #4
 8005992:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005996:	f1b9 0f00 	cmp.w	r9, #0
 800599a:	d01f      	beq.n	80059dc <__multiply+0x130>
 800599c:	46b6      	mov	lr, r6
 800599e:	f04f 0a00 	mov.w	sl, #0
 80059a2:	6834      	ldr	r4, [r6, #0]
 80059a4:	f105 0114 	add.w	r1, r5, #20
 80059a8:	880a      	ldrh	r2, [r1, #0]
 80059aa:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059ae:	b2a4      	uxth	r4, r4
 80059b0:	fb09 b202 	mla	r2, r9, r2, fp
 80059b4:	4492      	add	sl, r2
 80059b6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059ba:	f84e 4b04 	str.w	r4, [lr], #4
 80059be:	f851 4b04 	ldr.w	r4, [r1], #4
 80059c2:	f8be 2000 	ldrh.w	r2, [lr]
 80059c6:	0c24      	lsrs	r4, r4, #16
 80059c8:	fb09 2404 	mla	r4, r9, r4, r2
 80059cc:	458c      	cmp	ip, r1
 80059ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80059d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80059d6:	d8e7      	bhi.n	80059a8 <__multiply+0xfc>
 80059d8:	9a01      	ldr	r2, [sp, #4]
 80059da:	50b4      	str	r4, [r6, r2]
 80059dc:	3604      	adds	r6, #4
 80059de:	e7a3      	b.n	8005928 <__multiply+0x7c>
 80059e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1a5      	bne.n	8005934 <__multiply+0x88>
 80059e8:	3f01      	subs	r7, #1
 80059ea:	e7a1      	b.n	8005930 <__multiply+0x84>
 80059ec:	0800751b 	.word	0x0800751b
 80059f0:	0800752c 	.word	0x0800752c

080059f4 <__pow5mult>:
 80059f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f8:	4615      	mov	r5, r2
 80059fa:	f012 0203 	ands.w	r2, r2, #3
 80059fe:	4606      	mov	r6, r0
 8005a00:	460f      	mov	r7, r1
 8005a02:	d007      	beq.n	8005a14 <__pow5mult+0x20>
 8005a04:	4c25      	ldr	r4, [pc, #148]	; (8005a9c <__pow5mult+0xa8>)
 8005a06:	3a01      	subs	r2, #1
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a0e:	f7ff fe9f 	bl	8005750 <__multadd>
 8005a12:	4607      	mov	r7, r0
 8005a14:	10ad      	asrs	r5, r5, #2
 8005a16:	d03d      	beq.n	8005a94 <__pow5mult+0xa0>
 8005a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a1a:	b97c      	cbnz	r4, 8005a3c <__pow5mult+0x48>
 8005a1c:	2010      	movs	r0, #16
 8005a1e:	f7ff fe11 	bl	8005644 <malloc>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6270      	str	r0, [r6, #36]	; 0x24
 8005a26:	b928      	cbnz	r0, 8005a34 <__pow5mult+0x40>
 8005a28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a2c:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <__pow5mult+0xac>)
 8005a2e:	481d      	ldr	r0, [pc, #116]	; (8005aa4 <__pow5mult+0xb0>)
 8005a30:	f000 fbce 	bl	80061d0 <__assert_func>
 8005a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a38:	6004      	str	r4, [r0, #0]
 8005a3a:	60c4      	str	r4, [r0, #12]
 8005a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a44:	b94c      	cbnz	r4, 8005a5a <__pow5mult+0x66>
 8005a46:	f240 2171 	movw	r1, #625	; 0x271
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ff18 	bl	8005880 <__i2b>
 8005a50:	2300      	movs	r3, #0
 8005a52:	4604      	mov	r4, r0
 8005a54:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a58:	6003      	str	r3, [r0, #0]
 8005a5a:	f04f 0900 	mov.w	r9, #0
 8005a5e:	07eb      	lsls	r3, r5, #31
 8005a60:	d50a      	bpl.n	8005a78 <__pow5mult+0x84>
 8005a62:	4639      	mov	r1, r7
 8005a64:	4622      	mov	r2, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff ff20 	bl	80058ac <__multiply>
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4639      	mov	r1, r7
 8005a70:	4630      	mov	r0, r6
 8005a72:	f7ff fe4b 	bl	800570c <_Bfree>
 8005a76:	4647      	mov	r7, r8
 8005a78:	106d      	asrs	r5, r5, #1
 8005a7a:	d00b      	beq.n	8005a94 <__pow5mult+0xa0>
 8005a7c:	6820      	ldr	r0, [r4, #0]
 8005a7e:	b938      	cbnz	r0, 8005a90 <__pow5mult+0x9c>
 8005a80:	4622      	mov	r2, r4
 8005a82:	4621      	mov	r1, r4
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff ff11 	bl	80058ac <__multiply>
 8005a8a:	6020      	str	r0, [r4, #0]
 8005a8c:	f8c0 9000 	str.w	r9, [r0]
 8005a90:	4604      	mov	r4, r0
 8005a92:	e7e4      	b.n	8005a5e <__pow5mult+0x6a>
 8005a94:	4638      	mov	r0, r7
 8005a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08007680 	.word	0x08007680
 8005aa0:	080074a5 	.word	0x080074a5
 8005aa4:	0800752c 	.word	0x0800752c

08005aa8 <__lshift>:
 8005aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aac:	460c      	mov	r4, r1
 8005aae:	4607      	mov	r7, r0
 8005ab0:	4691      	mov	r9, r2
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	6849      	ldr	r1, [r1, #4]
 8005ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ac0:	f108 0601 	add.w	r6, r8, #1
 8005ac4:	42b3      	cmp	r3, r6
 8005ac6:	db0b      	blt.n	8005ae0 <__lshift+0x38>
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff fddf 	bl	800568c <_Balloc>
 8005ace:	4605      	mov	r5, r0
 8005ad0:	b948      	cbnz	r0, 8005ae6 <__lshift+0x3e>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <__lshift+0xd0>)
 8005ada:	4828      	ldr	r0, [pc, #160]	; (8005b7c <__lshift+0xd4>)
 8005adc:	f000 fb78 	bl	80061d0 <__assert_func>
 8005ae0:	3101      	adds	r1, #1
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	e7ee      	b.n	8005ac4 <__lshift+0x1c>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f100 0114 	add.w	r1, r0, #20
 8005aec:	f100 0210 	add.w	r2, r0, #16
 8005af0:	4618      	mov	r0, r3
 8005af2:	4553      	cmp	r3, sl
 8005af4:	db33      	blt.n	8005b5e <__lshift+0xb6>
 8005af6:	6920      	ldr	r0, [r4, #16]
 8005af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005afc:	f104 0314 	add.w	r3, r4, #20
 8005b00:	f019 091f 	ands.w	r9, r9, #31
 8005b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b0c:	d02b      	beq.n	8005b66 <__lshift+0xbe>
 8005b0e:	468a      	mov	sl, r1
 8005b10:	2200      	movs	r2, #0
 8005b12:	f1c9 0e20 	rsb	lr, r9, #32
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	fa00 f009 	lsl.w	r0, r0, r9
 8005b1c:	4302      	orrs	r2, r0
 8005b1e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b26:	459c      	cmp	ip, r3
 8005b28:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b2c:	d8f3      	bhi.n	8005b16 <__lshift+0x6e>
 8005b2e:	ebac 0304 	sub.w	r3, ip, r4
 8005b32:	3b15      	subs	r3, #21
 8005b34:	f023 0303 	bic.w	r3, r3, #3
 8005b38:	3304      	adds	r3, #4
 8005b3a:	f104 0015 	add.w	r0, r4, #21
 8005b3e:	4584      	cmp	ip, r0
 8005b40:	bf38      	it	cc
 8005b42:	2304      	movcc	r3, #4
 8005b44:	50ca      	str	r2, [r1, r3]
 8005b46:	b10a      	cbz	r2, 8005b4c <__lshift+0xa4>
 8005b48:	f108 0602 	add.w	r6, r8, #2
 8005b4c:	3e01      	subs	r6, #1
 8005b4e:	4638      	mov	r0, r7
 8005b50:	4621      	mov	r1, r4
 8005b52:	612e      	str	r6, [r5, #16]
 8005b54:	f7ff fdda 	bl	800570c <_Bfree>
 8005b58:	4628      	mov	r0, r5
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b62:	3301      	adds	r3, #1
 8005b64:	e7c5      	b.n	8005af2 <__lshift+0x4a>
 8005b66:	3904      	subs	r1, #4
 8005b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b6c:	459c      	cmp	ip, r3
 8005b6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b72:	d8f9      	bhi.n	8005b68 <__lshift+0xc0>
 8005b74:	e7ea      	b.n	8005b4c <__lshift+0xa4>
 8005b76:	bf00      	nop
 8005b78:	0800751b 	.word	0x0800751b
 8005b7c:	0800752c 	.word	0x0800752c

08005b80 <__mcmp>:
 8005b80:	4603      	mov	r3, r0
 8005b82:	690a      	ldr	r2, [r1, #16]
 8005b84:	6900      	ldr	r0, [r0, #16]
 8005b86:	b530      	push	{r4, r5, lr}
 8005b88:	1a80      	subs	r0, r0, r2
 8005b8a:	d10d      	bne.n	8005ba8 <__mcmp+0x28>
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	3114      	adds	r1, #20
 8005b90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ba0:	4295      	cmp	r5, r2
 8005ba2:	d002      	beq.n	8005baa <__mcmp+0x2a>
 8005ba4:	d304      	bcc.n	8005bb0 <__mcmp+0x30>
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	bd30      	pop	{r4, r5, pc}
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	d3f4      	bcc.n	8005b98 <__mcmp+0x18>
 8005bae:	e7fb      	b.n	8005ba8 <__mcmp+0x28>
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bb4:	e7f8      	b.n	8005ba8 <__mcmp+0x28>
	...

08005bb8 <__mdiff>:
 8005bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4692      	mov	sl, r2
 8005bc6:	f7ff ffdb 	bl	8005b80 <__mcmp>
 8005bca:	1e05      	subs	r5, r0, #0
 8005bcc:	d111      	bne.n	8005bf2 <__mdiff+0x3a>
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f7ff fd5b 	bl	800568c <_Balloc>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	b928      	cbnz	r0, 8005be6 <__mdiff+0x2e>
 8005bda:	f240 2132 	movw	r1, #562	; 0x232
 8005bde:	4b3c      	ldr	r3, [pc, #240]	; (8005cd0 <__mdiff+0x118>)
 8005be0:	483c      	ldr	r0, [pc, #240]	; (8005cd4 <__mdiff+0x11c>)
 8005be2:	f000 faf5 	bl	80061d0 <__assert_func>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005bec:	4610      	mov	r0, r2
 8005bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf2:	bfa4      	itt	ge
 8005bf4:	4653      	movge	r3, sl
 8005bf6:	46a2      	movge	sl, r4
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005bfe:	bfa6      	itte	ge
 8005c00:	461c      	movge	r4, r3
 8005c02:	2500      	movge	r5, #0
 8005c04:	2501      	movlt	r5, #1
 8005c06:	f7ff fd41 	bl	800568c <_Balloc>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	b918      	cbnz	r0, 8005c16 <__mdiff+0x5e>
 8005c0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c12:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <__mdiff+0x118>)
 8005c14:	e7e4      	b.n	8005be0 <__mdiff+0x28>
 8005c16:	f100 0814 	add.w	r8, r0, #20
 8005c1a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005c1e:	60c5      	str	r5, [r0, #12]
 8005c20:	f04f 0c00 	mov.w	ip, #0
 8005c24:	f10a 0514 	add.w	r5, sl, #20
 8005c28:	f10a 0010 	add.w	r0, sl, #16
 8005c2c:	46c2      	mov	sl, r8
 8005c2e:	6926      	ldr	r6, [r4, #16]
 8005c30:	f104 0914 	add.w	r9, r4, #20
 8005c34:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005c38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c3c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005c40:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c44:	fa1f f18b 	uxth.w	r1, fp
 8005c48:	4461      	add	r1, ip
 8005c4a:	fa1f fc83 	uxth.w	ip, r3
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	eba1 010c 	sub.w	r1, r1, ip
 8005c54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c5c:	b289      	uxth	r1, r1
 8005c5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c62:	454e      	cmp	r6, r9
 8005c64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c68:	f84a 3b04 	str.w	r3, [sl], #4
 8005c6c:	d8e6      	bhi.n	8005c3c <__mdiff+0x84>
 8005c6e:	1b33      	subs	r3, r6, r4
 8005c70:	3b15      	subs	r3, #21
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	3415      	adds	r4, #21
 8005c78:	3304      	adds	r3, #4
 8005c7a:	42a6      	cmp	r6, r4
 8005c7c:	bf38      	it	cc
 8005c7e:	2304      	movcc	r3, #4
 8005c80:	441d      	add	r5, r3
 8005c82:	4443      	add	r3, r8
 8005c84:	461e      	mov	r6, r3
 8005c86:	462c      	mov	r4, r5
 8005c88:	4574      	cmp	r4, lr
 8005c8a:	d30e      	bcc.n	8005caa <__mdiff+0xf2>
 8005c8c:	f10e 0103 	add.w	r1, lr, #3
 8005c90:	1b49      	subs	r1, r1, r5
 8005c92:	f021 0103 	bic.w	r1, r1, #3
 8005c96:	3d03      	subs	r5, #3
 8005c98:	45ae      	cmp	lr, r5
 8005c9a:	bf38      	it	cc
 8005c9c:	2100      	movcc	r1, #0
 8005c9e:	4419      	add	r1, r3
 8005ca0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ca4:	b18b      	cbz	r3, 8005cca <__mdiff+0x112>
 8005ca6:	6117      	str	r7, [r2, #16]
 8005ca8:	e7a0      	b.n	8005bec <__mdiff+0x34>
 8005caa:	f854 8b04 	ldr.w	r8, [r4], #4
 8005cae:	fa1f f188 	uxth.w	r1, r8
 8005cb2:	4461      	add	r1, ip
 8005cb4:	1408      	asrs	r0, r1, #16
 8005cb6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005cba:	b289      	uxth	r1, r1
 8005cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cc4:	f846 1b04 	str.w	r1, [r6], #4
 8005cc8:	e7de      	b.n	8005c88 <__mdiff+0xd0>
 8005cca:	3f01      	subs	r7, #1
 8005ccc:	e7e8      	b.n	8005ca0 <__mdiff+0xe8>
 8005cce:	bf00      	nop
 8005cd0:	0800751b 	.word	0x0800751b
 8005cd4:	0800752c 	.word	0x0800752c

08005cd8 <__d2b>:
 8005cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005cdc:	2101      	movs	r1, #1
 8005cde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ce2:	4690      	mov	r8, r2
 8005ce4:	461d      	mov	r5, r3
 8005ce6:	f7ff fcd1 	bl	800568c <_Balloc>
 8005cea:	4604      	mov	r4, r0
 8005cec:	b930      	cbnz	r0, 8005cfc <__d2b+0x24>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	f240 310a 	movw	r1, #778	; 0x30a
 8005cf4:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <__d2b+0xb0>)
 8005cf6:	4825      	ldr	r0, [pc, #148]	; (8005d8c <__d2b+0xb4>)
 8005cf8:	f000 fa6a 	bl	80061d0 <__assert_func>
 8005cfc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005d00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005d04:	bb2d      	cbnz	r5, 8005d52 <__d2b+0x7a>
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	f1b8 0300 	subs.w	r3, r8, #0
 8005d0c:	d026      	beq.n	8005d5c <__d2b+0x84>
 8005d0e:	4668      	mov	r0, sp
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	f7ff fd87 	bl	8005824 <__lo0bits>
 8005d16:	9900      	ldr	r1, [sp, #0]
 8005d18:	b1f0      	cbz	r0, 8005d58 <__d2b+0x80>
 8005d1a:	9a01      	ldr	r2, [sp, #4]
 8005d1c:	f1c0 0320 	rsb	r3, r0, #32
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	430b      	orrs	r3, r1
 8005d26:	40c2      	lsrs	r2, r0
 8005d28:	6163      	str	r3, [r4, #20]
 8005d2a:	9201      	str	r2, [sp, #4]
 8005d2c:	9b01      	ldr	r3, [sp, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf14      	ite	ne
 8005d32:	2102      	movne	r1, #2
 8005d34:	2101      	moveq	r1, #1
 8005d36:	61a3      	str	r3, [r4, #24]
 8005d38:	6121      	str	r1, [r4, #16]
 8005d3a:	b1c5      	cbz	r5, 8005d6e <__d2b+0x96>
 8005d3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d40:	4405      	add	r5, r0
 8005d42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d46:	603d      	str	r5, [r7, #0]
 8005d48:	6030      	str	r0, [r6, #0]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	b002      	add	sp, #8
 8005d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d56:	e7d6      	b.n	8005d06 <__d2b+0x2e>
 8005d58:	6161      	str	r1, [r4, #20]
 8005d5a:	e7e7      	b.n	8005d2c <__d2b+0x54>
 8005d5c:	a801      	add	r0, sp, #4
 8005d5e:	f7ff fd61 	bl	8005824 <__lo0bits>
 8005d62:	2101      	movs	r1, #1
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	6121      	str	r1, [r4, #16]
 8005d68:	6163      	str	r3, [r4, #20]
 8005d6a:	3020      	adds	r0, #32
 8005d6c:	e7e5      	b.n	8005d3a <__d2b+0x62>
 8005d6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005d72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d76:	6038      	str	r0, [r7, #0]
 8005d78:	6918      	ldr	r0, [r3, #16]
 8005d7a:	f7ff fd33 	bl	80057e4 <__hi0bits>
 8005d7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005d82:	6031      	str	r1, [r6, #0]
 8005d84:	e7e1      	b.n	8005d4a <__d2b+0x72>
 8005d86:	bf00      	nop
 8005d88:	0800751b 	.word	0x0800751b
 8005d8c:	0800752c 	.word	0x0800752c

08005d90 <_calloc_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	fb02 f501 	mul.w	r5, r2, r1
 8005d96:	4629      	mov	r1, r5
 8005d98:	f000 f854 	bl	8005e44 <_malloc_r>
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	b118      	cbz	r0, 8005da8 <_calloc_r+0x18>
 8005da0:	462a      	mov	r2, r5
 8005da2:	2100      	movs	r1, #0
 8005da4:	f7fe f90a 	bl	8003fbc <memset>
 8005da8:	4620      	mov	r0, r4
 8005daa:	bd38      	pop	{r3, r4, r5, pc}

08005dac <_free_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4605      	mov	r5, r0
 8005db0:	2900      	cmp	r1, #0
 8005db2:	d043      	beq.n	8005e3c <_free_r+0x90>
 8005db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db8:	1f0c      	subs	r4, r1, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bfb8      	it	lt
 8005dbe:	18e4      	addlt	r4, r4, r3
 8005dc0:	f000 fa62 	bl	8006288 <__malloc_lock>
 8005dc4:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <_free_r+0x94>)
 8005dc6:	6813      	ldr	r3, [r2, #0]
 8005dc8:	4610      	mov	r0, r2
 8005dca:	b933      	cbnz	r3, 8005dda <_free_r+0x2e>
 8005dcc:	6063      	str	r3, [r4, #4]
 8005dce:	6014      	str	r4, [r2, #0]
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd6:	f000 ba5d 	b.w	8006294 <__malloc_unlock>
 8005dda:	42a3      	cmp	r3, r4
 8005ddc:	d90a      	bls.n	8005df4 <_free_r+0x48>
 8005dde:	6821      	ldr	r1, [r4, #0]
 8005de0:	1862      	adds	r2, r4, r1
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bf01      	itttt	eq
 8005de6:	681a      	ldreq	r2, [r3, #0]
 8005de8:	685b      	ldreq	r3, [r3, #4]
 8005dea:	1852      	addeq	r2, r2, r1
 8005dec:	6022      	streq	r2, [r4, #0]
 8005dee:	6063      	str	r3, [r4, #4]
 8005df0:	6004      	str	r4, [r0, #0]
 8005df2:	e7ed      	b.n	8005dd0 <_free_r+0x24>
 8005df4:	461a      	mov	r2, r3
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	b10b      	cbz	r3, 8005dfe <_free_r+0x52>
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	d9fa      	bls.n	8005df4 <_free_r+0x48>
 8005dfe:	6811      	ldr	r1, [r2, #0]
 8005e00:	1850      	adds	r0, r2, r1
 8005e02:	42a0      	cmp	r0, r4
 8005e04:	d10b      	bne.n	8005e1e <_free_r+0x72>
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	4401      	add	r1, r0
 8005e0a:	1850      	adds	r0, r2, r1
 8005e0c:	4283      	cmp	r3, r0
 8005e0e:	6011      	str	r1, [r2, #0]
 8005e10:	d1de      	bne.n	8005dd0 <_free_r+0x24>
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4401      	add	r1, r0
 8005e18:	6011      	str	r1, [r2, #0]
 8005e1a:	6053      	str	r3, [r2, #4]
 8005e1c:	e7d8      	b.n	8005dd0 <_free_r+0x24>
 8005e1e:	d902      	bls.n	8005e26 <_free_r+0x7a>
 8005e20:	230c      	movs	r3, #12
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	e7d4      	b.n	8005dd0 <_free_r+0x24>
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	1821      	adds	r1, r4, r0
 8005e2a:	428b      	cmp	r3, r1
 8005e2c:	bf01      	itttt	eq
 8005e2e:	6819      	ldreq	r1, [r3, #0]
 8005e30:	685b      	ldreq	r3, [r3, #4]
 8005e32:	1809      	addeq	r1, r1, r0
 8005e34:	6021      	streq	r1, [r4, #0]
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	6054      	str	r4, [r2, #4]
 8005e3a:	e7c9      	b.n	8005dd0 <_free_r+0x24>
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000488 	.word	0x20000488

08005e44 <_malloc_r>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	1ccd      	adds	r5, r1, #3
 8005e48:	f025 0503 	bic.w	r5, r5, #3
 8005e4c:	3508      	adds	r5, #8
 8005e4e:	2d0c      	cmp	r5, #12
 8005e50:	bf38      	it	cc
 8005e52:	250c      	movcc	r5, #12
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	4606      	mov	r6, r0
 8005e58:	db01      	blt.n	8005e5e <_malloc_r+0x1a>
 8005e5a:	42a9      	cmp	r1, r5
 8005e5c:	d903      	bls.n	8005e66 <_malloc_r+0x22>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	2000      	movs	r0, #0
 8005e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e66:	f000 fa0f 	bl	8006288 <__malloc_lock>
 8005e6a:	4921      	ldr	r1, [pc, #132]	; (8005ef0 <_malloc_r+0xac>)
 8005e6c:	680a      	ldr	r2, [r1, #0]
 8005e6e:	4614      	mov	r4, r2
 8005e70:	b99c      	cbnz	r4, 8005e9a <_malloc_r+0x56>
 8005e72:	4f20      	ldr	r7, [pc, #128]	; (8005ef4 <_malloc_r+0xb0>)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	b923      	cbnz	r3, 8005e82 <_malloc_r+0x3e>
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 f998 	bl	80061b0 <_sbrk_r>
 8005e80:	6038      	str	r0, [r7, #0]
 8005e82:	4629      	mov	r1, r5
 8005e84:	4630      	mov	r0, r6
 8005e86:	f000 f993 	bl	80061b0 <_sbrk_r>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	d123      	bne.n	8005ed6 <_malloc_r+0x92>
 8005e8e:	230c      	movs	r3, #12
 8005e90:	4630      	mov	r0, r6
 8005e92:	6033      	str	r3, [r6, #0]
 8005e94:	f000 f9fe 	bl	8006294 <__malloc_unlock>
 8005e98:	e7e3      	b.n	8005e62 <_malloc_r+0x1e>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	1b5b      	subs	r3, r3, r5
 8005e9e:	d417      	bmi.n	8005ed0 <_malloc_r+0x8c>
 8005ea0:	2b0b      	cmp	r3, #11
 8005ea2:	d903      	bls.n	8005eac <_malloc_r+0x68>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	441c      	add	r4, r3
 8005ea8:	6025      	str	r5, [r4, #0]
 8005eaa:	e004      	b.n	8005eb6 <_malloc_r+0x72>
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	42a2      	cmp	r2, r4
 8005eb0:	bf0c      	ite	eq
 8005eb2:	600b      	streq	r3, [r1, #0]
 8005eb4:	6053      	strne	r3, [r2, #4]
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f000 f9ec 	bl	8006294 <__malloc_unlock>
 8005ebc:	f104 000b 	add.w	r0, r4, #11
 8005ec0:	1d23      	adds	r3, r4, #4
 8005ec2:	f020 0007 	bic.w	r0, r0, #7
 8005ec6:	1ac2      	subs	r2, r0, r3
 8005ec8:	d0cc      	beq.n	8005e64 <_malloc_r+0x20>
 8005eca:	1a1b      	subs	r3, r3, r0
 8005ecc:	50a3      	str	r3, [r4, r2]
 8005ece:	e7c9      	b.n	8005e64 <_malloc_r+0x20>
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	6864      	ldr	r4, [r4, #4]
 8005ed4:	e7cc      	b.n	8005e70 <_malloc_r+0x2c>
 8005ed6:	1cc4      	adds	r4, r0, #3
 8005ed8:	f024 0403 	bic.w	r4, r4, #3
 8005edc:	42a0      	cmp	r0, r4
 8005ede:	d0e3      	beq.n	8005ea8 <_malloc_r+0x64>
 8005ee0:	1a21      	subs	r1, r4, r0
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f964 	bl	80061b0 <_sbrk_r>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d1dd      	bne.n	8005ea8 <_malloc_r+0x64>
 8005eec:	e7cf      	b.n	8005e8e <_malloc_r+0x4a>
 8005eee:	bf00      	nop
 8005ef0:	20000488 	.word	0x20000488
 8005ef4:	2000048c 	.word	0x2000048c

08005ef8 <__ssputs_r>:
 8005ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	688e      	ldr	r6, [r1, #8]
 8005efe:	4682      	mov	sl, r0
 8005f00:	429e      	cmp	r6, r3
 8005f02:	460c      	mov	r4, r1
 8005f04:	4690      	mov	r8, r2
 8005f06:	461f      	mov	r7, r3
 8005f08:	d838      	bhi.n	8005f7c <__ssputs_r+0x84>
 8005f0a:	898a      	ldrh	r2, [r1, #12]
 8005f0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f10:	d032      	beq.n	8005f78 <__ssputs_r+0x80>
 8005f12:	6825      	ldr	r5, [r4, #0]
 8005f14:	6909      	ldr	r1, [r1, #16]
 8005f16:	3301      	adds	r3, #1
 8005f18:	eba5 0901 	sub.w	r9, r5, r1
 8005f1c:	6965      	ldr	r5, [r4, #20]
 8005f1e:	444b      	add	r3, r9
 8005f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f28:	106d      	asrs	r5, r5, #1
 8005f2a:	429d      	cmp	r5, r3
 8005f2c:	bf38      	it	cc
 8005f2e:	461d      	movcc	r5, r3
 8005f30:	0553      	lsls	r3, r2, #21
 8005f32:	d531      	bpl.n	8005f98 <__ssputs_r+0xa0>
 8005f34:	4629      	mov	r1, r5
 8005f36:	f7ff ff85 	bl	8005e44 <_malloc_r>
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	b950      	cbnz	r0, 8005f54 <__ssputs_r+0x5c>
 8005f3e:	230c      	movs	r3, #12
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f44:	f8ca 3000 	str.w	r3, [sl]
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f54:	464a      	mov	r2, r9
 8005f56:	6921      	ldr	r1, [r4, #16]
 8005f58:	f7ff fb8a 	bl	8005670 <memcpy>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	6126      	str	r6, [r4, #16]
 8005f6a:	444e      	add	r6, r9
 8005f6c:	6026      	str	r6, [r4, #0]
 8005f6e:	463e      	mov	r6, r7
 8005f70:	6165      	str	r5, [r4, #20]
 8005f72:	eba5 0509 	sub.w	r5, r5, r9
 8005f76:	60a5      	str	r5, [r4, #8]
 8005f78:	42be      	cmp	r6, r7
 8005f7a:	d900      	bls.n	8005f7e <__ssputs_r+0x86>
 8005f7c:	463e      	mov	r6, r7
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4641      	mov	r1, r8
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	f000 f966 	bl	8006254 <memmove>
 8005f88:	68a3      	ldr	r3, [r4, #8]
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	1b9b      	subs	r3, r3, r6
 8005f8e:	4432      	add	r2, r6
 8005f90:	2000      	movs	r0, #0
 8005f92:	60a3      	str	r3, [r4, #8]
 8005f94:	6022      	str	r2, [r4, #0]
 8005f96:	e7db      	b.n	8005f50 <__ssputs_r+0x58>
 8005f98:	462a      	mov	r2, r5
 8005f9a:	f000 f981 	bl	80062a0 <_realloc_r>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d1e1      	bne.n	8005f68 <__ssputs_r+0x70>
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	6921      	ldr	r1, [r4, #16]
 8005fa8:	f7ff ff00 	bl	8005dac <_free_r>
 8005fac:	e7c7      	b.n	8005f3e <__ssputs_r+0x46>
	...

08005fb0 <_svfiprintf_r>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	4698      	mov	r8, r3
 8005fb6:	898b      	ldrh	r3, [r1, #12]
 8005fb8:	4607      	mov	r7, r0
 8005fba:	061b      	lsls	r3, r3, #24
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	b09d      	sub	sp, #116	; 0x74
 8005fc2:	d50e      	bpl.n	8005fe2 <_svfiprintf_r+0x32>
 8005fc4:	690b      	ldr	r3, [r1, #16]
 8005fc6:	b963      	cbnz	r3, 8005fe2 <_svfiprintf_r+0x32>
 8005fc8:	2140      	movs	r1, #64	; 0x40
 8005fca:	f7ff ff3b 	bl	8005e44 <_malloc_r>
 8005fce:	6028      	str	r0, [r5, #0]
 8005fd0:	6128      	str	r0, [r5, #16]
 8005fd2:	b920      	cbnz	r0, 8005fde <_svfiprintf_r+0x2e>
 8005fd4:	230c      	movs	r3, #12
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fdc:	e0d1      	b.n	8006182 <_svfiprintf_r+0x1d2>
 8005fde:	2340      	movs	r3, #64	; 0x40
 8005fe0:	616b      	str	r3, [r5, #20]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe6:	2320      	movs	r3, #32
 8005fe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fec:	2330      	movs	r3, #48	; 0x30
 8005fee:	f04f 0901 	mov.w	r9, #1
 8005ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ff6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800619c <_svfiprintf_r+0x1ec>
 8005ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ffe:	4623      	mov	r3, r4
 8006000:	469a      	mov	sl, r3
 8006002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006006:	b10a      	cbz	r2, 800600c <_svfiprintf_r+0x5c>
 8006008:	2a25      	cmp	r2, #37	; 0x25
 800600a:	d1f9      	bne.n	8006000 <_svfiprintf_r+0x50>
 800600c:	ebba 0b04 	subs.w	fp, sl, r4
 8006010:	d00b      	beq.n	800602a <_svfiprintf_r+0x7a>
 8006012:	465b      	mov	r3, fp
 8006014:	4622      	mov	r2, r4
 8006016:	4629      	mov	r1, r5
 8006018:	4638      	mov	r0, r7
 800601a:	f7ff ff6d 	bl	8005ef8 <__ssputs_r>
 800601e:	3001      	adds	r0, #1
 8006020:	f000 80aa 	beq.w	8006178 <_svfiprintf_r+0x1c8>
 8006024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006026:	445a      	add	r2, fp
 8006028:	9209      	str	r2, [sp, #36]	; 0x24
 800602a:	f89a 3000 	ldrb.w	r3, [sl]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80a2 	beq.w	8006178 <_svfiprintf_r+0x1c8>
 8006034:	2300      	movs	r3, #0
 8006036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800603a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800603e:	f10a 0a01 	add.w	sl, sl, #1
 8006042:	9304      	str	r3, [sp, #16]
 8006044:	9307      	str	r3, [sp, #28]
 8006046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800604a:	931a      	str	r3, [sp, #104]	; 0x68
 800604c:	4654      	mov	r4, sl
 800604e:	2205      	movs	r2, #5
 8006050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006054:	4851      	ldr	r0, [pc, #324]	; (800619c <_svfiprintf_r+0x1ec>)
 8006056:	f7ff fafd 	bl	8005654 <memchr>
 800605a:	9a04      	ldr	r2, [sp, #16]
 800605c:	b9d8      	cbnz	r0, 8006096 <_svfiprintf_r+0xe6>
 800605e:	06d0      	lsls	r0, r2, #27
 8006060:	bf44      	itt	mi
 8006062:	2320      	movmi	r3, #32
 8006064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006068:	0711      	lsls	r1, r2, #28
 800606a:	bf44      	itt	mi
 800606c:	232b      	movmi	r3, #43	; 0x2b
 800606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006072:	f89a 3000 	ldrb.w	r3, [sl]
 8006076:	2b2a      	cmp	r3, #42	; 0x2a
 8006078:	d015      	beq.n	80060a6 <_svfiprintf_r+0xf6>
 800607a:	4654      	mov	r4, sl
 800607c:	2000      	movs	r0, #0
 800607e:	f04f 0c0a 	mov.w	ip, #10
 8006082:	9a07      	ldr	r2, [sp, #28]
 8006084:	4621      	mov	r1, r4
 8006086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800608a:	3b30      	subs	r3, #48	; 0x30
 800608c:	2b09      	cmp	r3, #9
 800608e:	d94e      	bls.n	800612e <_svfiprintf_r+0x17e>
 8006090:	b1b0      	cbz	r0, 80060c0 <_svfiprintf_r+0x110>
 8006092:	9207      	str	r2, [sp, #28]
 8006094:	e014      	b.n	80060c0 <_svfiprintf_r+0x110>
 8006096:	eba0 0308 	sub.w	r3, r0, r8
 800609a:	fa09 f303 	lsl.w	r3, r9, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	46a2      	mov	sl, r4
 80060a2:	9304      	str	r3, [sp, #16]
 80060a4:	e7d2      	b.n	800604c <_svfiprintf_r+0x9c>
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	1d19      	adds	r1, r3, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	9103      	str	r1, [sp, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	bfbb      	ittet	lt
 80060b2:	425b      	neglt	r3, r3
 80060b4:	f042 0202 	orrlt.w	r2, r2, #2
 80060b8:	9307      	strge	r3, [sp, #28]
 80060ba:	9307      	strlt	r3, [sp, #28]
 80060bc:	bfb8      	it	lt
 80060be:	9204      	strlt	r2, [sp, #16]
 80060c0:	7823      	ldrb	r3, [r4, #0]
 80060c2:	2b2e      	cmp	r3, #46	; 0x2e
 80060c4:	d10c      	bne.n	80060e0 <_svfiprintf_r+0x130>
 80060c6:	7863      	ldrb	r3, [r4, #1]
 80060c8:	2b2a      	cmp	r3, #42	; 0x2a
 80060ca:	d135      	bne.n	8006138 <_svfiprintf_r+0x188>
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	3402      	adds	r4, #2
 80060d0:	1d1a      	adds	r2, r3, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	9203      	str	r2, [sp, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bfb8      	it	lt
 80060da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80060de:	9305      	str	r3, [sp, #20]
 80060e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061ac <_svfiprintf_r+0x1fc>
 80060e4:	2203      	movs	r2, #3
 80060e6:	4650      	mov	r0, sl
 80060e8:	7821      	ldrb	r1, [r4, #0]
 80060ea:	f7ff fab3 	bl	8005654 <memchr>
 80060ee:	b140      	cbz	r0, 8006102 <_svfiprintf_r+0x152>
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	eba0 000a 	sub.w	r0, r0, sl
 80060f6:	fa03 f000 	lsl.w	r0, r3, r0
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	3401      	adds	r4, #1
 80060fe:	4303      	orrs	r3, r0
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006106:	2206      	movs	r2, #6
 8006108:	4825      	ldr	r0, [pc, #148]	; (80061a0 <_svfiprintf_r+0x1f0>)
 800610a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800610e:	f7ff faa1 	bl	8005654 <memchr>
 8006112:	2800      	cmp	r0, #0
 8006114:	d038      	beq.n	8006188 <_svfiprintf_r+0x1d8>
 8006116:	4b23      	ldr	r3, [pc, #140]	; (80061a4 <_svfiprintf_r+0x1f4>)
 8006118:	bb1b      	cbnz	r3, 8006162 <_svfiprintf_r+0x1b2>
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	3307      	adds	r3, #7
 800611e:	f023 0307 	bic.w	r3, r3, #7
 8006122:	3308      	adds	r3, #8
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	4433      	add	r3, r6
 800612a:	9309      	str	r3, [sp, #36]	; 0x24
 800612c:	e767      	b.n	8005ffe <_svfiprintf_r+0x4e>
 800612e:	460c      	mov	r4, r1
 8006130:	2001      	movs	r0, #1
 8006132:	fb0c 3202 	mla	r2, ip, r2, r3
 8006136:	e7a5      	b.n	8006084 <_svfiprintf_r+0xd4>
 8006138:	2300      	movs	r3, #0
 800613a:	f04f 0c0a 	mov.w	ip, #10
 800613e:	4619      	mov	r1, r3
 8006140:	3401      	adds	r4, #1
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	4620      	mov	r0, r4
 8006146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800614a:	3a30      	subs	r2, #48	; 0x30
 800614c:	2a09      	cmp	r2, #9
 800614e:	d903      	bls.n	8006158 <_svfiprintf_r+0x1a8>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0c5      	beq.n	80060e0 <_svfiprintf_r+0x130>
 8006154:	9105      	str	r1, [sp, #20]
 8006156:	e7c3      	b.n	80060e0 <_svfiprintf_r+0x130>
 8006158:	4604      	mov	r4, r0
 800615a:	2301      	movs	r3, #1
 800615c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006160:	e7f0      	b.n	8006144 <_svfiprintf_r+0x194>
 8006162:	ab03      	add	r3, sp, #12
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	462a      	mov	r2, r5
 8006168:	4638      	mov	r0, r7
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <_svfiprintf_r+0x1f8>)
 800616c:	a904      	add	r1, sp, #16
 800616e:	f7fd ffcb 	bl	8004108 <_printf_float>
 8006172:	1c42      	adds	r2, r0, #1
 8006174:	4606      	mov	r6, r0
 8006176:	d1d6      	bne.n	8006126 <_svfiprintf_r+0x176>
 8006178:	89ab      	ldrh	r3, [r5, #12]
 800617a:	065b      	lsls	r3, r3, #25
 800617c:	f53f af2c 	bmi.w	8005fd8 <_svfiprintf_r+0x28>
 8006180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006182:	b01d      	add	sp, #116	; 0x74
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	ab03      	add	r3, sp, #12
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	462a      	mov	r2, r5
 800618e:	4638      	mov	r0, r7
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <_svfiprintf_r+0x1f8>)
 8006192:	a904      	add	r1, sp, #16
 8006194:	f7fe fa54 	bl	8004640 <_printf_i>
 8006198:	e7eb      	b.n	8006172 <_svfiprintf_r+0x1c2>
 800619a:	bf00      	nop
 800619c:	0800768c 	.word	0x0800768c
 80061a0:	08007696 	.word	0x08007696
 80061a4:	08004109 	.word	0x08004109
 80061a8:	08005ef9 	.word	0x08005ef9
 80061ac:	08007692 	.word	0x08007692

080061b0 <_sbrk_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	2300      	movs	r3, #0
 80061b4:	4d05      	ldr	r5, [pc, #20]	; (80061cc <_sbrk_r+0x1c>)
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fb fd4c 	bl	8001c58 <_sbrk>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_sbrk_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_sbrk_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	200005c8 	.word	0x200005c8

080061d0 <__assert_func>:
 80061d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061d2:	4614      	mov	r4, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <__assert_func+0x2c>)
 80061d8:	4605      	mov	r5, r0
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68d8      	ldr	r0, [r3, #12]
 80061de:	b14c      	cbz	r4, 80061f4 <__assert_func+0x24>
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <__assert_func+0x30>)
 80061e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061e6:	9100      	str	r1, [sp, #0]
 80061e8:	462b      	mov	r3, r5
 80061ea:	4906      	ldr	r1, [pc, #24]	; (8006204 <__assert_func+0x34>)
 80061ec:	f000 f80e 	bl	800620c <fiprintf>
 80061f0:	f000 faa2 	bl	8006738 <abort>
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <__assert_func+0x38>)
 80061f6:	461c      	mov	r4, r3
 80061f8:	e7f3      	b.n	80061e2 <__assert_func+0x12>
 80061fa:	bf00      	nop
 80061fc:	2000009c 	.word	0x2000009c
 8006200:	0800769d 	.word	0x0800769d
 8006204:	080076aa 	.word	0x080076aa
 8006208:	080076d8 	.word	0x080076d8

0800620c <fiprintf>:
 800620c:	b40e      	push	{r1, r2, r3}
 800620e:	b503      	push	{r0, r1, lr}
 8006210:	4601      	mov	r1, r0
 8006212:	ab03      	add	r3, sp, #12
 8006214:	4805      	ldr	r0, [pc, #20]	; (800622c <fiprintf+0x20>)
 8006216:	f853 2b04 	ldr.w	r2, [r3], #4
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	f000 f88d 	bl	800633c <_vfiprintf_r>
 8006222:	b002      	add	sp, #8
 8006224:	f85d eb04 	ldr.w	lr, [sp], #4
 8006228:	b003      	add	sp, #12
 800622a:	4770      	bx	lr
 800622c:	2000009c 	.word	0x2000009c

08006230 <__ascii_mbtowc>:
 8006230:	b082      	sub	sp, #8
 8006232:	b901      	cbnz	r1, 8006236 <__ascii_mbtowc+0x6>
 8006234:	a901      	add	r1, sp, #4
 8006236:	b142      	cbz	r2, 800624a <__ascii_mbtowc+0x1a>
 8006238:	b14b      	cbz	r3, 800624e <__ascii_mbtowc+0x1e>
 800623a:	7813      	ldrb	r3, [r2, #0]
 800623c:	600b      	str	r3, [r1, #0]
 800623e:	7812      	ldrb	r2, [r2, #0]
 8006240:	1e10      	subs	r0, r2, #0
 8006242:	bf18      	it	ne
 8006244:	2001      	movne	r0, #1
 8006246:	b002      	add	sp, #8
 8006248:	4770      	bx	lr
 800624a:	4610      	mov	r0, r2
 800624c:	e7fb      	b.n	8006246 <__ascii_mbtowc+0x16>
 800624e:	f06f 0001 	mvn.w	r0, #1
 8006252:	e7f8      	b.n	8006246 <__ascii_mbtowc+0x16>

08006254 <memmove>:
 8006254:	4288      	cmp	r0, r1
 8006256:	b510      	push	{r4, lr}
 8006258:	eb01 0402 	add.w	r4, r1, r2
 800625c:	d902      	bls.n	8006264 <memmove+0x10>
 800625e:	4284      	cmp	r4, r0
 8006260:	4623      	mov	r3, r4
 8006262:	d807      	bhi.n	8006274 <memmove+0x20>
 8006264:	1e43      	subs	r3, r0, #1
 8006266:	42a1      	cmp	r1, r4
 8006268:	d008      	beq.n	800627c <memmove+0x28>
 800626a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800626e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006272:	e7f8      	b.n	8006266 <memmove+0x12>
 8006274:	4601      	mov	r1, r0
 8006276:	4402      	add	r2, r0
 8006278:	428a      	cmp	r2, r1
 800627a:	d100      	bne.n	800627e <memmove+0x2a>
 800627c:	bd10      	pop	{r4, pc}
 800627e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006286:	e7f7      	b.n	8006278 <memmove+0x24>

08006288 <__malloc_lock>:
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <__malloc_lock+0x8>)
 800628a:	f000 bc15 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 800628e:	bf00      	nop
 8006290:	200005d0 	.word	0x200005d0

08006294 <__malloc_unlock>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__malloc_unlock+0x8>)
 8006296:	f000 bc10 	b.w	8006aba <__retarget_lock_release_recursive>
 800629a:	bf00      	nop
 800629c:	200005d0 	.word	0x200005d0

080062a0 <_realloc_r>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	4607      	mov	r7, r0
 80062a4:	4614      	mov	r4, r2
 80062a6:	460e      	mov	r6, r1
 80062a8:	b921      	cbnz	r1, 80062b4 <_realloc_r+0x14>
 80062aa:	4611      	mov	r1, r2
 80062ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062b0:	f7ff bdc8 	b.w	8005e44 <_malloc_r>
 80062b4:	b922      	cbnz	r2, 80062c0 <_realloc_r+0x20>
 80062b6:	f7ff fd79 	bl	8005dac <_free_r>
 80062ba:	4625      	mov	r5, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c0:	f000 fc60 	bl	8006b84 <_malloc_usable_size_r>
 80062c4:	42a0      	cmp	r0, r4
 80062c6:	d20f      	bcs.n	80062e8 <_realloc_r+0x48>
 80062c8:	4621      	mov	r1, r4
 80062ca:	4638      	mov	r0, r7
 80062cc:	f7ff fdba 	bl	8005e44 <_malloc_r>
 80062d0:	4605      	mov	r5, r0
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d0f2      	beq.n	80062bc <_realloc_r+0x1c>
 80062d6:	4631      	mov	r1, r6
 80062d8:	4622      	mov	r2, r4
 80062da:	f7ff f9c9 	bl	8005670 <memcpy>
 80062de:	4631      	mov	r1, r6
 80062e0:	4638      	mov	r0, r7
 80062e2:	f7ff fd63 	bl	8005dac <_free_r>
 80062e6:	e7e9      	b.n	80062bc <_realloc_r+0x1c>
 80062e8:	4635      	mov	r5, r6
 80062ea:	e7e7      	b.n	80062bc <_realloc_r+0x1c>

080062ec <__sfputc_r>:
 80062ec:	6893      	ldr	r3, [r2, #8]
 80062ee:	b410      	push	{r4}
 80062f0:	3b01      	subs	r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	6093      	str	r3, [r2, #8]
 80062f6:	da07      	bge.n	8006308 <__sfputc_r+0x1c>
 80062f8:	6994      	ldr	r4, [r2, #24]
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	db01      	blt.n	8006302 <__sfputc_r+0x16>
 80062fe:	290a      	cmp	r1, #10
 8006300:	d102      	bne.n	8006308 <__sfputc_r+0x1c>
 8006302:	bc10      	pop	{r4}
 8006304:	f000 b94a 	b.w	800659c <__swbuf_r>
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	1c58      	adds	r0, r3, #1
 800630c:	6010      	str	r0, [r2, #0]
 800630e:	7019      	strb	r1, [r3, #0]
 8006310:	4608      	mov	r0, r1
 8006312:	bc10      	pop	{r4}
 8006314:	4770      	bx	lr

08006316 <__sfputs_r>:
 8006316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006318:	4606      	mov	r6, r0
 800631a:	460f      	mov	r7, r1
 800631c:	4614      	mov	r4, r2
 800631e:	18d5      	adds	r5, r2, r3
 8006320:	42ac      	cmp	r4, r5
 8006322:	d101      	bne.n	8006328 <__sfputs_r+0x12>
 8006324:	2000      	movs	r0, #0
 8006326:	e007      	b.n	8006338 <__sfputs_r+0x22>
 8006328:	463a      	mov	r2, r7
 800632a:	4630      	mov	r0, r6
 800632c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006330:	f7ff ffdc 	bl	80062ec <__sfputc_r>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d1f3      	bne.n	8006320 <__sfputs_r+0xa>
 8006338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800633c <_vfiprintf_r>:
 800633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	460d      	mov	r5, r1
 8006342:	4614      	mov	r4, r2
 8006344:	4698      	mov	r8, r3
 8006346:	4606      	mov	r6, r0
 8006348:	b09d      	sub	sp, #116	; 0x74
 800634a:	b118      	cbz	r0, 8006354 <_vfiprintf_r+0x18>
 800634c:	6983      	ldr	r3, [r0, #24]
 800634e:	b90b      	cbnz	r3, 8006354 <_vfiprintf_r+0x18>
 8006350:	f000 fb14 	bl	800697c <__sinit>
 8006354:	4b89      	ldr	r3, [pc, #548]	; (800657c <_vfiprintf_r+0x240>)
 8006356:	429d      	cmp	r5, r3
 8006358:	d11b      	bne.n	8006392 <_vfiprintf_r+0x56>
 800635a:	6875      	ldr	r5, [r6, #4]
 800635c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800635e:	07d9      	lsls	r1, r3, #31
 8006360:	d405      	bmi.n	800636e <_vfiprintf_r+0x32>
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	059a      	lsls	r2, r3, #22
 8006366:	d402      	bmi.n	800636e <_vfiprintf_r+0x32>
 8006368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800636a:	f000 fba5 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	071b      	lsls	r3, r3, #28
 8006372:	d501      	bpl.n	8006378 <_vfiprintf_r+0x3c>
 8006374:	692b      	ldr	r3, [r5, #16]
 8006376:	b9eb      	cbnz	r3, 80063b4 <_vfiprintf_r+0x78>
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f000 f96e 	bl	800665c <__swsetup_r>
 8006380:	b1c0      	cbz	r0, 80063b4 <_vfiprintf_r+0x78>
 8006382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006384:	07dc      	lsls	r4, r3, #31
 8006386:	d50e      	bpl.n	80063a6 <_vfiprintf_r+0x6a>
 8006388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800638c:	b01d      	add	sp, #116	; 0x74
 800638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <_vfiprintf_r+0x244>)
 8006394:	429d      	cmp	r5, r3
 8006396:	d101      	bne.n	800639c <_vfiprintf_r+0x60>
 8006398:	68b5      	ldr	r5, [r6, #8]
 800639a:	e7df      	b.n	800635c <_vfiprintf_r+0x20>
 800639c:	4b79      	ldr	r3, [pc, #484]	; (8006584 <_vfiprintf_r+0x248>)
 800639e:	429d      	cmp	r5, r3
 80063a0:	bf08      	it	eq
 80063a2:	68f5      	ldreq	r5, [r6, #12]
 80063a4:	e7da      	b.n	800635c <_vfiprintf_r+0x20>
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	0598      	lsls	r0, r3, #22
 80063aa:	d4ed      	bmi.n	8006388 <_vfiprintf_r+0x4c>
 80063ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ae:	f000 fb84 	bl	8006aba <__retarget_lock_release_recursive>
 80063b2:	e7e9      	b.n	8006388 <_vfiprintf_r+0x4c>
 80063b4:	2300      	movs	r3, #0
 80063b6:	9309      	str	r3, [sp, #36]	; 0x24
 80063b8:	2320      	movs	r3, #32
 80063ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063be:	2330      	movs	r3, #48	; 0x30
 80063c0:	f04f 0901 	mov.w	r9, #1
 80063c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006588 <_vfiprintf_r+0x24c>
 80063cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063d0:	4623      	mov	r3, r4
 80063d2:	469a      	mov	sl, r3
 80063d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d8:	b10a      	cbz	r2, 80063de <_vfiprintf_r+0xa2>
 80063da:	2a25      	cmp	r2, #37	; 0x25
 80063dc:	d1f9      	bne.n	80063d2 <_vfiprintf_r+0x96>
 80063de:	ebba 0b04 	subs.w	fp, sl, r4
 80063e2:	d00b      	beq.n	80063fc <_vfiprintf_r+0xc0>
 80063e4:	465b      	mov	r3, fp
 80063e6:	4622      	mov	r2, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ff93 	bl	8006316 <__sfputs_r>
 80063f0:	3001      	adds	r0, #1
 80063f2:	f000 80aa 	beq.w	800654a <_vfiprintf_r+0x20e>
 80063f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063f8:	445a      	add	r2, fp
 80063fa:	9209      	str	r2, [sp, #36]	; 0x24
 80063fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80a2 	beq.w	800654a <_vfiprintf_r+0x20e>
 8006406:	2300      	movs	r3, #0
 8006408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800640c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006410:	f10a 0a01 	add.w	sl, sl, #1
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800641c:	931a      	str	r3, [sp, #104]	; 0x68
 800641e:	4654      	mov	r4, sl
 8006420:	2205      	movs	r2, #5
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	4858      	ldr	r0, [pc, #352]	; (8006588 <_vfiprintf_r+0x24c>)
 8006428:	f7ff f914 	bl	8005654 <memchr>
 800642c:	9a04      	ldr	r2, [sp, #16]
 800642e:	b9d8      	cbnz	r0, 8006468 <_vfiprintf_r+0x12c>
 8006430:	06d1      	lsls	r1, r2, #27
 8006432:	bf44      	itt	mi
 8006434:	2320      	movmi	r3, #32
 8006436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800643a:	0713      	lsls	r3, r2, #28
 800643c:	bf44      	itt	mi
 800643e:	232b      	movmi	r3, #43	; 0x2b
 8006440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006444:	f89a 3000 	ldrb.w	r3, [sl]
 8006448:	2b2a      	cmp	r3, #42	; 0x2a
 800644a:	d015      	beq.n	8006478 <_vfiprintf_r+0x13c>
 800644c:	4654      	mov	r4, sl
 800644e:	2000      	movs	r0, #0
 8006450:	f04f 0c0a 	mov.w	ip, #10
 8006454:	9a07      	ldr	r2, [sp, #28]
 8006456:	4621      	mov	r1, r4
 8006458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800645c:	3b30      	subs	r3, #48	; 0x30
 800645e:	2b09      	cmp	r3, #9
 8006460:	d94e      	bls.n	8006500 <_vfiprintf_r+0x1c4>
 8006462:	b1b0      	cbz	r0, 8006492 <_vfiprintf_r+0x156>
 8006464:	9207      	str	r2, [sp, #28]
 8006466:	e014      	b.n	8006492 <_vfiprintf_r+0x156>
 8006468:	eba0 0308 	sub.w	r3, r0, r8
 800646c:	fa09 f303 	lsl.w	r3, r9, r3
 8006470:	4313      	orrs	r3, r2
 8006472:	46a2      	mov	sl, r4
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	e7d2      	b.n	800641e <_vfiprintf_r+0xe2>
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	1d19      	adds	r1, r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	9103      	str	r1, [sp, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bfbb      	ittet	lt
 8006484:	425b      	neglt	r3, r3
 8006486:	f042 0202 	orrlt.w	r2, r2, #2
 800648a:	9307      	strge	r3, [sp, #28]
 800648c:	9307      	strlt	r3, [sp, #28]
 800648e:	bfb8      	it	lt
 8006490:	9204      	strlt	r2, [sp, #16]
 8006492:	7823      	ldrb	r3, [r4, #0]
 8006494:	2b2e      	cmp	r3, #46	; 0x2e
 8006496:	d10c      	bne.n	80064b2 <_vfiprintf_r+0x176>
 8006498:	7863      	ldrb	r3, [r4, #1]
 800649a:	2b2a      	cmp	r3, #42	; 0x2a
 800649c:	d135      	bne.n	800650a <_vfiprintf_r+0x1ce>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	3402      	adds	r4, #2
 80064a2:	1d1a      	adds	r2, r3, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	9203      	str	r2, [sp, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bfb8      	it	lt
 80064ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006598 <_vfiprintf_r+0x25c>
 80064b6:	2203      	movs	r2, #3
 80064b8:	4650      	mov	r0, sl
 80064ba:	7821      	ldrb	r1, [r4, #0]
 80064bc:	f7ff f8ca 	bl	8005654 <memchr>
 80064c0:	b140      	cbz	r0, 80064d4 <_vfiprintf_r+0x198>
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	eba0 000a 	sub.w	r0, r0, sl
 80064c8:	fa03 f000 	lsl.w	r0, r3, r0
 80064cc:	9b04      	ldr	r3, [sp, #16]
 80064ce:	3401      	adds	r4, #1
 80064d0:	4303      	orrs	r3, r0
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d8:	2206      	movs	r2, #6
 80064da:	482c      	ldr	r0, [pc, #176]	; (800658c <_vfiprintf_r+0x250>)
 80064dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064e0:	f7ff f8b8 	bl	8005654 <memchr>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d03f      	beq.n	8006568 <_vfiprintf_r+0x22c>
 80064e8:	4b29      	ldr	r3, [pc, #164]	; (8006590 <_vfiprintf_r+0x254>)
 80064ea:	bb1b      	cbnz	r3, 8006534 <_vfiprintf_r+0x1f8>
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	3307      	adds	r3, #7
 80064f0:	f023 0307 	bic.w	r3, r3, #7
 80064f4:	3308      	adds	r3, #8
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	443b      	add	r3, r7
 80064fc:	9309      	str	r3, [sp, #36]	; 0x24
 80064fe:	e767      	b.n	80063d0 <_vfiprintf_r+0x94>
 8006500:	460c      	mov	r4, r1
 8006502:	2001      	movs	r0, #1
 8006504:	fb0c 3202 	mla	r2, ip, r2, r3
 8006508:	e7a5      	b.n	8006456 <_vfiprintf_r+0x11a>
 800650a:	2300      	movs	r3, #0
 800650c:	f04f 0c0a 	mov.w	ip, #10
 8006510:	4619      	mov	r1, r3
 8006512:	3401      	adds	r4, #1
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	4620      	mov	r0, r4
 8006518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800651c:	3a30      	subs	r2, #48	; 0x30
 800651e:	2a09      	cmp	r2, #9
 8006520:	d903      	bls.n	800652a <_vfiprintf_r+0x1ee>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0c5      	beq.n	80064b2 <_vfiprintf_r+0x176>
 8006526:	9105      	str	r1, [sp, #20]
 8006528:	e7c3      	b.n	80064b2 <_vfiprintf_r+0x176>
 800652a:	4604      	mov	r4, r0
 800652c:	2301      	movs	r3, #1
 800652e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006532:	e7f0      	b.n	8006516 <_vfiprintf_r+0x1da>
 8006534:	ab03      	add	r3, sp, #12
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	462a      	mov	r2, r5
 800653a:	4630      	mov	r0, r6
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <_vfiprintf_r+0x258>)
 800653e:	a904      	add	r1, sp, #16
 8006540:	f7fd fde2 	bl	8004108 <_printf_float>
 8006544:	4607      	mov	r7, r0
 8006546:	1c78      	adds	r0, r7, #1
 8006548:	d1d6      	bne.n	80064f8 <_vfiprintf_r+0x1bc>
 800654a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800654c:	07d9      	lsls	r1, r3, #31
 800654e:	d405      	bmi.n	800655c <_vfiprintf_r+0x220>
 8006550:	89ab      	ldrh	r3, [r5, #12]
 8006552:	059a      	lsls	r2, r3, #22
 8006554:	d402      	bmi.n	800655c <_vfiprintf_r+0x220>
 8006556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006558:	f000 faaf 	bl	8006aba <__retarget_lock_release_recursive>
 800655c:	89ab      	ldrh	r3, [r5, #12]
 800655e:	065b      	lsls	r3, r3, #25
 8006560:	f53f af12 	bmi.w	8006388 <_vfiprintf_r+0x4c>
 8006564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006566:	e711      	b.n	800638c <_vfiprintf_r+0x50>
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	462a      	mov	r2, r5
 800656e:	4630      	mov	r0, r6
 8006570:	4b08      	ldr	r3, [pc, #32]	; (8006594 <_vfiprintf_r+0x258>)
 8006572:	a904      	add	r1, sp, #16
 8006574:	f7fe f864 	bl	8004640 <_printf_i>
 8006578:	e7e4      	b.n	8006544 <_vfiprintf_r+0x208>
 800657a:	bf00      	nop
 800657c:	08007804 	.word	0x08007804
 8006580:	08007824 	.word	0x08007824
 8006584:	080077e4 	.word	0x080077e4
 8006588:	0800768c 	.word	0x0800768c
 800658c:	08007696 	.word	0x08007696
 8006590:	08004109 	.word	0x08004109
 8006594:	08006317 	.word	0x08006317
 8006598:	08007692 	.word	0x08007692

0800659c <__swbuf_r>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	460e      	mov	r6, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	4605      	mov	r5, r0
 80065a4:	b118      	cbz	r0, 80065ae <__swbuf_r+0x12>
 80065a6:	6983      	ldr	r3, [r0, #24]
 80065a8:	b90b      	cbnz	r3, 80065ae <__swbuf_r+0x12>
 80065aa:	f000 f9e7 	bl	800697c <__sinit>
 80065ae:	4b21      	ldr	r3, [pc, #132]	; (8006634 <__swbuf_r+0x98>)
 80065b0:	429c      	cmp	r4, r3
 80065b2:	d12b      	bne.n	800660c <__swbuf_r+0x70>
 80065b4:	686c      	ldr	r4, [r5, #4]
 80065b6:	69a3      	ldr	r3, [r4, #24]
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	071a      	lsls	r2, r3, #28
 80065be:	d52f      	bpl.n	8006620 <__swbuf_r+0x84>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	b36b      	cbz	r3, 8006620 <__swbuf_r+0x84>
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	6820      	ldr	r0, [r4, #0]
 80065c8:	b2f6      	uxtb	r6, r6
 80065ca:	1ac0      	subs	r0, r0, r3
 80065cc:	6963      	ldr	r3, [r4, #20]
 80065ce:	4637      	mov	r7, r6
 80065d0:	4283      	cmp	r3, r0
 80065d2:	dc04      	bgt.n	80065de <__swbuf_r+0x42>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f93c 	bl	8006854 <_fflush_r>
 80065dc:	bb30      	cbnz	r0, 800662c <__swbuf_r+0x90>
 80065de:	68a3      	ldr	r3, [r4, #8]
 80065e0:	3001      	adds	r0, #1
 80065e2:	3b01      	subs	r3, #1
 80065e4:	60a3      	str	r3, [r4, #8]
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	701e      	strb	r6, [r3, #0]
 80065ee:	6963      	ldr	r3, [r4, #20]
 80065f0:	4283      	cmp	r3, r0
 80065f2:	d004      	beq.n	80065fe <__swbuf_r+0x62>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	07db      	lsls	r3, r3, #31
 80065f8:	d506      	bpl.n	8006608 <__swbuf_r+0x6c>
 80065fa:	2e0a      	cmp	r6, #10
 80065fc:	d104      	bne.n	8006608 <__swbuf_r+0x6c>
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f000 f927 	bl	8006854 <_fflush_r>
 8006606:	b988      	cbnz	r0, 800662c <__swbuf_r+0x90>
 8006608:	4638      	mov	r0, r7
 800660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <__swbuf_r+0x9c>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d101      	bne.n	8006616 <__swbuf_r+0x7a>
 8006612:	68ac      	ldr	r4, [r5, #8]
 8006614:	e7cf      	b.n	80065b6 <__swbuf_r+0x1a>
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <__swbuf_r+0xa0>)
 8006618:	429c      	cmp	r4, r3
 800661a:	bf08      	it	eq
 800661c:	68ec      	ldreq	r4, [r5, #12]
 800661e:	e7ca      	b.n	80065b6 <__swbuf_r+0x1a>
 8006620:	4621      	mov	r1, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f81a 	bl	800665c <__swsetup_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0cb      	beq.n	80065c4 <__swbuf_r+0x28>
 800662c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006630:	e7ea      	b.n	8006608 <__swbuf_r+0x6c>
 8006632:	bf00      	nop
 8006634:	08007804 	.word	0x08007804
 8006638:	08007824 	.word	0x08007824
 800663c:	080077e4 	.word	0x080077e4

08006640 <__ascii_wctomb>:
 8006640:	4603      	mov	r3, r0
 8006642:	4608      	mov	r0, r1
 8006644:	b141      	cbz	r1, 8006658 <__ascii_wctomb+0x18>
 8006646:	2aff      	cmp	r2, #255	; 0xff
 8006648:	d904      	bls.n	8006654 <__ascii_wctomb+0x14>
 800664a:	228a      	movs	r2, #138	; 0x8a
 800664c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	4770      	bx	lr
 8006654:	2001      	movs	r0, #1
 8006656:	700a      	strb	r2, [r1, #0]
 8006658:	4770      	bx	lr
	...

0800665c <__swsetup_r>:
 800665c:	4b32      	ldr	r3, [pc, #200]	; (8006728 <__swsetup_r+0xcc>)
 800665e:	b570      	push	{r4, r5, r6, lr}
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	4606      	mov	r6, r0
 8006664:	460c      	mov	r4, r1
 8006666:	b125      	cbz	r5, 8006672 <__swsetup_r+0x16>
 8006668:	69ab      	ldr	r3, [r5, #24]
 800666a:	b913      	cbnz	r3, 8006672 <__swsetup_r+0x16>
 800666c:	4628      	mov	r0, r5
 800666e:	f000 f985 	bl	800697c <__sinit>
 8006672:	4b2e      	ldr	r3, [pc, #184]	; (800672c <__swsetup_r+0xd0>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d10f      	bne.n	8006698 <__swsetup_r+0x3c>
 8006678:	686c      	ldr	r4, [r5, #4]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006680:	0719      	lsls	r1, r3, #28
 8006682:	d42c      	bmi.n	80066de <__swsetup_r+0x82>
 8006684:	06dd      	lsls	r5, r3, #27
 8006686:	d411      	bmi.n	80066ac <__swsetup_r+0x50>
 8006688:	2309      	movs	r3, #9
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	e03e      	b.n	8006716 <__swsetup_r+0xba>
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <__swsetup_r+0xd4>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d101      	bne.n	80066a2 <__swsetup_r+0x46>
 800669e:	68ac      	ldr	r4, [r5, #8]
 80066a0:	e7eb      	b.n	800667a <__swsetup_r+0x1e>
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <__swsetup_r+0xd8>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	bf08      	it	eq
 80066a8:	68ec      	ldreq	r4, [r5, #12]
 80066aa:	e7e6      	b.n	800667a <__swsetup_r+0x1e>
 80066ac:	0758      	lsls	r0, r3, #29
 80066ae:	d512      	bpl.n	80066d6 <__swsetup_r+0x7a>
 80066b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b2:	b141      	cbz	r1, 80066c6 <__swsetup_r+0x6a>
 80066b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b8:	4299      	cmp	r1, r3
 80066ba:	d002      	beq.n	80066c2 <__swsetup_r+0x66>
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff fb75 	bl	8005dac <_free_r>
 80066c2:	2300      	movs	r3, #0
 80066c4:	6363      	str	r3, [r4, #52]	; 0x34
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	2300      	movs	r3, #0
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f043 0308 	orr.w	r3, r3, #8
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	b94b      	cbnz	r3, 80066f6 <__swsetup_r+0x9a>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ec:	d003      	beq.n	80066f6 <__swsetup_r+0x9a>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 fa07 	bl	8006b04 <__smakebuf_r>
 80066f6:	89a0      	ldrh	r0, [r4, #12]
 80066f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066fc:	f010 0301 	ands.w	r3, r0, #1
 8006700:	d00a      	beq.n	8006718 <__swsetup_r+0xbc>
 8006702:	2300      	movs	r3, #0
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	425b      	negs	r3, r3
 800670a:	61a3      	str	r3, [r4, #24]
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	b943      	cbnz	r3, 8006722 <__swsetup_r+0xc6>
 8006710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006714:	d1ba      	bne.n	800668c <__swsetup_r+0x30>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	0781      	lsls	r1, r0, #30
 800671a:	bf58      	it	pl
 800671c:	6963      	ldrpl	r3, [r4, #20]
 800671e:	60a3      	str	r3, [r4, #8]
 8006720:	e7f4      	b.n	800670c <__swsetup_r+0xb0>
 8006722:	2000      	movs	r0, #0
 8006724:	e7f7      	b.n	8006716 <__swsetup_r+0xba>
 8006726:	bf00      	nop
 8006728:	2000009c 	.word	0x2000009c
 800672c:	08007804 	.word	0x08007804
 8006730:	08007824 	.word	0x08007824
 8006734:	080077e4 	.word	0x080077e4

08006738 <abort>:
 8006738:	2006      	movs	r0, #6
 800673a:	b508      	push	{r3, lr}
 800673c:	f000 fa52 	bl	8006be4 <raise>
 8006740:	2001      	movs	r0, #1
 8006742:	f7fb fa15 	bl	8001b70 <_exit>
	...

08006748 <__sflush_r>:
 8006748:	898a      	ldrh	r2, [r1, #12]
 800674a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	4605      	mov	r5, r0
 8006750:	0710      	lsls	r0, r2, #28
 8006752:	460c      	mov	r4, r1
 8006754:	d458      	bmi.n	8006808 <__sflush_r+0xc0>
 8006756:	684b      	ldr	r3, [r1, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	dc05      	bgt.n	8006768 <__sflush_r+0x20>
 800675c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	dc02      	bgt.n	8006768 <__sflush_r+0x20>
 8006762:	2000      	movs	r0, #0
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800676a:	2e00      	cmp	r6, #0
 800676c:	d0f9      	beq.n	8006762 <__sflush_r+0x1a>
 800676e:	2300      	movs	r3, #0
 8006770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006774:	682f      	ldr	r7, [r5, #0]
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	d032      	beq.n	80067e0 <__sflush_r+0x98>
 800677a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	075a      	lsls	r2, r3, #29
 8006780:	d505      	bpl.n	800678e <__sflush_r+0x46>
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006788:	b10b      	cbz	r3, 800678e <__sflush_r+0x46>
 800678a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800678c:	1ac0      	subs	r0, r0, r3
 800678e:	2300      	movs	r3, #0
 8006790:	4602      	mov	r2, r0
 8006792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006794:	4628      	mov	r0, r5
 8006796:	6a21      	ldr	r1, [r4, #32]
 8006798:	47b0      	blx	r6
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	d106      	bne.n	80067ae <__sflush_r+0x66>
 80067a0:	6829      	ldr	r1, [r5, #0]
 80067a2:	291d      	cmp	r1, #29
 80067a4:	d82c      	bhi.n	8006800 <__sflush_r+0xb8>
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <__sflush_r+0x108>)
 80067a8:	40ca      	lsrs	r2, r1
 80067aa:	07d6      	lsls	r6, r2, #31
 80067ac:	d528      	bpl.n	8006800 <__sflush_r+0xb8>
 80067ae:	2200      	movs	r2, #0
 80067b0:	6062      	str	r2, [r4, #4]
 80067b2:	6922      	ldr	r2, [r4, #16]
 80067b4:	04d9      	lsls	r1, r3, #19
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	d504      	bpl.n	80067c4 <__sflush_r+0x7c>
 80067ba:	1c42      	adds	r2, r0, #1
 80067bc:	d101      	bne.n	80067c2 <__sflush_r+0x7a>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	b903      	cbnz	r3, 80067c4 <__sflush_r+0x7c>
 80067c2:	6560      	str	r0, [r4, #84]	; 0x54
 80067c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067c6:	602f      	str	r7, [r5, #0]
 80067c8:	2900      	cmp	r1, #0
 80067ca:	d0ca      	beq.n	8006762 <__sflush_r+0x1a>
 80067cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d0:	4299      	cmp	r1, r3
 80067d2:	d002      	beq.n	80067da <__sflush_r+0x92>
 80067d4:	4628      	mov	r0, r5
 80067d6:	f7ff fae9 	bl	8005dac <_free_r>
 80067da:	2000      	movs	r0, #0
 80067dc:	6360      	str	r0, [r4, #52]	; 0x34
 80067de:	e7c1      	b.n	8006764 <__sflush_r+0x1c>
 80067e0:	6a21      	ldr	r1, [r4, #32]
 80067e2:	2301      	movs	r3, #1
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b0      	blx	r6
 80067e8:	1c41      	adds	r1, r0, #1
 80067ea:	d1c7      	bne.n	800677c <__sflush_r+0x34>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0c4      	beq.n	800677c <__sflush_r+0x34>
 80067f2:	2b1d      	cmp	r3, #29
 80067f4:	d001      	beq.n	80067fa <__sflush_r+0xb2>
 80067f6:	2b16      	cmp	r3, #22
 80067f8:	d101      	bne.n	80067fe <__sflush_r+0xb6>
 80067fa:	602f      	str	r7, [r5, #0]
 80067fc:	e7b1      	b.n	8006762 <__sflush_r+0x1a>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	e7ad      	b.n	8006764 <__sflush_r+0x1c>
 8006808:	690f      	ldr	r7, [r1, #16]
 800680a:	2f00      	cmp	r7, #0
 800680c:	d0a9      	beq.n	8006762 <__sflush_r+0x1a>
 800680e:	0793      	lsls	r3, r2, #30
 8006810:	bf18      	it	ne
 8006812:	2300      	movne	r3, #0
 8006814:	680e      	ldr	r6, [r1, #0]
 8006816:	bf08      	it	eq
 8006818:	694b      	ldreq	r3, [r1, #20]
 800681a:	eba6 0807 	sub.w	r8, r6, r7
 800681e:	600f      	str	r7, [r1, #0]
 8006820:	608b      	str	r3, [r1, #8]
 8006822:	f1b8 0f00 	cmp.w	r8, #0
 8006826:	dd9c      	ble.n	8006762 <__sflush_r+0x1a>
 8006828:	4643      	mov	r3, r8
 800682a:	463a      	mov	r2, r7
 800682c:	4628      	mov	r0, r5
 800682e:	6a21      	ldr	r1, [r4, #32]
 8006830:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006832:	47b0      	blx	r6
 8006834:	2800      	cmp	r0, #0
 8006836:	dc06      	bgt.n	8006846 <__sflush_r+0xfe>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800683e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	e78e      	b.n	8006764 <__sflush_r+0x1c>
 8006846:	4407      	add	r7, r0
 8006848:	eba8 0800 	sub.w	r8, r8, r0
 800684c:	e7e9      	b.n	8006822 <__sflush_r+0xda>
 800684e:	bf00      	nop
 8006850:	20400001 	.word	0x20400001

08006854 <_fflush_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b913      	cbnz	r3, 8006864 <_fflush_r+0x10>
 800685e:	2500      	movs	r5, #0
 8006860:	4628      	mov	r0, r5
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	b118      	cbz	r0, 800686e <_fflush_r+0x1a>
 8006866:	6983      	ldr	r3, [r0, #24]
 8006868:	b90b      	cbnz	r3, 800686e <_fflush_r+0x1a>
 800686a:	f000 f887 	bl	800697c <__sinit>
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <_fflush_r+0x6c>)
 8006870:	429c      	cmp	r4, r3
 8006872:	d11b      	bne.n	80068ac <_fflush_r+0x58>
 8006874:	686c      	ldr	r4, [r5, #4]
 8006876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ef      	beq.n	800685e <_fflush_r+0xa>
 800687e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006880:	07d0      	lsls	r0, r2, #31
 8006882:	d404      	bmi.n	800688e <_fflush_r+0x3a>
 8006884:	0599      	lsls	r1, r3, #22
 8006886:	d402      	bmi.n	800688e <_fflush_r+0x3a>
 8006888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688a:	f000 f915 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 800688e:	4628      	mov	r0, r5
 8006890:	4621      	mov	r1, r4
 8006892:	f7ff ff59 	bl	8006748 <__sflush_r>
 8006896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006898:	4605      	mov	r5, r0
 800689a:	07da      	lsls	r2, r3, #31
 800689c:	d4e0      	bmi.n	8006860 <_fflush_r+0xc>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	059b      	lsls	r3, r3, #22
 80068a2:	d4dd      	bmi.n	8006860 <_fflush_r+0xc>
 80068a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068a6:	f000 f908 	bl	8006aba <__retarget_lock_release_recursive>
 80068aa:	e7d9      	b.n	8006860 <_fflush_r+0xc>
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <_fflush_r+0x70>)
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d101      	bne.n	80068b6 <_fflush_r+0x62>
 80068b2:	68ac      	ldr	r4, [r5, #8]
 80068b4:	e7df      	b.n	8006876 <_fflush_r+0x22>
 80068b6:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <_fflush_r+0x74>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	bf08      	it	eq
 80068bc:	68ec      	ldreq	r4, [r5, #12]
 80068be:	e7da      	b.n	8006876 <_fflush_r+0x22>
 80068c0:	08007804 	.word	0x08007804
 80068c4:	08007824 	.word	0x08007824
 80068c8:	080077e4 	.word	0x080077e4

080068cc <std>:
 80068cc:	2300      	movs	r3, #0
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
 80068d2:	e9c0 3300 	strd	r3, r3, [r0]
 80068d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068da:	6083      	str	r3, [r0, #8]
 80068dc:	8181      	strh	r1, [r0, #12]
 80068de:	6643      	str	r3, [r0, #100]	; 0x64
 80068e0:	81c2      	strh	r2, [r0, #14]
 80068e2:	6183      	str	r3, [r0, #24]
 80068e4:	4619      	mov	r1, r3
 80068e6:	2208      	movs	r2, #8
 80068e8:	305c      	adds	r0, #92	; 0x5c
 80068ea:	f7fd fb67 	bl	8003fbc <memset>
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x38>)
 80068f0:	6224      	str	r4, [r4, #32]
 80068f2:	6263      	str	r3, [r4, #36]	; 0x24
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <std+0x3c>)
 80068f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <std+0x40>)
 80068fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068fc:	4b04      	ldr	r3, [pc, #16]	; (8006910 <std+0x44>)
 80068fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	08006c1d 	.word	0x08006c1d
 8006908:	08006c3f 	.word	0x08006c3f
 800690c:	08006c77 	.word	0x08006c77
 8006910:	08006c9b 	.word	0x08006c9b

08006914 <_cleanup_r>:
 8006914:	4901      	ldr	r1, [pc, #4]	; (800691c <_cleanup_r+0x8>)
 8006916:	f000 b8af 	b.w	8006a78 <_fwalk_reent>
 800691a:	bf00      	nop
 800691c:	08006855 	.word	0x08006855

08006920 <__sfmoreglue>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	2568      	movs	r5, #104	; 0x68
 8006924:	1e4a      	subs	r2, r1, #1
 8006926:	4355      	muls	r5, r2
 8006928:	460e      	mov	r6, r1
 800692a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800692e:	f7ff fa89 	bl	8005e44 <_malloc_r>
 8006932:	4604      	mov	r4, r0
 8006934:	b140      	cbz	r0, 8006948 <__sfmoreglue+0x28>
 8006936:	2100      	movs	r1, #0
 8006938:	e9c0 1600 	strd	r1, r6, [r0]
 800693c:	300c      	adds	r0, #12
 800693e:	60a0      	str	r0, [r4, #8]
 8006940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006944:	f7fd fb3a 	bl	8003fbc <memset>
 8006948:	4620      	mov	r0, r4
 800694a:	bd70      	pop	{r4, r5, r6, pc}

0800694c <__sfp_lock_acquire>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__sfp_lock_acquire+0x8>)
 800694e:	f000 b8b3 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	200005d4 	.word	0x200005d4

08006958 <__sfp_lock_release>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__sfp_lock_release+0x8>)
 800695a:	f000 b8ae 	b.w	8006aba <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	200005d4 	.word	0x200005d4

08006964 <__sinit_lock_acquire>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__sinit_lock_acquire+0x8>)
 8006966:	f000 b8a7 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 800696a:	bf00      	nop
 800696c:	200005cf 	.word	0x200005cf

08006970 <__sinit_lock_release>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__sinit_lock_release+0x8>)
 8006972:	f000 b8a2 	b.w	8006aba <__retarget_lock_release_recursive>
 8006976:	bf00      	nop
 8006978:	200005cf 	.word	0x200005cf

0800697c <__sinit>:
 800697c:	b510      	push	{r4, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	f7ff fff0 	bl	8006964 <__sinit_lock_acquire>
 8006984:	69a3      	ldr	r3, [r4, #24]
 8006986:	b11b      	cbz	r3, 8006990 <__sinit+0x14>
 8006988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698c:	f7ff bff0 	b.w	8006970 <__sinit_lock_release>
 8006990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006994:	6523      	str	r3, [r4, #80]	; 0x50
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <__sinit+0x68>)
 8006998:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <__sinit+0x6c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	62a2      	str	r2, [r4, #40]	; 0x28
 800699e:	42a3      	cmp	r3, r4
 80069a0:	bf08      	it	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	4620      	mov	r0, r4
 80069a6:	bf08      	it	eq
 80069a8:	61a3      	streq	r3, [r4, #24]
 80069aa:	f000 f81f 	bl	80069ec <__sfp>
 80069ae:	6060      	str	r0, [r4, #4]
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 f81b 	bl	80069ec <__sfp>
 80069b6:	60a0      	str	r0, [r4, #8]
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f817 	bl	80069ec <__sfp>
 80069be:	2200      	movs	r2, #0
 80069c0:	2104      	movs	r1, #4
 80069c2:	60e0      	str	r0, [r4, #12]
 80069c4:	6860      	ldr	r0, [r4, #4]
 80069c6:	f7ff ff81 	bl	80068cc <std>
 80069ca:	2201      	movs	r2, #1
 80069cc:	2109      	movs	r1, #9
 80069ce:	68a0      	ldr	r0, [r4, #8]
 80069d0:	f7ff ff7c 	bl	80068cc <std>
 80069d4:	2202      	movs	r2, #2
 80069d6:	2112      	movs	r1, #18
 80069d8:	68e0      	ldr	r0, [r4, #12]
 80069da:	f7ff ff77 	bl	80068cc <std>
 80069de:	2301      	movs	r3, #1
 80069e0:	61a3      	str	r3, [r4, #24]
 80069e2:	e7d1      	b.n	8006988 <__sinit+0xc>
 80069e4:	08007460 	.word	0x08007460
 80069e8:	08006915 	.word	0x08006915

080069ec <__sfp>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	4607      	mov	r7, r0
 80069f0:	f7ff ffac 	bl	800694c <__sfp_lock_acquire>
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <__sfp+0x84>)
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	69b3      	ldr	r3, [r6, #24]
 80069fa:	b913      	cbnz	r3, 8006a02 <__sfp+0x16>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff ffbd 	bl	800697c <__sinit>
 8006a02:	3648      	adds	r6, #72	; 0x48
 8006a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	d503      	bpl.n	8006a14 <__sfp+0x28>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	b30b      	cbz	r3, 8006a54 <__sfp+0x68>
 8006a10:	6836      	ldr	r6, [r6, #0]
 8006a12:	e7f7      	b.n	8006a04 <__sfp+0x18>
 8006a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a18:	b9d5      	cbnz	r5, 8006a50 <__sfp+0x64>
 8006a1a:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <__sfp+0x88>)
 8006a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a20:	60e3      	str	r3, [r4, #12]
 8006a22:	6665      	str	r5, [r4, #100]	; 0x64
 8006a24:	f000 f847 	bl	8006ab6 <__retarget_lock_init_recursive>
 8006a28:	f7ff ff96 	bl	8006958 <__sfp_lock_release>
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	4629      	mov	r1, r5
 8006a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a38:	6025      	str	r5, [r4, #0]
 8006a3a:	61a5      	str	r5, [r4, #24]
 8006a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a40:	f7fd fabc 	bl	8003fbc <memset>
 8006a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	3468      	adds	r4, #104	; 0x68
 8006a52:	e7d9      	b.n	8006a08 <__sfp+0x1c>
 8006a54:	2104      	movs	r1, #4
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff ff62 	bl	8006920 <__sfmoreglue>
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	6030      	str	r0, [r6, #0]
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1d5      	bne.n	8006a10 <__sfp+0x24>
 8006a64:	f7ff ff78 	bl	8006958 <__sfp_lock_release>
 8006a68:	230c      	movs	r3, #12
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	e7ee      	b.n	8006a4c <__sfp+0x60>
 8006a6e:	bf00      	nop
 8006a70:	08007460 	.word	0x08007460
 8006a74:	ffff0001 	.word	0xffff0001

08006a78 <_fwalk_reent>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	4688      	mov	r8, r1
 8006a80:	2700      	movs	r7, #0
 8006a82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a8e:	d505      	bpl.n	8006a9c <_fwalk_reent+0x24>
 8006a90:	6824      	ldr	r4, [r4, #0]
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d1f7      	bne.n	8006a86 <_fwalk_reent+0xe>
 8006a96:	4638      	mov	r0, r7
 8006a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9c:	89ab      	ldrh	r3, [r5, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d907      	bls.n	8006ab2 <_fwalk_reent+0x3a>
 8006aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	d003      	beq.n	8006ab2 <_fwalk_reent+0x3a>
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4630      	mov	r0, r6
 8006aae:	47c0      	blx	r8
 8006ab0:	4307      	orrs	r7, r0
 8006ab2:	3568      	adds	r5, #104	; 0x68
 8006ab4:	e7e9      	b.n	8006a8a <_fwalk_reent+0x12>

08006ab6 <__retarget_lock_init_recursive>:
 8006ab6:	4770      	bx	lr

08006ab8 <__retarget_lock_acquire_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_release_recursive>:
 8006aba:	4770      	bx	lr

08006abc <__swhatbuf_r>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	460e      	mov	r6, r1
 8006ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	461d      	mov	r5, r3
 8006aca:	b096      	sub	sp, #88	; 0x58
 8006acc:	da07      	bge.n	8006ade <__swhatbuf_r+0x22>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	89b3      	ldrh	r3, [r6, #12]
 8006ad4:	061a      	lsls	r2, r3, #24
 8006ad6:	d410      	bmi.n	8006afa <__swhatbuf_r+0x3e>
 8006ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006adc:	e00e      	b.n	8006afc <__swhatbuf_r+0x40>
 8006ade:	466a      	mov	r2, sp
 8006ae0:	f000 f902 	bl	8006ce8 <_fstat_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	dbf2      	blt.n	8006ace <__swhatbuf_r+0x12>
 8006ae8:	9a01      	ldr	r2, [sp, #4]
 8006aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006af2:	425a      	negs	r2, r3
 8006af4:	415a      	adcs	r2, r3
 8006af6:	602a      	str	r2, [r5, #0]
 8006af8:	e7ee      	b.n	8006ad8 <__swhatbuf_r+0x1c>
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	2000      	movs	r0, #0
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	b016      	add	sp, #88	; 0x58
 8006b02:	bd70      	pop	{r4, r5, r6, pc}

08006b04 <__smakebuf_r>:
 8006b04:	898b      	ldrh	r3, [r1, #12]
 8006b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b08:	079d      	lsls	r5, r3, #30
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	d507      	bpl.n	8006b20 <__smakebuf_r+0x1c>
 8006b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	2301      	movs	r3, #1
 8006b1a:	6163      	str	r3, [r4, #20]
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	466a      	mov	r2, sp
 8006b22:	ab01      	add	r3, sp, #4
 8006b24:	f7ff ffca 	bl	8006abc <__swhatbuf_r>
 8006b28:	9900      	ldr	r1, [sp, #0]
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f7ff f989 	bl	8005e44 <_malloc_r>
 8006b32:	b948      	cbnz	r0, 8006b48 <__smakebuf_r+0x44>
 8006b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b38:	059a      	lsls	r2, r3, #22
 8006b3a:	d4ef      	bmi.n	8006b1c <__smakebuf_r+0x18>
 8006b3c:	f023 0303 	bic.w	r3, r3, #3
 8006b40:	f043 0302 	orr.w	r3, r3, #2
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	e7e3      	b.n	8006b10 <__smakebuf_r+0xc>
 8006b48:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <__smakebuf_r+0x7c>)
 8006b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	6020      	str	r0, [r4, #0]
 8006b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b54:	81a3      	strh	r3, [r4, #12]
 8006b56:	9b00      	ldr	r3, [sp, #0]
 8006b58:	6120      	str	r0, [r4, #16]
 8006b5a:	6163      	str	r3, [r4, #20]
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	b15b      	cbz	r3, 8006b78 <__smakebuf_r+0x74>
 8006b60:	4630      	mov	r0, r6
 8006b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b66:	f000 f8d1 	bl	8006d0c <_isatty_r>
 8006b6a:	b128      	cbz	r0, 8006b78 <__smakebuf_r+0x74>
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	89a0      	ldrh	r0, [r4, #12]
 8006b7a:	4305      	orrs	r5, r0
 8006b7c:	81a5      	strh	r5, [r4, #12]
 8006b7e:	e7cd      	b.n	8006b1c <__smakebuf_r+0x18>
 8006b80:	08006915 	.word	0x08006915

08006b84 <_malloc_usable_size_r>:
 8006b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b88:	1f18      	subs	r0, r3, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	bfbc      	itt	lt
 8006b8e:	580b      	ldrlt	r3, [r1, r0]
 8006b90:	18c0      	addlt	r0, r0, r3
 8006b92:	4770      	bx	lr

08006b94 <_raise_r>:
 8006b94:	291f      	cmp	r1, #31
 8006b96:	b538      	push	{r3, r4, r5, lr}
 8006b98:	4604      	mov	r4, r0
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	d904      	bls.n	8006ba8 <_raise_r+0x14>
 8006b9e:	2316      	movs	r3, #22
 8006ba0:	6003      	str	r3, [r0, #0]
 8006ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006baa:	b112      	cbz	r2, 8006bb2 <_raise_r+0x1e>
 8006bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bb0:	b94b      	cbnz	r3, 8006bc6 <_raise_r+0x32>
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f830 	bl	8006c18 <_getpid_r>
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4601      	mov	r1, r0
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc2:	f000 b817 	b.w	8006bf4 <_kill_r>
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d00a      	beq.n	8006be0 <_raise_r+0x4c>
 8006bca:	1c59      	adds	r1, r3, #1
 8006bcc:	d103      	bne.n	8006bd6 <_raise_r+0x42>
 8006bce:	2316      	movs	r3, #22
 8006bd0:	6003      	str	r3, [r0, #0]
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	e7e7      	b.n	8006ba6 <_raise_r+0x12>
 8006bd6:	2400      	movs	r4, #0
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bde:	4798      	blx	r3
 8006be0:	2000      	movs	r0, #0
 8006be2:	e7e0      	b.n	8006ba6 <_raise_r+0x12>

08006be4 <raise>:
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <raise+0xc>)
 8006be6:	4601      	mov	r1, r0
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f7ff bfd3 	b.w	8006b94 <_raise_r>
 8006bee:	bf00      	nop
 8006bf0:	2000009c 	.word	0x2000009c

08006bf4 <_kill_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4d06      	ldr	r5, [pc, #24]	; (8006c14 <_kill_r+0x20>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	f7fa ffa5 	bl	8001b50 <_kill>
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	d102      	bne.n	8006c10 <_kill_r+0x1c>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	b103      	cbz	r3, 8006c10 <_kill_r+0x1c>
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	bd38      	pop	{r3, r4, r5, pc}
 8006c12:	bf00      	nop
 8006c14:	200005c8 	.word	0x200005c8

08006c18 <_getpid_r>:
 8006c18:	f7fa bf93 	b.w	8001b42 <_getpid>

08006c1c <__sread>:
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	460c      	mov	r4, r1
 8006c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c24:	f000 f894 	bl	8006d50 <_read_r>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	bfab      	itete	ge
 8006c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c30:	181b      	addge	r3, r3, r0
 8006c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c36:	bfac      	ite	ge
 8006c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c3a:	81a3      	strhlt	r3, [r4, #12]
 8006c3c:	bd10      	pop	{r4, pc}

08006c3e <__swrite>:
 8006c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c42:	461f      	mov	r7, r3
 8006c44:	898b      	ldrh	r3, [r1, #12]
 8006c46:	4605      	mov	r5, r0
 8006c48:	05db      	lsls	r3, r3, #23
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	d505      	bpl.n	8006c5c <__swrite+0x1e>
 8006c50:	2302      	movs	r3, #2
 8006c52:	2200      	movs	r2, #0
 8006c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c58:	f000 f868 	bl	8006d2c <_lseek_r>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	4632      	mov	r2, r6
 8006c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	4628      	mov	r0, r5
 8006c68:	463b      	mov	r3, r7
 8006c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	f000 b817 	b.w	8006ca4 <_write_r>

08006c76 <__sseek>:
 8006c76:	b510      	push	{r4, lr}
 8006c78:	460c      	mov	r4, r1
 8006c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c7e:	f000 f855 	bl	8006d2c <_lseek_r>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	bf15      	itete	ne
 8006c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c92:	81a3      	strheq	r3, [r4, #12]
 8006c94:	bf18      	it	ne
 8006c96:	81a3      	strhne	r3, [r4, #12]
 8006c98:	bd10      	pop	{r4, pc}

08006c9a <__sclose>:
 8006c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9e:	f000 b813 	b.w	8006cc8 <_close_r>
	...

08006ca4 <_write_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	2200      	movs	r2, #0
 8006cae:	4d05      	ldr	r5, [pc, #20]	; (8006cc4 <_write_r+0x20>)
 8006cb0:	602a      	str	r2, [r5, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7fa ff83 	bl	8001bbe <_write>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_write_r+0x1e>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_write_r+0x1e>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	200005c8 	.word	0x200005c8

08006cc8 <_close_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4d05      	ldr	r5, [pc, #20]	; (8006ce4 <_close_r+0x1c>)
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	f7fa ff8f 	bl	8001bf6 <_close>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_close_r+0x1a>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_close_r+0x1a>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	200005c8 	.word	0x200005c8

08006ce8 <_fstat_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	2300      	movs	r3, #0
 8006cec:	4d06      	ldr	r5, [pc, #24]	; (8006d08 <_fstat_r+0x20>)
 8006cee:	4604      	mov	r4, r0
 8006cf0:	4608      	mov	r0, r1
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	602b      	str	r3, [r5, #0]
 8006cf6:	f7fa ff89 	bl	8001c0c <_fstat>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	d102      	bne.n	8006d04 <_fstat_r+0x1c>
 8006cfe:	682b      	ldr	r3, [r5, #0]
 8006d00:	b103      	cbz	r3, 8006d04 <_fstat_r+0x1c>
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	bd38      	pop	{r3, r4, r5, pc}
 8006d06:	bf00      	nop
 8006d08:	200005c8 	.word	0x200005c8

08006d0c <_isatty_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4d05      	ldr	r5, [pc, #20]	; (8006d28 <_isatty_r+0x1c>)
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fa ff87 	bl	8001c2a <_isatty>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_isatty_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_isatty_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	200005c8 	.word	0x200005c8

08006d2c <_lseek_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	2200      	movs	r2, #0
 8006d36:	4d05      	ldr	r5, [pc, #20]	; (8006d4c <_lseek_r+0x20>)
 8006d38:	602a      	str	r2, [r5, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f7fa ff7f 	bl	8001c3e <_lseek>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_lseek_r+0x1e>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_lseek_r+0x1e>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	200005c8 	.word	0x200005c8

08006d50 <_read_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4d05      	ldr	r5, [pc, #20]	; (8006d70 <_read_r+0x20>)
 8006d5c:	602a      	str	r2, [r5, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f7fa ff10 	bl	8001b84 <_read>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_read_r+0x1e>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_read_r+0x1e>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	200005c8 	.word	0x200005c8
 8006d74:	00000000 	.word	0x00000000

08006d78 <atan>:
 8006d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	4bb6      	ldr	r3, [pc, #728]	; (8007058 <atan+0x2e0>)
 8006d7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006d82:	429e      	cmp	r6, r3
 8006d84:	4604      	mov	r4, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	468b      	mov	fp, r1
 8006d8a:	dd17      	ble.n	8006dbc <atan+0x44>
 8006d8c:	4bb3      	ldr	r3, [pc, #716]	; (800705c <atan+0x2e4>)
 8006d8e:	429e      	cmp	r6, r3
 8006d90:	dc01      	bgt.n	8006d96 <atan+0x1e>
 8006d92:	d109      	bne.n	8006da8 <atan+0x30>
 8006d94:	b140      	cbz	r0, 8006da8 <atan+0x30>
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 f9e5 	bl	800016c <__adddf3>
 8006da2:	4604      	mov	r4, r0
 8006da4:	460d      	mov	r5, r1
 8006da6:	e005      	b.n	8006db4 <atan+0x3c>
 8006da8:	f1bb 0f00 	cmp.w	fp, #0
 8006dac:	4cac      	ldr	r4, [pc, #688]	; (8007060 <atan+0x2e8>)
 8006dae:	f300 8121 	bgt.w	8006ff4 <atan+0x27c>
 8006db2:	4dac      	ldr	r5, [pc, #688]	; (8007064 <atan+0x2ec>)
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	4baa      	ldr	r3, [pc, #680]	; (8007068 <atan+0x2f0>)
 8006dbe:	429e      	cmp	r6, r3
 8006dc0:	dc11      	bgt.n	8006de6 <atan+0x6e>
 8006dc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006dc6:	429e      	cmp	r6, r3
 8006dc8:	dc0a      	bgt.n	8006de0 <atan+0x68>
 8006dca:	a38b      	add	r3, pc, #556	; (adr r3, 8006ff8 <atan+0x280>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f7f9 f9cc 	bl	800016c <__adddf3>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4ba5      	ldr	r3, [pc, #660]	; (800706c <atan+0x2f4>)
 8006dd8:	f7f9 fe0e 	bl	80009f8 <__aeabi_dcmpgt>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d1e9      	bne.n	8006db4 <atan+0x3c>
 8006de0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006de4:	e027      	b.n	8006e36 <atan+0xbe>
 8006de6:	f000 f951 	bl	800708c <fabs>
 8006dea:	4ba1      	ldr	r3, [pc, #644]	; (8007070 <atan+0x2f8>)
 8006dec:	4604      	mov	r4, r0
 8006dee:	429e      	cmp	r6, r3
 8006df0:	460d      	mov	r5, r1
 8006df2:	f300 80b8 	bgt.w	8006f66 <atan+0x1ee>
 8006df6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006dfa:	429e      	cmp	r6, r3
 8006dfc:	f300 809c 	bgt.w	8006f38 <atan+0x1c0>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	f7f9 f9b2 	bl	800016c <__adddf3>
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4b98      	ldr	r3, [pc, #608]	; (800706c <atan+0x2f4>)
 8006e0c:	f7f9 f9ac 	bl	8000168 <__aeabi_dsub>
 8006e10:	2200      	movs	r2, #0
 8006e12:	4606      	mov	r6, r0
 8006e14:	460f      	mov	r7, r1
 8006e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7f9 f9a5 	bl	800016c <__adddf3>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4630      	mov	r0, r6
 8006e28:	4639      	mov	r1, r7
 8006e2a:	f7f9 fc7f 	bl	800072c <__aeabi_ddiv>
 8006e2e:	f04f 0a00 	mov.w	sl, #0
 8006e32:	4604      	mov	r4, r0
 8006e34:	460d      	mov	r5, r1
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 fb4b 	bl	80004d8 <__aeabi_dmul>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4680      	mov	r8, r0
 8006e48:	4689      	mov	r9, r1
 8006e4a:	f7f9 fb45 	bl	80004d8 <__aeabi_dmul>
 8006e4e:	a36c      	add	r3, pc, #432	; (adr r3, 8007000 <atan+0x288>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	f7f9 fb3e 	bl	80004d8 <__aeabi_dmul>
 8006e5c:	a36a      	add	r3, pc, #424	; (adr r3, 8007008 <atan+0x290>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 f983 	bl	800016c <__adddf3>
 8006e66:	4632      	mov	r2, r6
 8006e68:	463b      	mov	r3, r7
 8006e6a:	f7f9 fb35 	bl	80004d8 <__aeabi_dmul>
 8006e6e:	a368      	add	r3, pc, #416	; (adr r3, 8007010 <atan+0x298>)
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f7f9 f97a 	bl	800016c <__adddf3>
 8006e78:	4632      	mov	r2, r6
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	f7f9 fb2c 	bl	80004d8 <__aeabi_dmul>
 8006e80:	a365      	add	r3, pc, #404	; (adr r3, 8007018 <atan+0x2a0>)
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f7f9 f971 	bl	800016c <__adddf3>
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	f7f9 fb23 	bl	80004d8 <__aeabi_dmul>
 8006e92:	a363      	add	r3, pc, #396	; (adr r3, 8007020 <atan+0x2a8>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f7f9 f968 	bl	800016c <__adddf3>
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	f7f9 fb1a 	bl	80004d8 <__aeabi_dmul>
 8006ea4:	a360      	add	r3, pc, #384	; (adr r3, 8007028 <atan+0x2b0>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 f95f 	bl	800016c <__adddf3>
 8006eae:	4642      	mov	r2, r8
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	f7f9 fb11 	bl	80004d8 <__aeabi_dmul>
 8006eb6:	a35e      	add	r3, pc, #376	; (adr r3, 8007030 <atan+0x2b8>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	4689      	mov	r9, r1
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 fb08 	bl	80004d8 <__aeabi_dmul>
 8006ec8:	a35b      	add	r3, pc, #364	; (adr r3, 8007038 <atan+0x2c0>)
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 f94b 	bl	8000168 <__aeabi_dsub>
 8006ed2:	4632      	mov	r2, r6
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	f7f9 faff 	bl	80004d8 <__aeabi_dmul>
 8006eda:	a359      	add	r3, pc, #356	; (adr r3, 8007040 <atan+0x2c8>)
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f7f9 f942 	bl	8000168 <__aeabi_dsub>
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	f7f9 faf6 	bl	80004d8 <__aeabi_dmul>
 8006eec:	a356      	add	r3, pc, #344	; (adr r3, 8007048 <atan+0x2d0>)
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f7f9 f939 	bl	8000168 <__aeabi_dsub>
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	463b      	mov	r3, r7
 8006efa:	f7f9 faed 	bl	80004d8 <__aeabi_dmul>
 8006efe:	a354      	add	r3, pc, #336	; (adr r3, 8007050 <atan+0x2d8>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 f930 	bl	8000168 <__aeabi_dsub>
 8006f08:	4632      	mov	r2, r6
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	f7f9 fae4 	bl	80004d8 <__aeabi_dmul>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	f7f9 f928 	bl	800016c <__adddf3>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	462b      	mov	r3, r5
 8006f20:	f7f9 fada 	bl	80004d8 <__aeabi_dmul>
 8006f24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	d144      	bne.n	8006fb8 <atan+0x240>
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7f9 f919 	bl	8000168 <__aeabi_dsub>
 8006f36:	e734      	b.n	8006da2 <atan+0x2a>
 8006f38:	2200      	movs	r2, #0
 8006f3a:	4b4c      	ldr	r3, [pc, #304]	; (800706c <atan+0x2f4>)
 8006f3c:	f7f9 f914 	bl	8000168 <__aeabi_dsub>
 8006f40:	2200      	movs	r2, #0
 8006f42:	4606      	mov	r6, r0
 8006f44:	460f      	mov	r7, r1
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4b48      	ldr	r3, [pc, #288]	; (800706c <atan+0x2f4>)
 8006f4c:	f7f9 f90e 	bl	800016c <__adddf3>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4630      	mov	r0, r6
 8006f56:	4639      	mov	r1, r7
 8006f58:	f7f9 fbe8 	bl	800072c <__aeabi_ddiv>
 8006f5c:	f04f 0a01 	mov.w	sl, #1
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	e767      	b.n	8006e36 <atan+0xbe>
 8006f66:	4b43      	ldr	r3, [pc, #268]	; (8007074 <atan+0x2fc>)
 8006f68:	429e      	cmp	r6, r3
 8006f6a:	da1a      	bge.n	8006fa2 <atan+0x22a>
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4b42      	ldr	r3, [pc, #264]	; (8007078 <atan+0x300>)
 8006f70:	f7f9 f8fa 	bl	8000168 <__aeabi_dsub>
 8006f74:	2200      	movs	r2, #0
 8006f76:	4606      	mov	r6, r0
 8006f78:	460f      	mov	r7, r1
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <atan+0x300>)
 8006f80:	f7f9 faaa 	bl	80004d8 <__aeabi_dmul>
 8006f84:	2200      	movs	r2, #0
 8006f86:	4b39      	ldr	r3, [pc, #228]	; (800706c <atan+0x2f4>)
 8006f88:	f7f9 f8f0 	bl	800016c <__adddf3>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4630      	mov	r0, r6
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 fbca 	bl	800072c <__aeabi_ddiv>
 8006f98:	f04f 0a02 	mov.w	sl, #2
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	e749      	b.n	8006e36 <atan+0xbe>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	4934      	ldr	r1, [pc, #208]	; (800707c <atan+0x304>)
 8006faa:	f7f9 fbbf 	bl	800072c <__aeabi_ddiv>
 8006fae:	f04f 0a03 	mov.w	sl, #3
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	e73e      	b.n	8006e36 <atan+0xbe>
 8006fb8:	4b31      	ldr	r3, [pc, #196]	; (8007080 <atan+0x308>)
 8006fba:	4e32      	ldr	r6, [pc, #200]	; (8007084 <atan+0x30c>)
 8006fbc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006fc0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006fc4:	e9da 2300 	ldrd	r2, r3, [sl]
 8006fc8:	f7f9 f8ce 	bl	8000168 <__aeabi_dsub>
 8006fcc:	4622      	mov	r2, r4
 8006fce:	462b      	mov	r3, r5
 8006fd0:	f7f9 f8ca 	bl	8000168 <__aeabi_dsub>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006fdc:	f7f9 f8c4 	bl	8000168 <__aeabi_dsub>
 8006fe0:	f1bb 0f00 	cmp.w	fp, #0
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	f6bf aee4 	bge.w	8006db4 <atan+0x3c>
 8006fec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ff0:	461d      	mov	r5, r3
 8006ff2:	e6df      	b.n	8006db4 <atan+0x3c>
 8006ff4:	4d24      	ldr	r5, [pc, #144]	; (8007088 <atan+0x310>)
 8006ff6:	e6dd      	b.n	8006db4 <atan+0x3c>
 8006ff8:	8800759c 	.word	0x8800759c
 8006ffc:	7e37e43c 	.word	0x7e37e43c
 8007000:	e322da11 	.word	0xe322da11
 8007004:	3f90ad3a 	.word	0x3f90ad3a
 8007008:	24760deb 	.word	0x24760deb
 800700c:	3fa97b4b 	.word	0x3fa97b4b
 8007010:	a0d03d51 	.word	0xa0d03d51
 8007014:	3fb10d66 	.word	0x3fb10d66
 8007018:	c54c206e 	.word	0xc54c206e
 800701c:	3fb745cd 	.word	0x3fb745cd
 8007020:	920083ff 	.word	0x920083ff
 8007024:	3fc24924 	.word	0x3fc24924
 8007028:	5555550d 	.word	0x5555550d
 800702c:	3fd55555 	.word	0x3fd55555
 8007030:	2c6a6c2f 	.word	0x2c6a6c2f
 8007034:	bfa2b444 	.word	0xbfa2b444
 8007038:	52defd9a 	.word	0x52defd9a
 800703c:	3fadde2d 	.word	0x3fadde2d
 8007040:	af749a6d 	.word	0xaf749a6d
 8007044:	3fb3b0f2 	.word	0x3fb3b0f2
 8007048:	fe231671 	.word	0xfe231671
 800704c:	3fbc71c6 	.word	0x3fbc71c6
 8007050:	9998ebc4 	.word	0x9998ebc4
 8007054:	3fc99999 	.word	0x3fc99999
 8007058:	440fffff 	.word	0x440fffff
 800705c:	7ff00000 	.word	0x7ff00000
 8007060:	54442d18 	.word	0x54442d18
 8007064:	bff921fb 	.word	0xbff921fb
 8007068:	3fdbffff 	.word	0x3fdbffff
 800706c:	3ff00000 	.word	0x3ff00000
 8007070:	3ff2ffff 	.word	0x3ff2ffff
 8007074:	40038000 	.word	0x40038000
 8007078:	3ff80000 	.word	0x3ff80000
 800707c:	bff00000 	.word	0xbff00000
 8007080:	08007868 	.word	0x08007868
 8007084:	08007848 	.word	0x08007848
 8007088:	3ff921fb 	.word	0x3ff921fb

0800708c <fabs>:
 800708c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007090:	4770      	bx	lr

08007092 <atan2>:
 8007092:	f000 b82d 	b.w	80070f0 <__ieee754_atan2>
	...

08007098 <sqrt>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	4606      	mov	r6, r0
 800709c:	460f      	mov	r7, r1
 800709e:	f000 f8f9 	bl	8007294 <__ieee754_sqrt>
 80070a2:	4b12      	ldr	r3, [pc, #72]	; (80070ec <sqrt+0x54>)
 80070a4:	4604      	mov	r4, r0
 80070a6:	f993 3000 	ldrsb.w	r3, [r3]
 80070aa:	460d      	mov	r5, r1
 80070ac:	3301      	adds	r3, #1
 80070ae:	d019      	beq.n	80070e4 <sqrt+0x4c>
 80070b0:	4632      	mov	r2, r6
 80070b2:	463b      	mov	r3, r7
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 fca8 	bl	8000a0c <__aeabi_dcmpun>
 80070bc:	b990      	cbnz	r0, 80070e4 <sqrt+0x4c>
 80070be:	2200      	movs	r2, #0
 80070c0:	2300      	movs	r3, #0
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 fc79 	bl	80009bc <__aeabi_dcmplt>
 80070ca:	b158      	cbz	r0, 80070e4 <sqrt+0x4c>
 80070cc:	f7fc ff4c 	bl	8003f68 <__errno>
 80070d0:	2321      	movs	r3, #33	; 0x21
 80070d2:	2200      	movs	r2, #0
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	2300      	movs	r3, #0
 80070d8:	4610      	mov	r0, r2
 80070da:	4619      	mov	r1, r3
 80070dc:	f7f9 fb26 	bl	800072c <__aeabi_ddiv>
 80070e0:	4604      	mov	r4, r0
 80070e2:	460d      	mov	r5, r1
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2000026c 	.word	0x2000026c

080070f0 <__ieee754_atan2>:
 80070f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	4692      	mov	sl, r2
 80070f6:	4699      	mov	r9, r3
 80070f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070fc:	461f      	mov	r7, r3
 80070fe:	f1ca 0300 	rsb	r3, sl, #0
 8007102:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8007290 <__ieee754_atan2+0x1a0>
 8007106:	ea43 030a 	orr.w	r3, r3, sl
 800710a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800710e:	4573      	cmp	r3, lr
 8007110:	4604      	mov	r4, r0
 8007112:	460d      	mov	r5, r1
 8007114:	d808      	bhi.n	8007128 <__ieee754_atan2+0x38>
 8007116:	4246      	negs	r6, r0
 8007118:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800711c:	4306      	orrs	r6, r0
 800711e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007122:	4576      	cmp	r6, lr
 8007124:	468c      	mov	ip, r1
 8007126:	d908      	bls.n	800713a <__ieee754_atan2+0x4a>
 8007128:	4652      	mov	r2, sl
 800712a:	464b      	mov	r3, r9
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	f7f9 f81c 	bl	800016c <__adddf3>
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	e019      	b.n	800716e <__ieee754_atan2+0x7e>
 800713a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800713e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007142:	ea56 060a 	orrs.w	r6, r6, sl
 8007146:	d103      	bne.n	8007150 <__ieee754_atan2+0x60>
 8007148:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	f7ff be14 	b.w	8006d78 <atan>
 8007150:	17be      	asrs	r6, r7, #30
 8007152:	f006 0602 	and.w	r6, r6, #2
 8007156:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800715a:	ea53 0100 	orrs.w	r1, r3, r0
 800715e:	d10a      	bne.n	8007176 <__ieee754_atan2+0x86>
 8007160:	2e02      	cmp	r6, #2
 8007162:	d067      	beq.n	8007234 <__ieee754_atan2+0x144>
 8007164:	2e03      	cmp	r6, #3
 8007166:	d102      	bne.n	800716e <__ieee754_atan2+0x7e>
 8007168:	a53b      	add	r5, pc, #236	; (adr r5, 8007258 <__ieee754_atan2+0x168>)
 800716a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800716e:	4620      	mov	r0, r4
 8007170:	4629      	mov	r1, r5
 8007172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	ea52 010a 	orrs.w	r1, r2, sl
 800717a:	d106      	bne.n	800718a <__ieee754_atan2+0x9a>
 800717c:	f1bc 0f00 	cmp.w	ip, #0
 8007180:	da63      	bge.n	800724a <__ieee754_atan2+0x15a>
 8007182:	a537      	add	r5, pc, #220	; (adr r5, 8007260 <__ieee754_atan2+0x170>)
 8007184:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007188:	e7f1      	b.n	800716e <__ieee754_atan2+0x7e>
 800718a:	4572      	cmp	r2, lr
 800718c:	d10f      	bne.n	80071ae <__ieee754_atan2+0xbe>
 800718e:	4293      	cmp	r3, r2
 8007190:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007194:	d107      	bne.n	80071a6 <__ieee754_atan2+0xb6>
 8007196:	2e02      	cmp	r6, #2
 8007198:	d850      	bhi.n	800723c <__ieee754_atan2+0x14c>
 800719a:	4b3b      	ldr	r3, [pc, #236]	; (8007288 <__ieee754_atan2+0x198>)
 800719c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80071a0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80071a4:	e7e3      	b.n	800716e <__ieee754_atan2+0x7e>
 80071a6:	2e02      	cmp	r6, #2
 80071a8:	d84c      	bhi.n	8007244 <__ieee754_atan2+0x154>
 80071aa:	4b38      	ldr	r3, [pc, #224]	; (800728c <__ieee754_atan2+0x19c>)
 80071ac:	e7f6      	b.n	800719c <__ieee754_atan2+0xac>
 80071ae:	4573      	cmp	r3, lr
 80071b0:	d0e4      	beq.n	800717c <__ieee754_atan2+0x8c>
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80071b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071bc:	da20      	bge.n	8007200 <__ieee754_atan2+0x110>
 80071be:	2f00      	cmp	r7, #0
 80071c0:	da01      	bge.n	80071c6 <__ieee754_atan2+0xd6>
 80071c2:	323c      	adds	r2, #60	; 0x3c
 80071c4:	db20      	blt.n	8007208 <__ieee754_atan2+0x118>
 80071c6:	4652      	mov	r2, sl
 80071c8:	464b      	mov	r3, r9
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	f7f9 faad 	bl	800072c <__aeabi_ddiv>
 80071d2:	f7ff ff5b 	bl	800708c <fabs>
 80071d6:	f7ff fdcf 	bl	8006d78 <atan>
 80071da:	4604      	mov	r4, r0
 80071dc:	460d      	mov	r5, r1
 80071de:	2e01      	cmp	r6, #1
 80071e0:	d015      	beq.n	800720e <__ieee754_atan2+0x11e>
 80071e2:	2e02      	cmp	r6, #2
 80071e4:	d017      	beq.n	8007216 <__ieee754_atan2+0x126>
 80071e6:	2e00      	cmp	r6, #0
 80071e8:	d0c1      	beq.n	800716e <__ieee754_atan2+0x7e>
 80071ea:	a31f      	add	r3, pc, #124	; (adr r3, 8007268 <__ieee754_atan2+0x178>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f8 ffb8 	bl	8000168 <__aeabi_dsub>
 80071f8:	a31d      	add	r3, pc, #116	; (adr r3, 8007270 <__ieee754_atan2+0x180>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	e016      	b.n	800722e <__ieee754_atan2+0x13e>
 8007200:	a51d      	add	r5, pc, #116	; (adr r5, 8007278 <__ieee754_atan2+0x188>)
 8007202:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007206:	e7ea      	b.n	80071de <__ieee754_atan2+0xee>
 8007208:	2400      	movs	r4, #0
 800720a:	2500      	movs	r5, #0
 800720c:	e7e7      	b.n	80071de <__ieee754_atan2+0xee>
 800720e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007212:	461d      	mov	r5, r3
 8007214:	e7ab      	b.n	800716e <__ieee754_atan2+0x7e>
 8007216:	a314      	add	r3, pc, #80	; (adr r3, 8007268 <__ieee754_atan2+0x178>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f8 ffa2 	bl	8000168 <__aeabi_dsub>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	a111      	add	r1, pc, #68	; (adr r1, 8007270 <__ieee754_atan2+0x180>)
 800722a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800722e:	f7f8 ff9b 	bl	8000168 <__aeabi_dsub>
 8007232:	e77f      	b.n	8007134 <__ieee754_atan2+0x44>
 8007234:	a50e      	add	r5, pc, #56	; (adr r5, 8007270 <__ieee754_atan2+0x180>)
 8007236:	e9d5 4500 	ldrd	r4, r5, [r5]
 800723a:	e798      	b.n	800716e <__ieee754_atan2+0x7e>
 800723c:	a510      	add	r5, pc, #64	; (adr r5, 8007280 <__ieee754_atan2+0x190>)
 800723e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007242:	e794      	b.n	800716e <__ieee754_atan2+0x7e>
 8007244:	2400      	movs	r4, #0
 8007246:	2500      	movs	r5, #0
 8007248:	e791      	b.n	800716e <__ieee754_atan2+0x7e>
 800724a:	a50b      	add	r5, pc, #44	; (adr r5, 8007278 <__ieee754_atan2+0x188>)
 800724c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007250:	e78d      	b.n	800716e <__ieee754_atan2+0x7e>
 8007252:	bf00      	nop
 8007254:	f3af 8000 	nop.w
 8007258:	54442d18 	.word	0x54442d18
 800725c:	c00921fb 	.word	0xc00921fb
 8007260:	54442d18 	.word	0x54442d18
 8007264:	bff921fb 	.word	0xbff921fb
 8007268:	33145c07 	.word	0x33145c07
 800726c:	3ca1a626 	.word	0x3ca1a626
 8007270:	54442d18 	.word	0x54442d18
 8007274:	400921fb 	.word	0x400921fb
 8007278:	54442d18 	.word	0x54442d18
 800727c:	3ff921fb 	.word	0x3ff921fb
 8007280:	54442d18 	.word	0x54442d18
 8007284:	3fe921fb 	.word	0x3fe921fb
 8007288:	08007888 	.word	0x08007888
 800728c:	080078a0 	.word	0x080078a0
 8007290:	7ff00000 	.word	0x7ff00000

08007294 <__ieee754_sqrt>:
 8007294:	f8df c150 	ldr.w	ip, [pc, #336]	; 80073e8 <__ieee754_sqrt+0x154>
 8007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	ea3c 0c01 	bics.w	ip, ip, r1
 80072a0:	460b      	mov	r3, r1
 80072a2:	4606      	mov	r6, r0
 80072a4:	460d      	mov	r5, r1
 80072a6:	460a      	mov	r2, r1
 80072a8:	4607      	mov	r7, r0
 80072aa:	4604      	mov	r4, r0
 80072ac:	d10e      	bne.n	80072cc <__ieee754_sqrt+0x38>
 80072ae:	4602      	mov	r2, r0
 80072b0:	f7f9 f912 	bl	80004d8 <__aeabi_dmul>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4630      	mov	r0, r6
 80072ba:	4629      	mov	r1, r5
 80072bc:	f7f8 ff56 	bl	800016c <__adddf3>
 80072c0:	4606      	mov	r6, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	4630      	mov	r0, r6
 80072c6:	4629      	mov	r1, r5
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072cc:	2900      	cmp	r1, #0
 80072ce:	dc0d      	bgt.n	80072ec <__ieee754_sqrt+0x58>
 80072d0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80072d4:	ea5c 0707 	orrs.w	r7, ip, r7
 80072d8:	d0f4      	beq.n	80072c4 <__ieee754_sqrt+0x30>
 80072da:	b139      	cbz	r1, 80072ec <__ieee754_sqrt+0x58>
 80072dc:	4602      	mov	r2, r0
 80072de:	f7f8 ff43 	bl	8000168 <__aeabi_dsub>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	f7f9 fa21 	bl	800072c <__aeabi_ddiv>
 80072ea:	e7e9      	b.n	80072c0 <__ieee754_sqrt+0x2c>
 80072ec:	1512      	asrs	r2, r2, #20
 80072ee:	d074      	beq.n	80073da <__ieee754_sqrt+0x146>
 80072f0:	2000      	movs	r0, #0
 80072f2:	07d5      	lsls	r5, r2, #31
 80072f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80072fc:	bf5e      	ittt	pl
 80072fe:	0fe3      	lsrpl	r3, r4, #31
 8007300:	0064      	lslpl	r4, r4, #1
 8007302:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8007306:	0fe3      	lsrs	r3, r4, #31
 8007308:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800730c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007310:	2516      	movs	r5, #22
 8007312:	4601      	mov	r1, r0
 8007314:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007318:	1076      	asrs	r6, r6, #1
 800731a:	0064      	lsls	r4, r4, #1
 800731c:	188f      	adds	r7, r1, r2
 800731e:	429f      	cmp	r7, r3
 8007320:	bfde      	ittt	le
 8007322:	1bdb      	suble	r3, r3, r7
 8007324:	18b9      	addle	r1, r7, r2
 8007326:	1880      	addle	r0, r0, r2
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	3d01      	subs	r5, #1
 800732c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007330:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007334:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007338:	d1f0      	bne.n	800731c <__ieee754_sqrt+0x88>
 800733a:	462a      	mov	r2, r5
 800733c:	f04f 0e20 	mov.w	lr, #32
 8007340:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007344:	428b      	cmp	r3, r1
 8007346:	eb07 0c05 	add.w	ip, r7, r5
 800734a:	dc02      	bgt.n	8007352 <__ieee754_sqrt+0xbe>
 800734c:	d113      	bne.n	8007376 <__ieee754_sqrt+0xe2>
 800734e:	45a4      	cmp	ip, r4
 8007350:	d811      	bhi.n	8007376 <__ieee754_sqrt+0xe2>
 8007352:	f1bc 0f00 	cmp.w	ip, #0
 8007356:	eb0c 0507 	add.w	r5, ip, r7
 800735a:	da43      	bge.n	80073e4 <__ieee754_sqrt+0x150>
 800735c:	2d00      	cmp	r5, #0
 800735e:	db41      	blt.n	80073e4 <__ieee754_sqrt+0x150>
 8007360:	f101 0801 	add.w	r8, r1, #1
 8007364:	1a5b      	subs	r3, r3, r1
 8007366:	4641      	mov	r1, r8
 8007368:	45a4      	cmp	ip, r4
 800736a:	bf88      	it	hi
 800736c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007370:	eba4 040c 	sub.w	r4, r4, ip
 8007374:	443a      	add	r2, r7
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	f1be 0e01 	subs.w	lr, lr, #1
 800737c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007380:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007384:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007388:	d1dc      	bne.n	8007344 <__ieee754_sqrt+0xb0>
 800738a:	4323      	orrs	r3, r4
 800738c:	d006      	beq.n	800739c <__ieee754_sqrt+0x108>
 800738e:	1c54      	adds	r4, r2, #1
 8007390:	bf0b      	itete	eq
 8007392:	4672      	moveq	r2, lr
 8007394:	3201      	addne	r2, #1
 8007396:	3001      	addeq	r0, #1
 8007398:	f022 0201 	bicne.w	r2, r2, #1
 800739c:	1043      	asrs	r3, r0, #1
 800739e:	07c1      	lsls	r1, r0, #31
 80073a0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80073a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80073a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80073ac:	bf48      	it	mi
 80073ae:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80073b2:	4610      	mov	r0, r2
 80073b4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80073b8:	e782      	b.n	80072c0 <__ieee754_sqrt+0x2c>
 80073ba:	0ae3      	lsrs	r3, r4, #11
 80073bc:	3915      	subs	r1, #21
 80073be:	0564      	lsls	r4, r4, #21
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0fa      	beq.n	80073ba <__ieee754_sqrt+0x126>
 80073c4:	02de      	lsls	r6, r3, #11
 80073c6:	d50a      	bpl.n	80073de <__ieee754_sqrt+0x14a>
 80073c8:	f1c2 0020 	rsb	r0, r2, #32
 80073cc:	fa24 f000 	lsr.w	r0, r4, r0
 80073d0:	1e55      	subs	r5, r2, #1
 80073d2:	4094      	lsls	r4, r2
 80073d4:	4303      	orrs	r3, r0
 80073d6:	1b4a      	subs	r2, r1, r5
 80073d8:	e78a      	b.n	80072f0 <__ieee754_sqrt+0x5c>
 80073da:	4611      	mov	r1, r2
 80073dc:	e7f0      	b.n	80073c0 <__ieee754_sqrt+0x12c>
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	3201      	adds	r2, #1
 80073e2:	e7ef      	b.n	80073c4 <__ieee754_sqrt+0x130>
 80073e4:	4688      	mov	r8, r1
 80073e6:	e7bd      	b.n	8007364 <__ieee754_sqrt+0xd0>
 80073e8:	7ff00000 	.word	0x7ff00000

080073ec <_init>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr

080073f8 <_fini>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr
